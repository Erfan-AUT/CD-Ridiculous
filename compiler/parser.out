Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ERROR

Grammar

Rule 0     S' -> program
Rule 1     program -> declist MAIN LRB RRB block
Rule 2     declist -> declist dec
Rule 3     declist -> eps
Rule 4     dec -> vardec
Rule 5     dec -> funcdec
Rule 6     vardec -> idlist COLON type SEMICOLON
Rule 7     funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block
Rule 8     funcdec -> FUNCTION ID LRB paramdecs RRB block
Rule 9     type -> INTEGER
Rule 10    type -> FLOAT
Rule 11    type -> BOOLEAN
Rule 12    iddec -> lvalue
Rule 13    iddec -> ID ASSIGN exp
Rule 14    idlist -> iddec
Rule 15    idlist -> idlist COMMA iddec
Rule 16    paramdecs -> paramdecslist
Rule 17    paramdecs -> eps
Rule 18    paramdecslist -> paramdec
Rule 19    paramdecslist -> paramdecslist COMMA paramdec
Rule 20    paramdec -> ID COLON type
Rule 21    paramdec -> ID LSB RSB COLON type
Rule 22    block -> LCB stmtlist RCB
Rule 23    stmtlist -> stmtlist stmt
Rule 24    stmtlist -> eps
Rule 25    lvalue -> ID
Rule 26    lvalue -> ID LSB exp RSB
Rule 27    case -> WHERE const COLON stmtlist
Rule 28    cases -> cases case
Rule 29    cases -> eps
Rule 30    stmt -> ostmt
Rule 31    stmt -> cstmt
Rule 32    ostmt -> IF LRB exp RRB simple
Rule 33    ostmt -> IF LRB exp RRB ostmt
Rule 34    ostmt -> IF LRB exp RRB cstmt elseiflist ELSE ostmt
Rule 35    ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt
Rule 36    ostmt -> FOR LRB ID IN RRB ostmt
Rule 37    ostmt -> WHILE LRB exp LRB ostmt
Rule 38    cstmt -> simple
Rule 39    cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt
Rule 40    cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt
Rule 41    cstmt -> FOR LRB ID IN RRB cstmt
Rule 42    cstmt -> WHILE LRB exp LRB cstmt
Rule 43    elseiflist -> elseiflist ELSEIF LRB exp RRB cstmt
Rule 44    elseiflist -> eps
Rule 45    simple -> RETURN exp SEMICOLON
Rule 46    simple -> exp SEMICOLON
Rule 47    simple -> block
Rule 48    simple -> vardec
Rule 49    simple -> ON LRB exp RRB LCB cases RCB SEMICOLON
Rule 50    simple -> PRINT LRB ID RRB SEMICOLON
Rule 51    relop -> GT
Rule 52    relop -> GE
Rule 53    relop -> LT
Rule 54    relop -> LE
Rule 55    relop -> EQ
Rule 56    relop -> NE
Rule 57    exp -> lvalue ASSIGN exp
Rule 58    exp -> exp operator exp
Rule 59    exp -> exp relop exp
Rule 60    exp -> const
Rule 61    exp -> lvalue
Rule 62    exp -> ID LRB explist RRB
Rule 63    exp -> LRB exp RRB
Rule 64    exp -> SUB exp
Rule 65    exp -> NOT exp
Rule 66    operator -> AND
Rule 67    operator -> OR
Rule 68    operator -> SUM
Rule 69    operator -> SUB
Rule 70    operator -> MUL
Rule 71    operator -> DIV
Rule 72    operator -> MOD
Rule 73    const -> INTEGERNUMBER
Rule 74    const -> FLOATNUMBER
Rule 75    const -> TRUE
Rule 76    const -> FALSE
Rule 77    explist -> exp
Rule 78    explist -> explist COMMA exp
Rule 79    explist -> eps
Rule 80    eps -> <empty>

Terminals, with rules where they appear

AND                  : 66
ASSIGN               : 13 57
BOOLEAN              : 11
COLON                : 6 7 20 21 27
COMMA                : 15 19 78
DIV                  : 71
ELSE                 : 34 39
ELSEIF               : 43
EQ                   : 55
ERROR                : 
FALSE                : 76
FLOAT                : 10
FLOATNUMBER          : 74
FOR                  : 35 36 40 41
FUNCTION             : 7 8
GE                   : 52
GT                   : 51
ID                   : 7 8 13 20 21 25 26 36 41 50 62
IF                   : 32 33 34 39
IN                   : 36 41
INTEGER              : 9
INTEGERNUMBER        : 73
LCB                  : 22 49
LE                   : 54
LRB                  : 1 7 8 32 33 34 35 36 37 37 39 40 41 42 42 43 49 50 62 63
LSB                  : 21 26
LT                   : 53
MAIN                 : 1
MOD                  : 72
MUL                  : 70
NE                   : 56
NOT                  : 65
ON                   : 49
OR                   : 67
PRINT                : 50
RCB                  : 22 49
RETURN               : 45
RRB                  : 1 7 8 32 33 34 35 36 39 40 41 43 49 50 62 63
RSB                  : 21 26
SEMICOLON            : 6 35 35 40 40 45 46 49 50
SUB                  : 64 69
SUM                  : 68
TRUE                 : 75
WHERE                : 27
WHILE                : 37 42
error                : 

Nonterminals, with rules where they appear

block                : 1 7 8 47
case                 : 28
cases                : 28 49
const                : 27 60
cstmt                : 31 34 39 39 40 41 42 43
dec                  : 2
declist              : 1 2
elseiflist           : 34 39 43
eps                  : 3 17 24 29 44 79
exp                  : 13 26 32 33 34 35 35 35 37 39 40 40 40 42 43 45 46 49 57 58 58 59 59 63 64 65 77 78
explist              : 62 78
funcdec              : 5
iddec                : 14 15
idlist               : 6 15
lvalue               : 12 57 61
operator             : 58
ostmt                : 30 33 34 35 36 37
paramdec             : 18 19
paramdecs            : 7 8
paramdecslist        : 16 19
program              : 0
relop                : 59
simple               : 32 38
stmt                 : 23
stmtlist             : 22 23 27
type                 : 6 7 20 21
vardec               : 4 48

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declist MAIN LRB RRB block
    (2) declist -> . declist dec
    (3) declist -> . eps
    (80) eps -> .

    MAIN            reduce using rule 80 (eps -> .)
    FUNCTION        reduce using rule 80 (eps -> .)
    ID              reduce using rule 80 (eps -> .)

    program                        shift and go to state 1
    declist                        shift and go to state 2
    eps                            shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> declist . MAIN LRB RRB block
    (2) declist -> declist . dec
    (4) dec -> . vardec
    (5) dec -> . funcdec
    (6) vardec -> . idlist COLON type SEMICOLON
    (7) funcdec -> . FUNCTION ID LRB paramdecs RRB COLON type block
    (8) funcdec -> . FUNCTION ID LRB paramdecs RRB block
    (14) idlist -> . iddec
    (15) idlist -> . idlist COMMA iddec
    (12) iddec -> . lvalue
    (13) iddec -> . ID ASSIGN exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB

    MAIN            shift and go to state 4
    FUNCTION        shift and go to state 9
    ID              shift and go to state 10

    dec                            shift and go to state 5
    vardec                         shift and go to state 6
    funcdec                        shift and go to state 7
    idlist                         shift and go to state 8
    iddec                          shift and go to state 11
    lvalue                         shift and go to state 12

state 3

    (3) declist -> eps .

    MAIN            reduce using rule 3 (declist -> eps .)
    FUNCTION        reduce using rule 3 (declist -> eps .)
    ID              reduce using rule 3 (declist -> eps .)


state 4

    (1) program -> declist MAIN . LRB RRB block

    LRB             shift and go to state 13


state 5

    (2) declist -> declist dec .

    MAIN            reduce using rule 2 (declist -> declist dec .)
    FUNCTION        reduce using rule 2 (declist -> declist dec .)
    ID              reduce using rule 2 (declist -> declist dec .)


state 6

    (4) dec -> vardec .

    MAIN            reduce using rule 4 (dec -> vardec .)
    FUNCTION        reduce using rule 4 (dec -> vardec .)
    ID              reduce using rule 4 (dec -> vardec .)


state 7

    (5) dec -> funcdec .

    MAIN            reduce using rule 5 (dec -> funcdec .)
    FUNCTION        reduce using rule 5 (dec -> funcdec .)
    ID              reduce using rule 5 (dec -> funcdec .)


state 8

    (6) vardec -> idlist . COLON type SEMICOLON
    (15) idlist -> idlist . COMMA iddec

    COLON           shift and go to state 14
    COMMA           shift and go to state 15


state 9

    (7) funcdec -> FUNCTION . ID LRB paramdecs RRB COLON type block
    (8) funcdec -> FUNCTION . ID LRB paramdecs RRB block

    ID              shift and go to state 16


state 10

    (13) iddec -> ID . ASSIGN exp
    (25) lvalue -> ID .
    (26) lvalue -> ID . LSB exp RSB

    ASSIGN          shift and go to state 17
    COLON           reduce using rule 25 (lvalue -> ID .)
    COMMA           reduce using rule 25 (lvalue -> ID .)
    LSB             shift and go to state 18


state 11

    (14) idlist -> iddec .

    COLON           reduce using rule 14 (idlist -> iddec .)
    COMMA           reduce using rule 14 (idlist -> iddec .)


state 12

    (12) iddec -> lvalue .

    COLON           reduce using rule 12 (iddec -> lvalue .)
    COMMA           reduce using rule 12 (iddec -> lvalue .)


state 13

    (1) program -> declist MAIN LRB . RRB block

    RRB             shift and go to state 19


state 14

    (6) vardec -> idlist COLON . type SEMICOLON
    (9) type -> . INTEGER
    (10) type -> . FLOAT
    (11) type -> . BOOLEAN

    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22
    BOOLEAN         shift and go to state 23

    type                           shift and go to state 20

state 15

    (15) idlist -> idlist COMMA . iddec
    (12) iddec -> . lvalue
    (13) iddec -> . ID ASSIGN exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 10

    iddec                          shift and go to state 24
    lvalue                         shift and go to state 12

state 16

    (7) funcdec -> FUNCTION ID . LRB paramdecs RRB COLON type block
    (8) funcdec -> FUNCTION ID . LRB paramdecs RRB block

    LRB             shift and go to state 25


state 17

    (13) iddec -> ID ASSIGN . exp
    (57) exp -> . lvalue ASSIGN exp
    (58) exp -> . exp operator exp
    (59) exp -> . exp relop exp
    (60) exp -> . const
    (61) exp -> . lvalue
    (62) exp -> . ID LRB explist RRB
    (63) exp -> . LRB exp RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (73) const -> . INTEGERNUMBER
    (74) const -> . FLOATNUMBER
    (75) const -> . TRUE
    (76) const -> . FALSE

    ID              shift and go to state 26
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 27
    lvalue                         shift and go to state 28
    const                          shift and go to state 29

state 18

    (26) lvalue -> ID LSB . exp RSB
    (57) exp -> . lvalue ASSIGN exp
    (58) exp -> . exp operator exp
    (59) exp -> . exp relop exp
    (60) exp -> . const
    (61) exp -> . lvalue
    (62) exp -> . ID LRB explist RRB
    (63) exp -> . LRB exp RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (73) const -> . INTEGERNUMBER
    (74) const -> . FLOATNUMBER
    (75) const -> . TRUE
    (76) const -> . FALSE

    ID              shift and go to state 26
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 37
    lvalue                         shift and go to state 28
    const                          shift and go to state 29

state 19

    (1) program -> declist MAIN LRB RRB . block
    (22) block -> . LCB stmtlist RCB

    LCB             shift and go to state 39

    block                          shift and go to state 38

state 20

    (6) vardec -> idlist COLON type . SEMICOLON

    SEMICOLON       shift and go to state 40


state 21

    (9) type -> INTEGER .

    SEMICOLON       reduce using rule 9 (type -> INTEGER .)
    COMMA           reduce using rule 9 (type -> INTEGER .)
    RRB             reduce using rule 9 (type -> INTEGER .)
    LCB             reduce using rule 9 (type -> INTEGER .)


state 22

    (10) type -> FLOAT .

    SEMICOLON       reduce using rule 10 (type -> FLOAT .)
    COMMA           reduce using rule 10 (type -> FLOAT .)
    RRB             reduce using rule 10 (type -> FLOAT .)
    LCB             reduce using rule 10 (type -> FLOAT .)


state 23

    (11) type -> BOOLEAN .

    SEMICOLON       reduce using rule 11 (type -> BOOLEAN .)
    COMMA           reduce using rule 11 (type -> BOOLEAN .)
    RRB             reduce using rule 11 (type -> BOOLEAN .)
    LCB             reduce using rule 11 (type -> BOOLEAN .)


state 24

    (15) idlist -> idlist COMMA iddec .

    COLON           reduce using rule 15 (idlist -> idlist COMMA iddec .)
    COMMA           reduce using rule 15 (idlist -> idlist COMMA iddec .)


state 25

    (7) funcdec -> FUNCTION ID LRB . paramdecs RRB COLON type block
    (8) funcdec -> FUNCTION ID LRB . paramdecs RRB block
    (16) paramdecs -> . paramdecslist
    (17) paramdecs -> . eps
    (18) paramdecslist -> . paramdec
    (19) paramdecslist -> . paramdecslist COMMA paramdec
    (80) eps -> .
    (20) paramdec -> . ID COLON type
    (21) paramdec -> . ID LSB RSB COLON type

    RRB             reduce using rule 80 (eps -> .)
    ID              shift and go to state 41

    paramdecs                      shift and go to state 42
    paramdecslist                  shift and go to state 43
    eps                            shift and go to state 44
    paramdec                       shift and go to state 45

state 26

    (62) exp -> ID . LRB explist RRB
    (25) lvalue -> ID .
    (26) lvalue -> ID . LSB exp RSB

  ! shift/reduce conflict for LRB resolved as shift
    LRB             shift and go to state 46
    ASSIGN          reduce using rule 25 (lvalue -> ID .)
    AND             reduce using rule 25 (lvalue -> ID .)
    OR              reduce using rule 25 (lvalue -> ID .)
    SUM             reduce using rule 25 (lvalue -> ID .)
    SUB             reduce using rule 25 (lvalue -> ID .)
    MUL             reduce using rule 25 (lvalue -> ID .)
    DIV             reduce using rule 25 (lvalue -> ID .)
    MOD             reduce using rule 25 (lvalue -> ID .)
    GT              reduce using rule 25 (lvalue -> ID .)
    GE              reduce using rule 25 (lvalue -> ID .)
    LT              reduce using rule 25 (lvalue -> ID .)
    LE              reduce using rule 25 (lvalue -> ID .)
    EQ              reduce using rule 25 (lvalue -> ID .)
    NE              reduce using rule 25 (lvalue -> ID .)
    COLON           reduce using rule 25 (lvalue -> ID .)
    COMMA           reduce using rule 25 (lvalue -> ID .)
    RSB             reduce using rule 25 (lvalue -> ID .)
    RRB             reduce using rule 25 (lvalue -> ID .)
    SEMICOLON       reduce using rule 25 (lvalue -> ID .)
    LSB             shift and go to state 18

  ! LRB             [ reduce using rule 25 (lvalue -> ID .) ]


state 27

    (13) iddec -> ID ASSIGN exp .
    (58) exp -> exp . operator exp
    (59) exp -> exp . relop exp
    (66) operator -> . AND
    (67) operator -> . OR
    (68) operator -> . SUM
    (69) operator -> . SUB
    (70) operator -> . MUL
    (71) operator -> . DIV
    (72) operator -> . MOD
    (51) relop -> . GT
    (52) relop -> . GE
    (53) relop -> . LT
    (54) relop -> . LE
    (55) relop -> . EQ
    (56) relop -> . NE

    COLON           reduce using rule 13 (iddec -> ID ASSIGN exp .)
    COMMA           reduce using rule 13 (iddec -> ID ASSIGN exp .)
    AND             shift and go to state 49
    OR              shift and go to state 50
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 28

    (57) exp -> lvalue . ASSIGN exp
    (61) exp -> lvalue .

    ASSIGN          shift and go to state 62
    AND             reduce using rule 61 (exp -> lvalue .)
    OR              reduce using rule 61 (exp -> lvalue .)
    SUM             reduce using rule 61 (exp -> lvalue .)
    SUB             reduce using rule 61 (exp -> lvalue .)
    MUL             reduce using rule 61 (exp -> lvalue .)
    DIV             reduce using rule 61 (exp -> lvalue .)
    MOD             reduce using rule 61 (exp -> lvalue .)
    GT              reduce using rule 61 (exp -> lvalue .)
    GE              reduce using rule 61 (exp -> lvalue .)
    LT              reduce using rule 61 (exp -> lvalue .)
    LE              reduce using rule 61 (exp -> lvalue .)
    EQ              reduce using rule 61 (exp -> lvalue .)
    NE              reduce using rule 61 (exp -> lvalue .)
    COLON           reduce using rule 61 (exp -> lvalue .)
    COMMA           reduce using rule 61 (exp -> lvalue .)
    RSB             reduce using rule 61 (exp -> lvalue .)
    RRB             reduce using rule 61 (exp -> lvalue .)
    SEMICOLON       reduce using rule 61 (exp -> lvalue .)
    LRB             reduce using rule 61 (exp -> lvalue .)


state 29

    (60) exp -> const .

    AND             reduce using rule 60 (exp -> const .)
    OR              reduce using rule 60 (exp -> const .)
    SUM             reduce using rule 60 (exp -> const .)
    SUB             reduce using rule 60 (exp -> const .)
    MUL             reduce using rule 60 (exp -> const .)
    DIV             reduce using rule 60 (exp -> const .)
    MOD             reduce using rule 60 (exp -> const .)
    GT              reduce using rule 60 (exp -> const .)
    GE              reduce using rule 60 (exp -> const .)
    LT              reduce using rule 60 (exp -> const .)
    LE              reduce using rule 60 (exp -> const .)
    EQ              reduce using rule 60 (exp -> const .)
    NE              reduce using rule 60 (exp -> const .)
    COLON           reduce using rule 60 (exp -> const .)
    COMMA           reduce using rule 60 (exp -> const .)
    RSB             reduce using rule 60 (exp -> const .)
    RRB             reduce using rule 60 (exp -> const .)
    SEMICOLON       reduce using rule 60 (exp -> const .)
    LRB             reduce using rule 60 (exp -> const .)


state 30

    (63) exp -> LRB . exp RRB
    (57) exp -> . lvalue ASSIGN exp
    (58) exp -> . exp operator exp
    (59) exp -> . exp relop exp
    (60) exp -> . const
    (61) exp -> . lvalue
    (62) exp -> . ID LRB explist RRB
    (63) exp -> . LRB exp RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (73) const -> . INTEGERNUMBER
    (74) const -> . FLOATNUMBER
    (75) const -> . TRUE
    (76) const -> . FALSE

    ID              shift and go to state 26
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 63
    lvalue                         shift and go to state 28
    const                          shift and go to state 29

state 31

    (64) exp -> SUB . exp
    (57) exp -> . lvalue ASSIGN exp
    (58) exp -> . exp operator exp
    (59) exp -> . exp relop exp
    (60) exp -> . const
    (61) exp -> . lvalue
    (62) exp -> . ID LRB explist RRB
    (63) exp -> . LRB exp RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (73) const -> . INTEGERNUMBER
    (74) const -> . FLOATNUMBER
    (75) const -> . TRUE
    (76) const -> . FALSE

    ID              shift and go to state 26
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 64
    lvalue                         shift and go to state 28
    const                          shift and go to state 29

state 32

    (65) exp -> NOT . exp
    (57) exp -> . lvalue ASSIGN exp
    (58) exp -> . exp operator exp
    (59) exp -> . exp relop exp
    (60) exp -> . const
    (61) exp -> . lvalue
    (62) exp -> . ID LRB explist RRB
    (63) exp -> . LRB exp RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (73) const -> . INTEGERNUMBER
    (74) const -> . FLOATNUMBER
    (75) const -> . TRUE
    (76) const -> . FALSE

    ID              shift and go to state 26
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 65
    lvalue                         shift and go to state 28
    const                          shift and go to state 29

state 33

    (73) const -> INTEGERNUMBER .

    AND             reduce using rule 73 (const -> INTEGERNUMBER .)
    OR              reduce using rule 73 (const -> INTEGERNUMBER .)
    SUM             reduce using rule 73 (const -> INTEGERNUMBER .)
    SUB             reduce using rule 73 (const -> INTEGERNUMBER .)
    MUL             reduce using rule 73 (const -> INTEGERNUMBER .)
    DIV             reduce using rule 73 (const -> INTEGERNUMBER .)
    MOD             reduce using rule 73 (const -> INTEGERNUMBER .)
    GT              reduce using rule 73 (const -> INTEGERNUMBER .)
    GE              reduce using rule 73 (const -> INTEGERNUMBER .)
    LT              reduce using rule 73 (const -> INTEGERNUMBER .)
    LE              reduce using rule 73 (const -> INTEGERNUMBER .)
    EQ              reduce using rule 73 (const -> INTEGERNUMBER .)
    NE              reduce using rule 73 (const -> INTEGERNUMBER .)
    COLON           reduce using rule 73 (const -> INTEGERNUMBER .)
    COMMA           reduce using rule 73 (const -> INTEGERNUMBER .)
    RSB             reduce using rule 73 (const -> INTEGERNUMBER .)
    RRB             reduce using rule 73 (const -> INTEGERNUMBER .)
    SEMICOLON       reduce using rule 73 (const -> INTEGERNUMBER .)
    LRB             reduce using rule 73 (const -> INTEGERNUMBER .)


state 34

    (74) const -> FLOATNUMBER .

    AND             reduce using rule 74 (const -> FLOATNUMBER .)
    OR              reduce using rule 74 (const -> FLOATNUMBER .)
    SUM             reduce using rule 74 (const -> FLOATNUMBER .)
    SUB             reduce using rule 74 (const -> FLOATNUMBER .)
    MUL             reduce using rule 74 (const -> FLOATNUMBER .)
    DIV             reduce using rule 74 (const -> FLOATNUMBER .)
    MOD             reduce using rule 74 (const -> FLOATNUMBER .)
    GT              reduce using rule 74 (const -> FLOATNUMBER .)
    GE              reduce using rule 74 (const -> FLOATNUMBER .)
    LT              reduce using rule 74 (const -> FLOATNUMBER .)
    LE              reduce using rule 74 (const -> FLOATNUMBER .)
    EQ              reduce using rule 74 (const -> FLOATNUMBER .)
    NE              reduce using rule 74 (const -> FLOATNUMBER .)
    COLON           reduce using rule 74 (const -> FLOATNUMBER .)
    COMMA           reduce using rule 74 (const -> FLOATNUMBER .)
    RSB             reduce using rule 74 (const -> FLOATNUMBER .)
    RRB             reduce using rule 74 (const -> FLOATNUMBER .)
    SEMICOLON       reduce using rule 74 (const -> FLOATNUMBER .)
    LRB             reduce using rule 74 (const -> FLOATNUMBER .)


state 35

    (75) const -> TRUE .

    AND             reduce using rule 75 (const -> TRUE .)
    OR              reduce using rule 75 (const -> TRUE .)
    SUM             reduce using rule 75 (const -> TRUE .)
    SUB             reduce using rule 75 (const -> TRUE .)
    MUL             reduce using rule 75 (const -> TRUE .)
    DIV             reduce using rule 75 (const -> TRUE .)
    MOD             reduce using rule 75 (const -> TRUE .)
    GT              reduce using rule 75 (const -> TRUE .)
    GE              reduce using rule 75 (const -> TRUE .)
    LT              reduce using rule 75 (const -> TRUE .)
    LE              reduce using rule 75 (const -> TRUE .)
    EQ              reduce using rule 75 (const -> TRUE .)
    NE              reduce using rule 75 (const -> TRUE .)
    COLON           reduce using rule 75 (const -> TRUE .)
    COMMA           reduce using rule 75 (const -> TRUE .)
    RSB             reduce using rule 75 (const -> TRUE .)
    RRB             reduce using rule 75 (const -> TRUE .)
    SEMICOLON       reduce using rule 75 (const -> TRUE .)
    LRB             reduce using rule 75 (const -> TRUE .)


state 36

    (76) const -> FALSE .

    AND             reduce using rule 76 (const -> FALSE .)
    OR              reduce using rule 76 (const -> FALSE .)
    SUM             reduce using rule 76 (const -> FALSE .)
    SUB             reduce using rule 76 (const -> FALSE .)
    MUL             reduce using rule 76 (const -> FALSE .)
    DIV             reduce using rule 76 (const -> FALSE .)
    MOD             reduce using rule 76 (const -> FALSE .)
    GT              reduce using rule 76 (const -> FALSE .)
    GE              reduce using rule 76 (const -> FALSE .)
    LT              reduce using rule 76 (const -> FALSE .)
    LE              reduce using rule 76 (const -> FALSE .)
    EQ              reduce using rule 76 (const -> FALSE .)
    NE              reduce using rule 76 (const -> FALSE .)
    COLON           reduce using rule 76 (const -> FALSE .)
    COMMA           reduce using rule 76 (const -> FALSE .)
    RSB             reduce using rule 76 (const -> FALSE .)
    RRB             reduce using rule 76 (const -> FALSE .)
    SEMICOLON       reduce using rule 76 (const -> FALSE .)
    LRB             reduce using rule 76 (const -> FALSE .)


state 37

    (26) lvalue -> ID LSB exp . RSB
    (58) exp -> exp . operator exp
    (59) exp -> exp . relop exp
    (66) operator -> . AND
    (67) operator -> . OR
    (68) operator -> . SUM
    (69) operator -> . SUB
    (70) operator -> . MUL
    (71) operator -> . DIV
    (72) operator -> . MOD
    (51) relop -> . GT
    (52) relop -> . GE
    (53) relop -> . LT
    (54) relop -> . LE
    (55) relop -> . EQ
    (56) relop -> . NE

    RSB             shift and go to state 66
    AND             shift and go to state 49
    OR              shift and go to state 50
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 38

    (1) program -> declist MAIN LRB RRB block .

    $end            reduce using rule 1 (program -> declist MAIN LRB RRB block .)


state 39

    (22) block -> LCB . stmtlist RCB
    (23) stmtlist -> . stmtlist stmt
    (24) stmtlist -> . eps
    (80) eps -> .

    RCB             reduce using rule 80 (eps -> .)
    IF              reduce using rule 80 (eps -> .)
    FOR             reduce using rule 80 (eps -> .)
    WHILE           reduce using rule 80 (eps -> .)
    RETURN          reduce using rule 80 (eps -> .)
    ON              reduce using rule 80 (eps -> .)
    PRINT           reduce using rule 80 (eps -> .)
    ID              reduce using rule 80 (eps -> .)
    LRB             reduce using rule 80 (eps -> .)
    SUB             reduce using rule 80 (eps -> .)
    NOT             reduce using rule 80 (eps -> .)
    LCB             reduce using rule 80 (eps -> .)
    INTEGERNUMBER   reduce using rule 80 (eps -> .)
    FLOATNUMBER     reduce using rule 80 (eps -> .)
    TRUE            reduce using rule 80 (eps -> .)
    FALSE           reduce using rule 80 (eps -> .)

    stmtlist                       shift and go to state 67
    eps                            shift and go to state 68

state 40

    (6) vardec -> idlist COLON type SEMICOLON .

    MAIN            reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)
    FUNCTION        reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)
    ID              reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)
    RCB             reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)
    IF              reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)
    FOR             reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)
    WHILE           reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)
    RETURN          reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)
    ON              reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)
    PRINT           reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)
    LRB             reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)
    SUB             reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)
    NOT             reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)
    LCB             reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)
    INTEGERNUMBER   reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)
    FLOATNUMBER     reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)
    TRUE            reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)
    FALSE           reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)
    WHERE           reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)
    ELSE            reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)
    ELSEIF          reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)


state 41

    (20) paramdec -> ID . COLON type
    (21) paramdec -> ID . LSB RSB COLON type

    COLON           shift and go to state 69
    LSB             shift and go to state 70


state 42

    (7) funcdec -> FUNCTION ID LRB paramdecs . RRB COLON type block
    (8) funcdec -> FUNCTION ID LRB paramdecs . RRB block

    RRB             shift and go to state 71


state 43

    (16) paramdecs -> paramdecslist .
    (19) paramdecslist -> paramdecslist . COMMA paramdec

    RRB             reduce using rule 16 (paramdecs -> paramdecslist .)
    COMMA           shift and go to state 72


state 44

    (17) paramdecs -> eps .

    RRB             reduce using rule 17 (paramdecs -> eps .)


state 45

    (18) paramdecslist -> paramdec .

    COMMA           reduce using rule 18 (paramdecslist -> paramdec .)
    RRB             reduce using rule 18 (paramdecslist -> paramdec .)


state 46

    (62) exp -> ID LRB . explist RRB
    (77) explist -> . exp
    (78) explist -> . explist COMMA exp
    (79) explist -> . eps
    (57) exp -> . lvalue ASSIGN exp
    (58) exp -> . exp operator exp
    (59) exp -> . exp relop exp
    (60) exp -> . const
    (61) exp -> . lvalue
    (62) exp -> . ID LRB explist RRB
    (63) exp -> . LRB exp RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (80) eps -> .
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (73) const -> . INTEGERNUMBER
    (74) const -> . FLOATNUMBER
    (75) const -> . TRUE
    (76) const -> . FALSE

    ID              shift and go to state 26
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    RRB             reduce using rule 80 (eps -> .)
    COMMA           reduce using rule 80 (eps -> .)
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    explist                        shift and go to state 73
    exp                            shift and go to state 74
    eps                            shift and go to state 75
    lvalue                         shift and go to state 28
    const                          shift and go to state 29

state 47

    (58) exp -> exp operator . exp
    (57) exp -> . lvalue ASSIGN exp
    (58) exp -> . exp operator exp
    (59) exp -> . exp relop exp
    (60) exp -> . const
    (61) exp -> . lvalue
    (62) exp -> . ID LRB explist RRB
    (63) exp -> . LRB exp RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (73) const -> . INTEGERNUMBER
    (74) const -> . FLOATNUMBER
    (75) const -> . TRUE
    (76) const -> . FALSE

    ID              shift and go to state 26
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 76
    lvalue                         shift and go to state 28
    const                          shift and go to state 29

state 48

    (59) exp -> exp relop . exp
    (57) exp -> . lvalue ASSIGN exp
    (58) exp -> . exp operator exp
    (59) exp -> . exp relop exp
    (60) exp -> . const
    (61) exp -> . lvalue
    (62) exp -> . ID LRB explist RRB
    (63) exp -> . LRB exp RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (73) const -> . INTEGERNUMBER
    (74) const -> . FLOATNUMBER
    (75) const -> . TRUE
    (76) const -> . FALSE

    ID              shift and go to state 26
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 77
    lvalue                         shift and go to state 28
    const                          shift and go to state 29

state 49

    (66) operator -> AND .

    ID              reduce using rule 66 (operator -> AND .)
    LRB             reduce using rule 66 (operator -> AND .)
    SUB             reduce using rule 66 (operator -> AND .)
    NOT             reduce using rule 66 (operator -> AND .)
    INTEGERNUMBER   reduce using rule 66 (operator -> AND .)
    FLOATNUMBER     reduce using rule 66 (operator -> AND .)
    TRUE            reduce using rule 66 (operator -> AND .)
    FALSE           reduce using rule 66 (operator -> AND .)


state 50

    (67) operator -> OR .

    ID              reduce using rule 67 (operator -> OR .)
    LRB             reduce using rule 67 (operator -> OR .)
    SUB             reduce using rule 67 (operator -> OR .)
    NOT             reduce using rule 67 (operator -> OR .)
    INTEGERNUMBER   reduce using rule 67 (operator -> OR .)
    FLOATNUMBER     reduce using rule 67 (operator -> OR .)
    TRUE            reduce using rule 67 (operator -> OR .)
    FALSE           reduce using rule 67 (operator -> OR .)


state 51

    (68) operator -> SUM .

    ID              reduce using rule 68 (operator -> SUM .)
    LRB             reduce using rule 68 (operator -> SUM .)
    SUB             reduce using rule 68 (operator -> SUM .)
    NOT             reduce using rule 68 (operator -> SUM .)
    INTEGERNUMBER   reduce using rule 68 (operator -> SUM .)
    FLOATNUMBER     reduce using rule 68 (operator -> SUM .)
    TRUE            reduce using rule 68 (operator -> SUM .)
    FALSE           reduce using rule 68 (operator -> SUM .)


state 52

    (69) operator -> SUB .

    ID              reduce using rule 69 (operator -> SUB .)
    LRB             reduce using rule 69 (operator -> SUB .)
    SUB             reduce using rule 69 (operator -> SUB .)
    NOT             reduce using rule 69 (operator -> SUB .)
    INTEGERNUMBER   reduce using rule 69 (operator -> SUB .)
    FLOATNUMBER     reduce using rule 69 (operator -> SUB .)
    TRUE            reduce using rule 69 (operator -> SUB .)
    FALSE           reduce using rule 69 (operator -> SUB .)


state 53

    (70) operator -> MUL .

    ID              reduce using rule 70 (operator -> MUL .)
    LRB             reduce using rule 70 (operator -> MUL .)
    SUB             reduce using rule 70 (operator -> MUL .)
    NOT             reduce using rule 70 (operator -> MUL .)
    INTEGERNUMBER   reduce using rule 70 (operator -> MUL .)
    FLOATNUMBER     reduce using rule 70 (operator -> MUL .)
    TRUE            reduce using rule 70 (operator -> MUL .)
    FALSE           reduce using rule 70 (operator -> MUL .)


state 54

    (71) operator -> DIV .

    ID              reduce using rule 71 (operator -> DIV .)
    LRB             reduce using rule 71 (operator -> DIV .)
    SUB             reduce using rule 71 (operator -> DIV .)
    NOT             reduce using rule 71 (operator -> DIV .)
    INTEGERNUMBER   reduce using rule 71 (operator -> DIV .)
    FLOATNUMBER     reduce using rule 71 (operator -> DIV .)
    TRUE            reduce using rule 71 (operator -> DIV .)
    FALSE           reduce using rule 71 (operator -> DIV .)


state 55

    (72) operator -> MOD .

    ID              reduce using rule 72 (operator -> MOD .)
    LRB             reduce using rule 72 (operator -> MOD .)
    SUB             reduce using rule 72 (operator -> MOD .)
    NOT             reduce using rule 72 (operator -> MOD .)
    INTEGERNUMBER   reduce using rule 72 (operator -> MOD .)
    FLOATNUMBER     reduce using rule 72 (operator -> MOD .)
    TRUE            reduce using rule 72 (operator -> MOD .)
    FALSE           reduce using rule 72 (operator -> MOD .)


state 56

    (51) relop -> GT .

    ID              reduce using rule 51 (relop -> GT .)
    LRB             reduce using rule 51 (relop -> GT .)
    SUB             reduce using rule 51 (relop -> GT .)
    NOT             reduce using rule 51 (relop -> GT .)
    INTEGERNUMBER   reduce using rule 51 (relop -> GT .)
    FLOATNUMBER     reduce using rule 51 (relop -> GT .)
    TRUE            reduce using rule 51 (relop -> GT .)
    FALSE           reduce using rule 51 (relop -> GT .)


state 57

    (52) relop -> GE .

    ID              reduce using rule 52 (relop -> GE .)
    LRB             reduce using rule 52 (relop -> GE .)
    SUB             reduce using rule 52 (relop -> GE .)
    NOT             reduce using rule 52 (relop -> GE .)
    INTEGERNUMBER   reduce using rule 52 (relop -> GE .)
    FLOATNUMBER     reduce using rule 52 (relop -> GE .)
    TRUE            reduce using rule 52 (relop -> GE .)
    FALSE           reduce using rule 52 (relop -> GE .)


state 58

    (53) relop -> LT .

    ID              reduce using rule 53 (relop -> LT .)
    LRB             reduce using rule 53 (relop -> LT .)
    SUB             reduce using rule 53 (relop -> LT .)
    NOT             reduce using rule 53 (relop -> LT .)
    INTEGERNUMBER   reduce using rule 53 (relop -> LT .)
    FLOATNUMBER     reduce using rule 53 (relop -> LT .)
    TRUE            reduce using rule 53 (relop -> LT .)
    FALSE           reduce using rule 53 (relop -> LT .)


state 59

    (54) relop -> LE .

    ID              reduce using rule 54 (relop -> LE .)
    LRB             reduce using rule 54 (relop -> LE .)
    SUB             reduce using rule 54 (relop -> LE .)
    NOT             reduce using rule 54 (relop -> LE .)
    INTEGERNUMBER   reduce using rule 54 (relop -> LE .)
    FLOATNUMBER     reduce using rule 54 (relop -> LE .)
    TRUE            reduce using rule 54 (relop -> LE .)
    FALSE           reduce using rule 54 (relop -> LE .)


state 60

    (55) relop -> EQ .

    ID              reduce using rule 55 (relop -> EQ .)
    LRB             reduce using rule 55 (relop -> EQ .)
    SUB             reduce using rule 55 (relop -> EQ .)
    NOT             reduce using rule 55 (relop -> EQ .)
    INTEGERNUMBER   reduce using rule 55 (relop -> EQ .)
    FLOATNUMBER     reduce using rule 55 (relop -> EQ .)
    TRUE            reduce using rule 55 (relop -> EQ .)
    FALSE           reduce using rule 55 (relop -> EQ .)


state 61

    (56) relop -> NE .

    ID              reduce using rule 56 (relop -> NE .)
    LRB             reduce using rule 56 (relop -> NE .)
    SUB             reduce using rule 56 (relop -> NE .)
    NOT             reduce using rule 56 (relop -> NE .)
    INTEGERNUMBER   reduce using rule 56 (relop -> NE .)
    FLOATNUMBER     reduce using rule 56 (relop -> NE .)
    TRUE            reduce using rule 56 (relop -> NE .)
    FALSE           reduce using rule 56 (relop -> NE .)


state 62

    (57) exp -> lvalue ASSIGN . exp
    (57) exp -> . lvalue ASSIGN exp
    (58) exp -> . exp operator exp
    (59) exp -> . exp relop exp
    (60) exp -> . const
    (61) exp -> . lvalue
    (62) exp -> . ID LRB explist RRB
    (63) exp -> . LRB exp RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (73) const -> . INTEGERNUMBER
    (74) const -> . FLOATNUMBER
    (75) const -> . TRUE
    (76) const -> . FALSE

    ID              shift and go to state 26
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    lvalue                         shift and go to state 28
    exp                            shift and go to state 78
    const                          shift and go to state 29

state 63

    (63) exp -> LRB exp . RRB
    (58) exp -> exp . operator exp
    (59) exp -> exp . relop exp
    (66) operator -> . AND
    (67) operator -> . OR
    (68) operator -> . SUM
    (69) operator -> . SUB
    (70) operator -> . MUL
    (71) operator -> . DIV
    (72) operator -> . MOD
    (51) relop -> . GT
    (52) relop -> . GE
    (53) relop -> . LT
    (54) relop -> . LE
    (55) relop -> . EQ
    (56) relop -> . NE

    RRB             shift and go to state 79
    AND             shift and go to state 49
    OR              shift and go to state 50
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 64

    (64) exp -> SUB exp .
    (58) exp -> exp . operator exp
    (59) exp -> exp . relop exp
    (66) operator -> . AND
    (67) operator -> . OR
    (68) operator -> . SUM
    (69) operator -> . SUB
    (70) operator -> . MUL
    (71) operator -> . DIV
    (72) operator -> . MOD
    (51) relop -> . GT
    (52) relop -> . GE
    (53) relop -> . LT
    (54) relop -> . LE
    (55) relop -> . EQ
    (56) relop -> . NE

    AND             reduce using rule 64 (exp -> SUB exp .)
    OR              reduce using rule 64 (exp -> SUB exp .)
    SUM             reduce using rule 64 (exp -> SUB exp .)
    SUB             reduce using rule 64 (exp -> SUB exp .)
    GT              reduce using rule 64 (exp -> SUB exp .)
    GE              reduce using rule 64 (exp -> SUB exp .)
    LT              reduce using rule 64 (exp -> SUB exp .)
    LE              reduce using rule 64 (exp -> SUB exp .)
    EQ              reduce using rule 64 (exp -> SUB exp .)
    NE              reduce using rule 64 (exp -> SUB exp .)
    COLON           reduce using rule 64 (exp -> SUB exp .)
    COMMA           reduce using rule 64 (exp -> SUB exp .)
    RSB             reduce using rule 64 (exp -> SUB exp .)
    RRB             reduce using rule 64 (exp -> SUB exp .)
    SEMICOLON       reduce using rule 64 (exp -> SUB exp .)
    LRB             reduce using rule 64 (exp -> SUB exp .)
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55

  ! MUL             [ reduce using rule 64 (exp -> SUB exp .) ]
  ! DIV             [ reduce using rule 64 (exp -> SUB exp .) ]
  ! MOD             [ reduce using rule 64 (exp -> SUB exp .) ]
  ! AND             [ shift and go to state 49 ]
  ! OR              [ shift and go to state 50 ]
  ! SUM             [ shift and go to state 51 ]
  ! SUB             [ shift and go to state 52 ]
  ! GT              [ shift and go to state 56 ]
  ! GE              [ shift and go to state 57 ]
  ! LT              [ shift and go to state 58 ]
  ! LE              [ shift and go to state 59 ]
  ! EQ              [ shift and go to state 60 ]
  ! NE              [ shift and go to state 61 ]

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 65

    (65) exp -> NOT exp .
    (58) exp -> exp . operator exp
    (59) exp -> exp . relop exp
    (66) operator -> . AND
    (67) operator -> . OR
    (68) operator -> . SUM
    (69) operator -> . SUB
    (70) operator -> . MUL
    (71) operator -> . DIV
    (72) operator -> . MOD
    (51) relop -> . GT
    (52) relop -> . GE
    (53) relop -> . LT
    (54) relop -> . LE
    (55) relop -> . EQ
    (56) relop -> . NE

    AND             reduce using rule 65 (exp -> NOT exp .)
    OR              reduce using rule 65 (exp -> NOT exp .)
    COLON           reduce using rule 65 (exp -> NOT exp .)
    COMMA           reduce using rule 65 (exp -> NOT exp .)
    RSB             reduce using rule 65 (exp -> NOT exp .)
    RRB             reduce using rule 65 (exp -> NOT exp .)
    SEMICOLON       reduce using rule 65 (exp -> NOT exp .)
    LRB             reduce using rule 65 (exp -> NOT exp .)
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

  ! SUM             [ reduce using rule 65 (exp -> NOT exp .) ]
  ! SUB             [ reduce using rule 65 (exp -> NOT exp .) ]
  ! MUL             [ reduce using rule 65 (exp -> NOT exp .) ]
  ! DIV             [ reduce using rule 65 (exp -> NOT exp .) ]
  ! MOD             [ reduce using rule 65 (exp -> NOT exp .) ]
  ! GT              [ reduce using rule 65 (exp -> NOT exp .) ]
  ! GE              [ reduce using rule 65 (exp -> NOT exp .) ]
  ! LT              [ reduce using rule 65 (exp -> NOT exp .) ]
  ! LE              [ reduce using rule 65 (exp -> NOT exp .) ]
  ! EQ              [ reduce using rule 65 (exp -> NOT exp .) ]
  ! NE              [ reduce using rule 65 (exp -> NOT exp .) ]
  ! AND             [ shift and go to state 49 ]
  ! OR              [ shift and go to state 50 ]

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 66

    (26) lvalue -> ID LSB exp RSB .

    COLON           reduce using rule 26 (lvalue -> ID LSB exp RSB .)
    COMMA           reduce using rule 26 (lvalue -> ID LSB exp RSB .)
    ASSIGN          reduce using rule 26 (lvalue -> ID LSB exp RSB .)
    AND             reduce using rule 26 (lvalue -> ID LSB exp RSB .)
    OR              reduce using rule 26 (lvalue -> ID LSB exp RSB .)
    SUM             reduce using rule 26 (lvalue -> ID LSB exp RSB .)
    SUB             reduce using rule 26 (lvalue -> ID LSB exp RSB .)
    MUL             reduce using rule 26 (lvalue -> ID LSB exp RSB .)
    DIV             reduce using rule 26 (lvalue -> ID LSB exp RSB .)
    MOD             reduce using rule 26 (lvalue -> ID LSB exp RSB .)
    GT              reduce using rule 26 (lvalue -> ID LSB exp RSB .)
    GE              reduce using rule 26 (lvalue -> ID LSB exp RSB .)
    LT              reduce using rule 26 (lvalue -> ID LSB exp RSB .)
    LE              reduce using rule 26 (lvalue -> ID LSB exp RSB .)
    EQ              reduce using rule 26 (lvalue -> ID LSB exp RSB .)
    NE              reduce using rule 26 (lvalue -> ID LSB exp RSB .)
    RSB             reduce using rule 26 (lvalue -> ID LSB exp RSB .)
    RRB             reduce using rule 26 (lvalue -> ID LSB exp RSB .)
    SEMICOLON       reduce using rule 26 (lvalue -> ID LSB exp RSB .)
    LRB             reduce using rule 26 (lvalue -> ID LSB exp RSB .)


state 67

    (22) block -> LCB stmtlist . RCB
    (23) stmtlist -> stmtlist . stmt
    (30) stmt -> . ostmt
    (31) stmt -> . cstmt
    (32) ostmt -> . IF LRB exp RRB simple
    (33) ostmt -> . IF LRB exp RRB ostmt
    (34) ostmt -> . IF LRB exp RRB cstmt elseiflist ELSE ostmt
    (35) ostmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt
    (36) ostmt -> . FOR LRB ID IN RRB ostmt
    (37) ostmt -> . WHILE LRB exp LRB ostmt
    (38) cstmt -> . simple
    (39) cstmt -> . IF LRB exp RRB cstmt elseiflist ELSE cstmt
    (40) cstmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt
    (41) cstmt -> . FOR LRB ID IN RRB cstmt
    (42) cstmt -> . WHILE LRB exp LRB cstmt
    (45) simple -> . RETURN exp SEMICOLON
    (46) simple -> . exp SEMICOLON
    (47) simple -> . block
    (48) simple -> . vardec
    (49) simple -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (50) simple -> . PRINT LRB ID RRB SEMICOLON
    (57) exp -> . lvalue ASSIGN exp
    (58) exp -> . exp operator exp
    (59) exp -> . exp relop exp
    (60) exp -> . const
    (61) exp -> . lvalue
    (62) exp -> . ID LRB explist RRB
    (63) exp -> . LRB exp RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (22) block -> . LCB stmtlist RCB
    (6) vardec -> . idlist COLON type SEMICOLON
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (73) const -> . INTEGERNUMBER
    (74) const -> . FLOATNUMBER
    (75) const -> . TRUE
    (76) const -> . FALSE
    (14) idlist -> . iddec
    (15) idlist -> . idlist COMMA iddec
    (12) iddec -> . lvalue
    (13) iddec -> . ID ASSIGN exp

    RCB             shift and go to state 80
    IF              shift and go to state 84
    FOR             shift and go to state 87
    WHILE           shift and go to state 89
    RETURN          shift and go to state 90
    ON              shift and go to state 93
    PRINT           shift and go to state 94
    ID              shift and go to state 88
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    LCB             shift and go to state 39
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    stmt                           shift and go to state 81
    ostmt                          shift and go to state 82
    cstmt                          shift and go to state 83
    exp                            shift and go to state 85
    simple                         shift and go to state 86
    block                          shift and go to state 91
    vardec                         shift and go to state 92
    lvalue                         shift and go to state 95
    const                          shift and go to state 29
    idlist                         shift and go to state 8
    iddec                          shift and go to state 11

state 68

    (24) stmtlist -> eps .

    RCB             reduce using rule 24 (stmtlist -> eps .)
    IF              reduce using rule 24 (stmtlist -> eps .)
    FOR             reduce using rule 24 (stmtlist -> eps .)
    WHILE           reduce using rule 24 (stmtlist -> eps .)
    RETURN          reduce using rule 24 (stmtlist -> eps .)
    ON              reduce using rule 24 (stmtlist -> eps .)
    PRINT           reduce using rule 24 (stmtlist -> eps .)
    ID              reduce using rule 24 (stmtlist -> eps .)
    LRB             reduce using rule 24 (stmtlist -> eps .)
    SUB             reduce using rule 24 (stmtlist -> eps .)
    NOT             reduce using rule 24 (stmtlist -> eps .)
    LCB             reduce using rule 24 (stmtlist -> eps .)
    INTEGERNUMBER   reduce using rule 24 (stmtlist -> eps .)
    FLOATNUMBER     reduce using rule 24 (stmtlist -> eps .)
    TRUE            reduce using rule 24 (stmtlist -> eps .)
    FALSE           reduce using rule 24 (stmtlist -> eps .)
    WHERE           reduce using rule 24 (stmtlist -> eps .)


state 69

    (20) paramdec -> ID COLON . type
    (9) type -> . INTEGER
    (10) type -> . FLOAT
    (11) type -> . BOOLEAN

    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22
    BOOLEAN         shift and go to state 23

    type                           shift and go to state 96

state 70

    (21) paramdec -> ID LSB . RSB COLON type

    RSB             shift and go to state 97


state 71

    (7) funcdec -> FUNCTION ID LRB paramdecs RRB . COLON type block
    (8) funcdec -> FUNCTION ID LRB paramdecs RRB . block
    (22) block -> . LCB stmtlist RCB

    COLON           shift and go to state 98
    LCB             shift and go to state 39

    block                          shift and go to state 99

state 72

    (19) paramdecslist -> paramdecslist COMMA . paramdec
    (20) paramdec -> . ID COLON type
    (21) paramdec -> . ID LSB RSB COLON type

    ID              shift and go to state 41

    paramdec                       shift and go to state 100

state 73

    (62) exp -> ID LRB explist . RRB
    (78) explist -> explist . COMMA exp

    RRB             shift and go to state 101
    COMMA           shift and go to state 102


state 74

    (77) explist -> exp .
    (58) exp -> exp . operator exp
    (59) exp -> exp . relop exp
    (66) operator -> . AND
    (67) operator -> . OR
    (68) operator -> . SUM
    (69) operator -> . SUB
    (70) operator -> . MUL
    (71) operator -> . DIV
    (72) operator -> . MOD
    (51) relop -> . GT
    (52) relop -> . GE
    (53) relop -> . LT
    (54) relop -> . LE
    (55) relop -> . EQ
    (56) relop -> . NE

    RRB             reduce using rule 77 (explist -> exp .)
    COMMA           reduce using rule 77 (explist -> exp .)
    AND             shift and go to state 49
    OR              shift and go to state 50
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 75

    (79) explist -> eps .

    RRB             reduce using rule 79 (explist -> eps .)
    COMMA           reduce using rule 79 (explist -> eps .)


state 76

    (58) exp -> exp operator exp .
    (58) exp -> exp . operator exp
    (59) exp -> exp . relop exp
    (66) operator -> . AND
    (67) operator -> . OR
    (68) operator -> . SUM
    (69) operator -> . SUB
    (70) operator -> . MUL
    (71) operator -> . DIV
    (72) operator -> . MOD
    (51) relop -> . GT
    (52) relop -> . GE
    (53) relop -> . LT
    (54) relop -> . LE
    (55) relop -> . EQ
    (56) relop -> . NE

    AND             reduce using rule 58 (exp -> exp operator exp .)
    OR              reduce using rule 58 (exp -> exp operator exp .)
    COLON           reduce using rule 58 (exp -> exp operator exp .)
    COMMA           reduce using rule 58 (exp -> exp operator exp .)
    RSB             reduce using rule 58 (exp -> exp operator exp .)
    RRB             reduce using rule 58 (exp -> exp operator exp .)
    SEMICOLON       reduce using rule 58 (exp -> exp operator exp .)
    LRB             reduce using rule 58 (exp -> exp operator exp .)
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

  ! SUM             [ reduce using rule 58 (exp -> exp operator exp .) ]
  ! SUB             [ reduce using rule 58 (exp -> exp operator exp .) ]
  ! MUL             [ reduce using rule 58 (exp -> exp operator exp .) ]
  ! DIV             [ reduce using rule 58 (exp -> exp operator exp .) ]
  ! MOD             [ reduce using rule 58 (exp -> exp operator exp .) ]
  ! GT              [ reduce using rule 58 (exp -> exp operator exp .) ]
  ! GE              [ reduce using rule 58 (exp -> exp operator exp .) ]
  ! LT              [ reduce using rule 58 (exp -> exp operator exp .) ]
  ! LE              [ reduce using rule 58 (exp -> exp operator exp .) ]
  ! EQ              [ reduce using rule 58 (exp -> exp operator exp .) ]
  ! NE              [ reduce using rule 58 (exp -> exp operator exp .) ]
  ! AND             [ shift and go to state 49 ]
  ! OR              [ shift and go to state 50 ]

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 77

    (59) exp -> exp relop exp .
    (58) exp -> exp . operator exp
    (59) exp -> exp . relop exp
    (66) operator -> . AND
    (67) operator -> . OR
    (68) operator -> . SUM
    (69) operator -> . SUB
    (70) operator -> . MUL
    (71) operator -> . DIV
    (72) operator -> . MOD
    (51) relop -> . GT
    (52) relop -> . GE
    (53) relop -> . LT
    (54) relop -> . LE
    (55) relop -> . EQ
    (56) relop -> . NE

    AND             reduce using rule 59 (exp -> exp relop exp .)
    OR              reduce using rule 59 (exp -> exp relop exp .)
    GT              reduce using rule 59 (exp -> exp relop exp .)
    GE              reduce using rule 59 (exp -> exp relop exp .)
    LT              reduce using rule 59 (exp -> exp relop exp .)
    LE              reduce using rule 59 (exp -> exp relop exp .)
    EQ              reduce using rule 59 (exp -> exp relop exp .)
    NE              reduce using rule 59 (exp -> exp relop exp .)
    COLON           reduce using rule 59 (exp -> exp relop exp .)
    COMMA           reduce using rule 59 (exp -> exp relop exp .)
    RSB             reduce using rule 59 (exp -> exp relop exp .)
    RRB             reduce using rule 59 (exp -> exp relop exp .)
    SEMICOLON       reduce using rule 59 (exp -> exp relop exp .)
    LRB             reduce using rule 59 (exp -> exp relop exp .)
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55

  ! SUM             [ reduce using rule 59 (exp -> exp relop exp .) ]
  ! SUB             [ reduce using rule 59 (exp -> exp relop exp .) ]
  ! MUL             [ reduce using rule 59 (exp -> exp relop exp .) ]
  ! DIV             [ reduce using rule 59 (exp -> exp relop exp .) ]
  ! MOD             [ reduce using rule 59 (exp -> exp relop exp .) ]
  ! AND             [ shift and go to state 49 ]
  ! OR              [ shift and go to state 50 ]
  ! GT              [ shift and go to state 56 ]
  ! GE              [ shift and go to state 57 ]
  ! LT              [ shift and go to state 58 ]
  ! LE              [ shift and go to state 59 ]
  ! EQ              [ shift and go to state 60 ]
  ! NE              [ shift and go to state 61 ]

    relop                          shift and go to state 48
    operator                       shift and go to state 47

state 78

    (57) exp -> lvalue ASSIGN exp .
    (58) exp -> exp . operator exp
    (59) exp -> exp . relop exp
    (66) operator -> . AND
    (67) operator -> . OR
    (68) operator -> . SUM
    (69) operator -> . SUB
    (70) operator -> . MUL
    (71) operator -> . DIV
    (72) operator -> . MOD
    (51) relop -> . GT
    (52) relop -> . GE
    (53) relop -> . LT
    (54) relop -> . LE
    (55) relop -> . EQ
    (56) relop -> . NE

    AND             reduce using rule 57 (exp -> lvalue ASSIGN exp .)
    OR              reduce using rule 57 (exp -> lvalue ASSIGN exp .)
    GT              reduce using rule 57 (exp -> lvalue ASSIGN exp .)
    GE              reduce using rule 57 (exp -> lvalue ASSIGN exp .)
    LT              reduce using rule 57 (exp -> lvalue ASSIGN exp .)
    LE              reduce using rule 57 (exp -> lvalue ASSIGN exp .)
    EQ              reduce using rule 57 (exp -> lvalue ASSIGN exp .)
    NE              reduce using rule 57 (exp -> lvalue ASSIGN exp .)
    COLON           reduce using rule 57 (exp -> lvalue ASSIGN exp .)
    COMMA           reduce using rule 57 (exp -> lvalue ASSIGN exp .)
    RSB             reduce using rule 57 (exp -> lvalue ASSIGN exp .)
    RRB             reduce using rule 57 (exp -> lvalue ASSIGN exp .)
    SEMICOLON       reduce using rule 57 (exp -> lvalue ASSIGN exp .)
    LRB             reduce using rule 57 (exp -> lvalue ASSIGN exp .)
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55

  ! SUM             [ reduce using rule 57 (exp -> lvalue ASSIGN exp .) ]
  ! SUB             [ reduce using rule 57 (exp -> lvalue ASSIGN exp .) ]
  ! MUL             [ reduce using rule 57 (exp -> lvalue ASSIGN exp .) ]
  ! DIV             [ reduce using rule 57 (exp -> lvalue ASSIGN exp .) ]
  ! MOD             [ reduce using rule 57 (exp -> lvalue ASSIGN exp .) ]
  ! AND             [ shift and go to state 49 ]
  ! OR              [ shift and go to state 50 ]
  ! GT              [ shift and go to state 56 ]
  ! GE              [ shift and go to state 57 ]
  ! LT              [ shift and go to state 58 ]
  ! LE              [ shift and go to state 59 ]
  ! EQ              [ shift and go to state 60 ]
  ! NE              [ shift and go to state 61 ]

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 79

    (63) exp -> LRB exp RRB .

    AND             reduce using rule 63 (exp -> LRB exp RRB .)
    OR              reduce using rule 63 (exp -> LRB exp RRB .)
    SUM             reduce using rule 63 (exp -> LRB exp RRB .)
    SUB             reduce using rule 63 (exp -> LRB exp RRB .)
    MUL             reduce using rule 63 (exp -> LRB exp RRB .)
    DIV             reduce using rule 63 (exp -> LRB exp RRB .)
    MOD             reduce using rule 63 (exp -> LRB exp RRB .)
    GT              reduce using rule 63 (exp -> LRB exp RRB .)
    GE              reduce using rule 63 (exp -> LRB exp RRB .)
    LT              reduce using rule 63 (exp -> LRB exp RRB .)
    LE              reduce using rule 63 (exp -> LRB exp RRB .)
    EQ              reduce using rule 63 (exp -> LRB exp RRB .)
    NE              reduce using rule 63 (exp -> LRB exp RRB .)
    COLON           reduce using rule 63 (exp -> LRB exp RRB .)
    COMMA           reduce using rule 63 (exp -> LRB exp RRB .)
    RSB             reduce using rule 63 (exp -> LRB exp RRB .)
    RRB             reduce using rule 63 (exp -> LRB exp RRB .)
    SEMICOLON       reduce using rule 63 (exp -> LRB exp RRB .)
    LRB             reduce using rule 63 (exp -> LRB exp RRB .)


state 80

    (22) block -> LCB stmtlist RCB .

    $end            reduce using rule 22 (block -> LCB stmtlist RCB .)
    RCB             reduce using rule 22 (block -> LCB stmtlist RCB .)
    IF              reduce using rule 22 (block -> LCB stmtlist RCB .)
    FOR             reduce using rule 22 (block -> LCB stmtlist RCB .)
    WHILE           reduce using rule 22 (block -> LCB stmtlist RCB .)
    RETURN          reduce using rule 22 (block -> LCB stmtlist RCB .)
    ON              reduce using rule 22 (block -> LCB stmtlist RCB .)
    PRINT           reduce using rule 22 (block -> LCB stmtlist RCB .)
    ID              reduce using rule 22 (block -> LCB stmtlist RCB .)
    LRB             reduce using rule 22 (block -> LCB stmtlist RCB .)
    SUB             reduce using rule 22 (block -> LCB stmtlist RCB .)
    NOT             reduce using rule 22 (block -> LCB stmtlist RCB .)
    LCB             reduce using rule 22 (block -> LCB stmtlist RCB .)
    INTEGERNUMBER   reduce using rule 22 (block -> LCB stmtlist RCB .)
    FLOATNUMBER     reduce using rule 22 (block -> LCB stmtlist RCB .)
    TRUE            reduce using rule 22 (block -> LCB stmtlist RCB .)
    FALSE           reduce using rule 22 (block -> LCB stmtlist RCB .)
    MAIN            reduce using rule 22 (block -> LCB stmtlist RCB .)
    FUNCTION        reduce using rule 22 (block -> LCB stmtlist RCB .)
    WHERE           reduce using rule 22 (block -> LCB stmtlist RCB .)
    ELSE            reduce using rule 22 (block -> LCB stmtlist RCB .)
    ELSEIF          reduce using rule 22 (block -> LCB stmtlist RCB .)


state 81

    (23) stmtlist -> stmtlist stmt .

    RCB             reduce using rule 23 (stmtlist -> stmtlist stmt .)
    IF              reduce using rule 23 (stmtlist -> stmtlist stmt .)
    FOR             reduce using rule 23 (stmtlist -> stmtlist stmt .)
    WHILE           reduce using rule 23 (stmtlist -> stmtlist stmt .)
    RETURN          reduce using rule 23 (stmtlist -> stmtlist stmt .)
    ON              reduce using rule 23 (stmtlist -> stmtlist stmt .)
    PRINT           reduce using rule 23 (stmtlist -> stmtlist stmt .)
    ID              reduce using rule 23 (stmtlist -> stmtlist stmt .)
    LRB             reduce using rule 23 (stmtlist -> stmtlist stmt .)
    SUB             reduce using rule 23 (stmtlist -> stmtlist stmt .)
    NOT             reduce using rule 23 (stmtlist -> stmtlist stmt .)
    LCB             reduce using rule 23 (stmtlist -> stmtlist stmt .)
    INTEGERNUMBER   reduce using rule 23 (stmtlist -> stmtlist stmt .)
    FLOATNUMBER     reduce using rule 23 (stmtlist -> stmtlist stmt .)
    TRUE            reduce using rule 23 (stmtlist -> stmtlist stmt .)
    FALSE           reduce using rule 23 (stmtlist -> stmtlist stmt .)
    WHERE           reduce using rule 23 (stmtlist -> stmtlist stmt .)


state 82

    (30) stmt -> ostmt .

    RCB             reduce using rule 30 (stmt -> ostmt .)
    IF              reduce using rule 30 (stmt -> ostmt .)
    FOR             reduce using rule 30 (stmt -> ostmt .)
    WHILE           reduce using rule 30 (stmt -> ostmt .)
    RETURN          reduce using rule 30 (stmt -> ostmt .)
    ON              reduce using rule 30 (stmt -> ostmt .)
    PRINT           reduce using rule 30 (stmt -> ostmt .)
    ID              reduce using rule 30 (stmt -> ostmt .)
    LRB             reduce using rule 30 (stmt -> ostmt .)
    SUB             reduce using rule 30 (stmt -> ostmt .)
    NOT             reduce using rule 30 (stmt -> ostmt .)
    LCB             reduce using rule 30 (stmt -> ostmt .)
    INTEGERNUMBER   reduce using rule 30 (stmt -> ostmt .)
    FLOATNUMBER     reduce using rule 30 (stmt -> ostmt .)
    TRUE            reduce using rule 30 (stmt -> ostmt .)
    FALSE           reduce using rule 30 (stmt -> ostmt .)
    WHERE           reduce using rule 30 (stmt -> ostmt .)


state 83

    (31) stmt -> cstmt .

    RCB             reduce using rule 31 (stmt -> cstmt .)
    IF              reduce using rule 31 (stmt -> cstmt .)
    FOR             reduce using rule 31 (stmt -> cstmt .)
    WHILE           reduce using rule 31 (stmt -> cstmt .)
    RETURN          reduce using rule 31 (stmt -> cstmt .)
    ON              reduce using rule 31 (stmt -> cstmt .)
    PRINT           reduce using rule 31 (stmt -> cstmt .)
    ID              reduce using rule 31 (stmt -> cstmt .)
    LRB             reduce using rule 31 (stmt -> cstmt .)
    SUB             reduce using rule 31 (stmt -> cstmt .)
    NOT             reduce using rule 31 (stmt -> cstmt .)
    LCB             reduce using rule 31 (stmt -> cstmt .)
    INTEGERNUMBER   reduce using rule 31 (stmt -> cstmt .)
    FLOATNUMBER     reduce using rule 31 (stmt -> cstmt .)
    TRUE            reduce using rule 31 (stmt -> cstmt .)
    FALSE           reduce using rule 31 (stmt -> cstmt .)
    WHERE           reduce using rule 31 (stmt -> cstmt .)


state 84

    (32) ostmt -> IF . LRB exp RRB simple
    (33) ostmt -> IF . LRB exp RRB ostmt
    (34) ostmt -> IF . LRB exp RRB cstmt elseiflist ELSE ostmt
    (39) cstmt -> IF . LRB exp RRB cstmt elseiflist ELSE cstmt

    LRB             shift and go to state 103


state 85

    (46) simple -> exp . SEMICOLON
    (58) exp -> exp . operator exp
    (59) exp -> exp . relop exp
    (66) operator -> . AND
    (67) operator -> . OR
    (68) operator -> . SUM
    (69) operator -> . SUB
    (70) operator -> . MUL
    (71) operator -> . DIV
    (72) operator -> . MOD
    (51) relop -> . GT
    (52) relop -> . GE
    (53) relop -> . LT
    (54) relop -> . LE
    (55) relop -> . EQ
    (56) relop -> . NE

    SEMICOLON       shift and go to state 104
    AND             shift and go to state 49
    OR              shift and go to state 50
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 86

    (38) cstmt -> simple .

    RCB             reduce using rule 38 (cstmt -> simple .)
    IF              reduce using rule 38 (cstmt -> simple .)
    FOR             reduce using rule 38 (cstmt -> simple .)
    WHILE           reduce using rule 38 (cstmt -> simple .)
    RETURN          reduce using rule 38 (cstmt -> simple .)
    ON              reduce using rule 38 (cstmt -> simple .)
    PRINT           reduce using rule 38 (cstmt -> simple .)
    ID              reduce using rule 38 (cstmt -> simple .)
    LRB             reduce using rule 38 (cstmt -> simple .)
    SUB             reduce using rule 38 (cstmt -> simple .)
    NOT             reduce using rule 38 (cstmt -> simple .)
    LCB             reduce using rule 38 (cstmt -> simple .)
    INTEGERNUMBER   reduce using rule 38 (cstmt -> simple .)
    FLOATNUMBER     reduce using rule 38 (cstmt -> simple .)
    TRUE            reduce using rule 38 (cstmt -> simple .)
    FALSE           reduce using rule 38 (cstmt -> simple .)
    ELSE            reduce using rule 38 (cstmt -> simple .)
    ELSEIF          reduce using rule 38 (cstmt -> simple .)
    WHERE           reduce using rule 38 (cstmt -> simple .)


state 87

    (35) ostmt -> FOR . LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt
    (36) ostmt -> FOR . LRB ID IN RRB ostmt
    (40) cstmt -> FOR . LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt
    (41) cstmt -> FOR . LRB ID IN RRB cstmt

    LRB             shift and go to state 105


state 88

    (62) exp -> ID . LRB explist RRB
    (25) lvalue -> ID .
    (26) lvalue -> ID . LSB exp RSB
    (13) iddec -> ID . ASSIGN exp

  ! shift/reduce conflict for ASSIGN resolved as shift
    LRB             shift and go to state 46
    SEMICOLON       reduce using rule 25 (lvalue -> ID .)
    AND             reduce using rule 25 (lvalue -> ID .)
    OR              reduce using rule 25 (lvalue -> ID .)
    SUM             reduce using rule 25 (lvalue -> ID .)
    SUB             reduce using rule 25 (lvalue -> ID .)
    MUL             reduce using rule 25 (lvalue -> ID .)
    DIV             reduce using rule 25 (lvalue -> ID .)
    MOD             reduce using rule 25 (lvalue -> ID .)
    GT              reduce using rule 25 (lvalue -> ID .)
    GE              reduce using rule 25 (lvalue -> ID .)
    LT              reduce using rule 25 (lvalue -> ID .)
    LE              reduce using rule 25 (lvalue -> ID .)
    EQ              reduce using rule 25 (lvalue -> ID .)
    NE              reduce using rule 25 (lvalue -> ID .)
    COLON           reduce using rule 25 (lvalue -> ID .)
    COMMA           reduce using rule 25 (lvalue -> ID .)
    LSB             shift and go to state 18
    ASSIGN          shift and go to state 17

  ! ASSIGN          [ reduce using rule 25 (lvalue -> ID .) ]


state 89

    (37) ostmt -> WHILE . LRB exp LRB ostmt
    (42) cstmt -> WHILE . LRB exp LRB cstmt

    LRB             shift and go to state 106


state 90

    (45) simple -> RETURN . exp SEMICOLON
    (57) exp -> . lvalue ASSIGN exp
    (58) exp -> . exp operator exp
    (59) exp -> . exp relop exp
    (60) exp -> . const
    (61) exp -> . lvalue
    (62) exp -> . ID LRB explist RRB
    (63) exp -> . LRB exp RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (73) const -> . INTEGERNUMBER
    (74) const -> . FLOATNUMBER
    (75) const -> . TRUE
    (76) const -> . FALSE

    ID              shift and go to state 26
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 107
    lvalue                         shift and go to state 28
    const                          shift and go to state 29

state 91

    (47) simple -> block .

    RCB             reduce using rule 47 (simple -> block .)
    IF              reduce using rule 47 (simple -> block .)
    FOR             reduce using rule 47 (simple -> block .)
    WHILE           reduce using rule 47 (simple -> block .)
    RETURN          reduce using rule 47 (simple -> block .)
    ON              reduce using rule 47 (simple -> block .)
    PRINT           reduce using rule 47 (simple -> block .)
    ID              reduce using rule 47 (simple -> block .)
    LRB             reduce using rule 47 (simple -> block .)
    SUB             reduce using rule 47 (simple -> block .)
    NOT             reduce using rule 47 (simple -> block .)
    LCB             reduce using rule 47 (simple -> block .)
    INTEGERNUMBER   reduce using rule 47 (simple -> block .)
    FLOATNUMBER     reduce using rule 47 (simple -> block .)
    TRUE            reduce using rule 47 (simple -> block .)
    FALSE           reduce using rule 47 (simple -> block .)
    WHERE           reduce using rule 47 (simple -> block .)
    ELSE            reduce using rule 47 (simple -> block .)
    ELSEIF          reduce using rule 47 (simple -> block .)


state 92

    (48) simple -> vardec .

    RCB             reduce using rule 48 (simple -> vardec .)
    IF              reduce using rule 48 (simple -> vardec .)
    FOR             reduce using rule 48 (simple -> vardec .)
    WHILE           reduce using rule 48 (simple -> vardec .)
    RETURN          reduce using rule 48 (simple -> vardec .)
    ON              reduce using rule 48 (simple -> vardec .)
    PRINT           reduce using rule 48 (simple -> vardec .)
    ID              reduce using rule 48 (simple -> vardec .)
    LRB             reduce using rule 48 (simple -> vardec .)
    SUB             reduce using rule 48 (simple -> vardec .)
    NOT             reduce using rule 48 (simple -> vardec .)
    LCB             reduce using rule 48 (simple -> vardec .)
    INTEGERNUMBER   reduce using rule 48 (simple -> vardec .)
    FLOATNUMBER     reduce using rule 48 (simple -> vardec .)
    TRUE            reduce using rule 48 (simple -> vardec .)
    FALSE           reduce using rule 48 (simple -> vardec .)
    WHERE           reduce using rule 48 (simple -> vardec .)
    ELSE            reduce using rule 48 (simple -> vardec .)
    ELSEIF          reduce using rule 48 (simple -> vardec .)


state 93

    (49) simple -> ON . LRB exp RRB LCB cases RCB SEMICOLON

    LRB             shift and go to state 108


state 94

    (50) simple -> PRINT . LRB ID RRB SEMICOLON

    LRB             shift and go to state 109


state 95

    (57) exp -> lvalue . ASSIGN exp
    (61) exp -> lvalue .
    (12) iddec -> lvalue .

    ASSIGN          shift and go to state 62
    SEMICOLON       reduce using rule 61 (exp -> lvalue .)
    AND             reduce using rule 61 (exp -> lvalue .)
    OR              reduce using rule 61 (exp -> lvalue .)
    SUM             reduce using rule 61 (exp -> lvalue .)
    SUB             reduce using rule 61 (exp -> lvalue .)
    MUL             reduce using rule 61 (exp -> lvalue .)
    DIV             reduce using rule 61 (exp -> lvalue .)
    MOD             reduce using rule 61 (exp -> lvalue .)
    GT              reduce using rule 61 (exp -> lvalue .)
    GE              reduce using rule 61 (exp -> lvalue .)
    LT              reduce using rule 61 (exp -> lvalue .)
    LE              reduce using rule 61 (exp -> lvalue .)
    EQ              reduce using rule 61 (exp -> lvalue .)
    NE              reduce using rule 61 (exp -> lvalue .)
    COLON           reduce using rule 12 (iddec -> lvalue .)
    COMMA           reduce using rule 12 (iddec -> lvalue .)


state 96

    (20) paramdec -> ID COLON type .

    COMMA           reduce using rule 20 (paramdec -> ID COLON type .)
    RRB             reduce using rule 20 (paramdec -> ID COLON type .)


state 97

    (21) paramdec -> ID LSB RSB . COLON type

    COLON           shift and go to state 110


state 98

    (7) funcdec -> FUNCTION ID LRB paramdecs RRB COLON . type block
    (9) type -> . INTEGER
    (10) type -> . FLOAT
    (11) type -> . BOOLEAN

    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22
    BOOLEAN         shift and go to state 23

    type                           shift and go to state 111

state 99

    (8) funcdec -> FUNCTION ID LRB paramdecs RRB block .

    MAIN            reduce using rule 8 (funcdec -> FUNCTION ID LRB paramdecs RRB block .)
    FUNCTION        reduce using rule 8 (funcdec -> FUNCTION ID LRB paramdecs RRB block .)
    ID              reduce using rule 8 (funcdec -> FUNCTION ID LRB paramdecs RRB block .)


state 100

    (19) paramdecslist -> paramdecslist COMMA paramdec .

    COMMA           reduce using rule 19 (paramdecslist -> paramdecslist COMMA paramdec .)
    RRB             reduce using rule 19 (paramdecslist -> paramdecslist COMMA paramdec .)


state 101

    (62) exp -> ID LRB explist RRB .

    AND             reduce using rule 62 (exp -> ID LRB explist RRB .)
    OR              reduce using rule 62 (exp -> ID LRB explist RRB .)
    SUM             reduce using rule 62 (exp -> ID LRB explist RRB .)
    SUB             reduce using rule 62 (exp -> ID LRB explist RRB .)
    MUL             reduce using rule 62 (exp -> ID LRB explist RRB .)
    DIV             reduce using rule 62 (exp -> ID LRB explist RRB .)
    MOD             reduce using rule 62 (exp -> ID LRB explist RRB .)
    GT              reduce using rule 62 (exp -> ID LRB explist RRB .)
    GE              reduce using rule 62 (exp -> ID LRB explist RRB .)
    LT              reduce using rule 62 (exp -> ID LRB explist RRB .)
    LE              reduce using rule 62 (exp -> ID LRB explist RRB .)
    EQ              reduce using rule 62 (exp -> ID LRB explist RRB .)
    NE              reduce using rule 62 (exp -> ID LRB explist RRB .)
    COLON           reduce using rule 62 (exp -> ID LRB explist RRB .)
    COMMA           reduce using rule 62 (exp -> ID LRB explist RRB .)
    RSB             reduce using rule 62 (exp -> ID LRB explist RRB .)
    RRB             reduce using rule 62 (exp -> ID LRB explist RRB .)
    SEMICOLON       reduce using rule 62 (exp -> ID LRB explist RRB .)
    LRB             reduce using rule 62 (exp -> ID LRB explist RRB .)


state 102

    (78) explist -> explist COMMA . exp
    (57) exp -> . lvalue ASSIGN exp
    (58) exp -> . exp operator exp
    (59) exp -> . exp relop exp
    (60) exp -> . const
    (61) exp -> . lvalue
    (62) exp -> . ID LRB explist RRB
    (63) exp -> . LRB exp RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (73) const -> . INTEGERNUMBER
    (74) const -> . FLOATNUMBER
    (75) const -> . TRUE
    (76) const -> . FALSE

    ID              shift and go to state 26
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 112
    lvalue                         shift and go to state 28
    const                          shift and go to state 29

state 103

    (32) ostmt -> IF LRB . exp RRB simple
    (33) ostmt -> IF LRB . exp RRB ostmt
    (34) ostmt -> IF LRB . exp RRB cstmt elseiflist ELSE ostmt
    (39) cstmt -> IF LRB . exp RRB cstmt elseiflist ELSE cstmt
    (57) exp -> . lvalue ASSIGN exp
    (58) exp -> . exp operator exp
    (59) exp -> . exp relop exp
    (60) exp -> . const
    (61) exp -> . lvalue
    (62) exp -> . ID LRB explist RRB
    (63) exp -> . LRB exp RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (73) const -> . INTEGERNUMBER
    (74) const -> . FLOATNUMBER
    (75) const -> . TRUE
    (76) const -> . FALSE

    ID              shift and go to state 26
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 113
    lvalue                         shift and go to state 28
    const                          shift and go to state 29

state 104

    (46) simple -> exp SEMICOLON .

    RCB             reduce using rule 46 (simple -> exp SEMICOLON .)
    IF              reduce using rule 46 (simple -> exp SEMICOLON .)
    FOR             reduce using rule 46 (simple -> exp SEMICOLON .)
    WHILE           reduce using rule 46 (simple -> exp SEMICOLON .)
    RETURN          reduce using rule 46 (simple -> exp SEMICOLON .)
    ON              reduce using rule 46 (simple -> exp SEMICOLON .)
    PRINT           reduce using rule 46 (simple -> exp SEMICOLON .)
    ID              reduce using rule 46 (simple -> exp SEMICOLON .)
    LRB             reduce using rule 46 (simple -> exp SEMICOLON .)
    SUB             reduce using rule 46 (simple -> exp SEMICOLON .)
    NOT             reduce using rule 46 (simple -> exp SEMICOLON .)
    LCB             reduce using rule 46 (simple -> exp SEMICOLON .)
    INTEGERNUMBER   reduce using rule 46 (simple -> exp SEMICOLON .)
    FLOATNUMBER     reduce using rule 46 (simple -> exp SEMICOLON .)
    TRUE            reduce using rule 46 (simple -> exp SEMICOLON .)
    FALSE           reduce using rule 46 (simple -> exp SEMICOLON .)
    WHERE           reduce using rule 46 (simple -> exp SEMICOLON .)
    ELSE            reduce using rule 46 (simple -> exp SEMICOLON .)
    ELSEIF          reduce using rule 46 (simple -> exp SEMICOLON .)


state 105

    (35) ostmt -> FOR LRB . exp SEMICOLON exp SEMICOLON exp RRB ostmt
    (36) ostmt -> FOR LRB . ID IN RRB ostmt
    (40) cstmt -> FOR LRB . exp SEMICOLON exp SEMICOLON exp RRB cstmt
    (41) cstmt -> FOR LRB . ID IN RRB cstmt
    (57) exp -> . lvalue ASSIGN exp
    (58) exp -> . exp operator exp
    (59) exp -> . exp relop exp
    (60) exp -> . const
    (61) exp -> . lvalue
    (62) exp -> . ID LRB explist RRB
    (63) exp -> . LRB exp RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (73) const -> . INTEGERNUMBER
    (74) const -> . FLOATNUMBER
    (75) const -> . TRUE
    (76) const -> . FALSE

    ID              shift and go to state 115
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 114
    lvalue                         shift and go to state 28
    const                          shift and go to state 29

state 106

    (37) ostmt -> WHILE LRB . exp LRB ostmt
    (42) cstmt -> WHILE LRB . exp LRB cstmt
    (57) exp -> . lvalue ASSIGN exp
    (58) exp -> . exp operator exp
    (59) exp -> . exp relop exp
    (60) exp -> . const
    (61) exp -> . lvalue
    (62) exp -> . ID LRB explist RRB
    (63) exp -> . LRB exp RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (73) const -> . INTEGERNUMBER
    (74) const -> . FLOATNUMBER
    (75) const -> . TRUE
    (76) const -> . FALSE

    ID              shift and go to state 26
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 116
    lvalue                         shift and go to state 28
    const                          shift and go to state 29

state 107

    (45) simple -> RETURN exp . SEMICOLON
    (58) exp -> exp . operator exp
    (59) exp -> exp . relop exp
    (66) operator -> . AND
    (67) operator -> . OR
    (68) operator -> . SUM
    (69) operator -> . SUB
    (70) operator -> . MUL
    (71) operator -> . DIV
    (72) operator -> . MOD
    (51) relop -> . GT
    (52) relop -> . GE
    (53) relop -> . LT
    (54) relop -> . LE
    (55) relop -> . EQ
    (56) relop -> . NE

    SEMICOLON       shift and go to state 117
    AND             shift and go to state 49
    OR              shift and go to state 50
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 108

    (49) simple -> ON LRB . exp RRB LCB cases RCB SEMICOLON
    (57) exp -> . lvalue ASSIGN exp
    (58) exp -> . exp operator exp
    (59) exp -> . exp relop exp
    (60) exp -> . const
    (61) exp -> . lvalue
    (62) exp -> . ID LRB explist RRB
    (63) exp -> . LRB exp RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (73) const -> . INTEGERNUMBER
    (74) const -> . FLOATNUMBER
    (75) const -> . TRUE
    (76) const -> . FALSE

    ID              shift and go to state 26
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 118
    lvalue                         shift and go to state 28
    const                          shift and go to state 29

state 109

    (50) simple -> PRINT LRB . ID RRB SEMICOLON

    ID              shift and go to state 119


state 110

    (21) paramdec -> ID LSB RSB COLON . type
    (9) type -> . INTEGER
    (10) type -> . FLOAT
    (11) type -> . BOOLEAN

    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22
    BOOLEAN         shift and go to state 23

    type                           shift and go to state 120

state 111

    (7) funcdec -> FUNCTION ID LRB paramdecs RRB COLON type . block
    (22) block -> . LCB stmtlist RCB

    LCB             shift and go to state 39

    block                          shift and go to state 121

state 112

    (78) explist -> explist COMMA exp .
    (58) exp -> exp . operator exp
    (59) exp -> exp . relop exp
    (66) operator -> . AND
    (67) operator -> . OR
    (68) operator -> . SUM
    (69) operator -> . SUB
    (70) operator -> . MUL
    (71) operator -> . DIV
    (72) operator -> . MOD
    (51) relop -> . GT
    (52) relop -> . GE
    (53) relop -> . LT
    (54) relop -> . LE
    (55) relop -> . EQ
    (56) relop -> . NE

    RRB             reduce using rule 78 (explist -> explist COMMA exp .)
    COMMA           reduce using rule 78 (explist -> explist COMMA exp .)
    AND             shift and go to state 49
    OR              shift and go to state 50
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 113

    (32) ostmt -> IF LRB exp . RRB simple
    (33) ostmt -> IF LRB exp . RRB ostmt
    (34) ostmt -> IF LRB exp . RRB cstmt elseiflist ELSE ostmt
    (39) cstmt -> IF LRB exp . RRB cstmt elseiflist ELSE cstmt
    (58) exp -> exp . operator exp
    (59) exp -> exp . relop exp
    (66) operator -> . AND
    (67) operator -> . OR
    (68) operator -> . SUM
    (69) operator -> . SUB
    (70) operator -> . MUL
    (71) operator -> . DIV
    (72) operator -> . MOD
    (51) relop -> . GT
    (52) relop -> . GE
    (53) relop -> . LT
    (54) relop -> . LE
    (55) relop -> . EQ
    (56) relop -> . NE

    RRB             shift and go to state 122
    AND             shift and go to state 49
    OR              shift and go to state 50
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 114

    (35) ostmt -> FOR LRB exp . SEMICOLON exp SEMICOLON exp RRB ostmt
    (40) cstmt -> FOR LRB exp . SEMICOLON exp SEMICOLON exp RRB cstmt
    (58) exp -> exp . operator exp
    (59) exp -> exp . relop exp
    (66) operator -> . AND
    (67) operator -> . OR
    (68) operator -> . SUM
    (69) operator -> . SUB
    (70) operator -> . MUL
    (71) operator -> . DIV
    (72) operator -> . MOD
    (51) relop -> . GT
    (52) relop -> . GE
    (53) relop -> . LT
    (54) relop -> . LE
    (55) relop -> . EQ
    (56) relop -> . NE

    SEMICOLON       shift and go to state 123
    AND             shift and go to state 49
    OR              shift and go to state 50
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 115

    (36) ostmt -> FOR LRB ID . IN RRB ostmt
    (41) cstmt -> FOR LRB ID . IN RRB cstmt
    (62) exp -> ID . LRB explist RRB
    (25) lvalue -> ID .
    (26) lvalue -> ID . LSB exp RSB

    IN              shift and go to state 124
    LRB             shift and go to state 46
    ASSIGN          reduce using rule 25 (lvalue -> ID .)
    SEMICOLON       reduce using rule 25 (lvalue -> ID .)
    AND             reduce using rule 25 (lvalue -> ID .)
    OR              reduce using rule 25 (lvalue -> ID .)
    SUM             reduce using rule 25 (lvalue -> ID .)
    SUB             reduce using rule 25 (lvalue -> ID .)
    MUL             reduce using rule 25 (lvalue -> ID .)
    DIV             reduce using rule 25 (lvalue -> ID .)
    MOD             reduce using rule 25 (lvalue -> ID .)
    GT              reduce using rule 25 (lvalue -> ID .)
    GE              reduce using rule 25 (lvalue -> ID .)
    LT              reduce using rule 25 (lvalue -> ID .)
    LE              reduce using rule 25 (lvalue -> ID .)
    EQ              reduce using rule 25 (lvalue -> ID .)
    NE              reduce using rule 25 (lvalue -> ID .)
    LSB             shift and go to state 18


state 116

    (37) ostmt -> WHILE LRB exp . LRB ostmt
    (42) cstmt -> WHILE LRB exp . LRB cstmt
    (58) exp -> exp . operator exp
    (59) exp -> exp . relop exp
    (66) operator -> . AND
    (67) operator -> . OR
    (68) operator -> . SUM
    (69) operator -> . SUB
    (70) operator -> . MUL
    (71) operator -> . DIV
    (72) operator -> . MOD
    (51) relop -> . GT
    (52) relop -> . GE
    (53) relop -> . LT
    (54) relop -> . LE
    (55) relop -> . EQ
    (56) relop -> . NE

    LRB             shift and go to state 125
    AND             shift and go to state 49
    OR              shift and go to state 50
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 117

    (45) simple -> RETURN exp SEMICOLON .

    RCB             reduce using rule 45 (simple -> RETURN exp SEMICOLON .)
    IF              reduce using rule 45 (simple -> RETURN exp SEMICOLON .)
    FOR             reduce using rule 45 (simple -> RETURN exp SEMICOLON .)
    WHILE           reduce using rule 45 (simple -> RETURN exp SEMICOLON .)
    RETURN          reduce using rule 45 (simple -> RETURN exp SEMICOLON .)
    ON              reduce using rule 45 (simple -> RETURN exp SEMICOLON .)
    PRINT           reduce using rule 45 (simple -> RETURN exp SEMICOLON .)
    ID              reduce using rule 45 (simple -> RETURN exp SEMICOLON .)
    LRB             reduce using rule 45 (simple -> RETURN exp SEMICOLON .)
    SUB             reduce using rule 45 (simple -> RETURN exp SEMICOLON .)
    NOT             reduce using rule 45 (simple -> RETURN exp SEMICOLON .)
    LCB             reduce using rule 45 (simple -> RETURN exp SEMICOLON .)
    INTEGERNUMBER   reduce using rule 45 (simple -> RETURN exp SEMICOLON .)
    FLOATNUMBER     reduce using rule 45 (simple -> RETURN exp SEMICOLON .)
    TRUE            reduce using rule 45 (simple -> RETURN exp SEMICOLON .)
    FALSE           reduce using rule 45 (simple -> RETURN exp SEMICOLON .)
    WHERE           reduce using rule 45 (simple -> RETURN exp SEMICOLON .)
    ELSE            reduce using rule 45 (simple -> RETURN exp SEMICOLON .)
    ELSEIF          reduce using rule 45 (simple -> RETURN exp SEMICOLON .)


state 118

    (49) simple -> ON LRB exp . RRB LCB cases RCB SEMICOLON
    (58) exp -> exp . operator exp
    (59) exp -> exp . relop exp
    (66) operator -> . AND
    (67) operator -> . OR
    (68) operator -> . SUM
    (69) operator -> . SUB
    (70) operator -> . MUL
    (71) operator -> . DIV
    (72) operator -> . MOD
    (51) relop -> . GT
    (52) relop -> . GE
    (53) relop -> . LT
    (54) relop -> . LE
    (55) relop -> . EQ
    (56) relop -> . NE

    RRB             shift and go to state 126
    AND             shift and go to state 49
    OR              shift and go to state 50
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 119

    (50) simple -> PRINT LRB ID . RRB SEMICOLON

    RRB             shift and go to state 127


state 120

    (21) paramdec -> ID LSB RSB COLON type .

    COMMA           reduce using rule 21 (paramdec -> ID LSB RSB COLON type .)
    RRB             reduce using rule 21 (paramdec -> ID LSB RSB COLON type .)


state 121

    (7) funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .

    MAIN            reduce using rule 7 (funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .)
    FUNCTION        reduce using rule 7 (funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .)
    ID              reduce using rule 7 (funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .)


state 122

    (32) ostmt -> IF LRB exp RRB . simple
    (33) ostmt -> IF LRB exp RRB . ostmt
    (34) ostmt -> IF LRB exp RRB . cstmt elseiflist ELSE ostmt
    (39) cstmt -> IF LRB exp RRB . cstmt elseiflist ELSE cstmt
    (45) simple -> . RETURN exp SEMICOLON
    (46) simple -> . exp SEMICOLON
    (47) simple -> . block
    (48) simple -> . vardec
    (49) simple -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (50) simple -> . PRINT LRB ID RRB SEMICOLON
    (32) ostmt -> . IF LRB exp RRB simple
    (33) ostmt -> . IF LRB exp RRB ostmt
    (34) ostmt -> . IF LRB exp RRB cstmt elseiflist ELSE ostmt
    (35) ostmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt
    (36) ostmt -> . FOR LRB ID IN RRB ostmt
    (37) ostmt -> . WHILE LRB exp LRB ostmt
    (38) cstmt -> . simple
    (39) cstmt -> . IF LRB exp RRB cstmt elseiflist ELSE cstmt
    (40) cstmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt
    (41) cstmt -> . FOR LRB ID IN RRB cstmt
    (42) cstmt -> . WHILE LRB exp LRB cstmt
    (57) exp -> . lvalue ASSIGN exp
    (58) exp -> . exp operator exp
    (59) exp -> . exp relop exp
    (60) exp -> . const
    (61) exp -> . lvalue
    (62) exp -> . ID LRB explist RRB
    (63) exp -> . LRB exp RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (22) block -> . LCB stmtlist RCB
    (6) vardec -> . idlist COLON type SEMICOLON
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (73) const -> . INTEGERNUMBER
    (74) const -> . FLOATNUMBER
    (75) const -> . TRUE
    (76) const -> . FALSE
    (14) idlist -> . iddec
    (15) idlist -> . idlist COMMA iddec
    (12) iddec -> . lvalue
    (13) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 90
    ON              shift and go to state 93
    PRINT           shift and go to state 94
    IF              shift and go to state 84
    FOR             shift and go to state 87
    WHILE           shift and go to state 89
    ID              shift and go to state 88
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    LCB             shift and go to state 39
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 85
    simple                         shift and go to state 128
    ostmt                          shift and go to state 129
    cstmt                          shift and go to state 130
    block                          shift and go to state 91
    vardec                         shift and go to state 92
    lvalue                         shift and go to state 95
    const                          shift and go to state 29
    idlist                         shift and go to state 8
    iddec                          shift and go to state 11

state 123

    (35) ostmt -> FOR LRB exp SEMICOLON . exp SEMICOLON exp RRB ostmt
    (40) cstmt -> FOR LRB exp SEMICOLON . exp SEMICOLON exp RRB cstmt
    (57) exp -> . lvalue ASSIGN exp
    (58) exp -> . exp operator exp
    (59) exp -> . exp relop exp
    (60) exp -> . const
    (61) exp -> . lvalue
    (62) exp -> . ID LRB explist RRB
    (63) exp -> . LRB exp RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (73) const -> . INTEGERNUMBER
    (74) const -> . FLOATNUMBER
    (75) const -> . TRUE
    (76) const -> . FALSE

    ID              shift and go to state 26
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 131
    lvalue                         shift and go to state 28
    const                          shift and go to state 29

state 124

    (36) ostmt -> FOR LRB ID IN . RRB ostmt
    (41) cstmt -> FOR LRB ID IN . RRB cstmt

    RRB             shift and go to state 132


state 125

    (37) ostmt -> WHILE LRB exp LRB . ostmt
    (42) cstmt -> WHILE LRB exp LRB . cstmt
    (32) ostmt -> . IF LRB exp RRB simple
    (33) ostmt -> . IF LRB exp RRB ostmt
    (34) ostmt -> . IF LRB exp RRB cstmt elseiflist ELSE ostmt
    (35) ostmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt
    (36) ostmt -> . FOR LRB ID IN RRB ostmt
    (37) ostmt -> . WHILE LRB exp LRB ostmt
    (38) cstmt -> . simple
    (39) cstmt -> . IF LRB exp RRB cstmt elseiflist ELSE cstmt
    (40) cstmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt
    (41) cstmt -> . FOR LRB ID IN RRB cstmt
    (42) cstmt -> . WHILE LRB exp LRB cstmt
    (45) simple -> . RETURN exp SEMICOLON
    (46) simple -> . exp SEMICOLON
    (47) simple -> . block
    (48) simple -> . vardec
    (49) simple -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (50) simple -> . PRINT LRB ID RRB SEMICOLON
    (57) exp -> . lvalue ASSIGN exp
    (58) exp -> . exp operator exp
    (59) exp -> . exp relop exp
    (60) exp -> . const
    (61) exp -> . lvalue
    (62) exp -> . ID LRB explist RRB
    (63) exp -> . LRB exp RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (22) block -> . LCB stmtlist RCB
    (6) vardec -> . idlist COLON type SEMICOLON
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (73) const -> . INTEGERNUMBER
    (74) const -> . FLOATNUMBER
    (75) const -> . TRUE
    (76) const -> . FALSE
    (14) idlist -> . iddec
    (15) idlist -> . idlist COMMA iddec
    (12) iddec -> . lvalue
    (13) iddec -> . ID ASSIGN exp

    IF              shift and go to state 84
    FOR             shift and go to state 87
    WHILE           shift and go to state 89
    RETURN          shift and go to state 90
    ON              shift and go to state 93
    PRINT           shift and go to state 94
    ID              shift and go to state 88
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    LCB             shift and go to state 39
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 85
    ostmt                          shift and go to state 133
    cstmt                          shift and go to state 134
    simple                         shift and go to state 86
    block                          shift and go to state 91
    vardec                         shift and go to state 92
    lvalue                         shift and go to state 95
    const                          shift and go to state 29
    idlist                         shift and go to state 8
    iddec                          shift and go to state 11

state 126

    (49) simple -> ON LRB exp RRB . LCB cases RCB SEMICOLON

    LCB             shift and go to state 135


state 127

    (50) simple -> PRINT LRB ID RRB . SEMICOLON

    SEMICOLON       shift and go to state 136


state 128

    (32) ostmt -> IF LRB exp RRB simple .
    (38) cstmt -> simple .

    RCB             reduce using rule 32 (ostmt -> IF LRB exp RRB simple .)
    IF              reduce using rule 32 (ostmt -> IF LRB exp RRB simple .)
    FOR             reduce using rule 32 (ostmt -> IF LRB exp RRB simple .)
    WHILE           reduce using rule 32 (ostmt -> IF LRB exp RRB simple .)
    RETURN          reduce using rule 32 (ostmt -> IF LRB exp RRB simple .)
    ON              reduce using rule 32 (ostmt -> IF LRB exp RRB simple .)
    PRINT           reduce using rule 32 (ostmt -> IF LRB exp RRB simple .)
    ID              reduce using rule 32 (ostmt -> IF LRB exp RRB simple .)
    LRB             reduce using rule 32 (ostmt -> IF LRB exp RRB simple .)
    SUB             reduce using rule 32 (ostmt -> IF LRB exp RRB simple .)
    NOT             reduce using rule 32 (ostmt -> IF LRB exp RRB simple .)
    LCB             reduce using rule 32 (ostmt -> IF LRB exp RRB simple .)
    INTEGERNUMBER   reduce using rule 32 (ostmt -> IF LRB exp RRB simple .)
    FLOATNUMBER     reduce using rule 32 (ostmt -> IF LRB exp RRB simple .)
    TRUE            reduce using rule 32 (ostmt -> IF LRB exp RRB simple .)
    FALSE           reduce using rule 32 (ostmt -> IF LRB exp RRB simple .)
    WHERE           reduce using rule 32 (ostmt -> IF LRB exp RRB simple .)
    ELSE            reduce using rule 38 (cstmt -> simple .)
    ELSEIF          reduce using rule 38 (cstmt -> simple .)


state 129

    (33) ostmt -> IF LRB exp RRB ostmt .

    RCB             reduce using rule 33 (ostmt -> IF LRB exp RRB ostmt .)
    IF              reduce using rule 33 (ostmt -> IF LRB exp RRB ostmt .)
    FOR             reduce using rule 33 (ostmt -> IF LRB exp RRB ostmt .)
    WHILE           reduce using rule 33 (ostmt -> IF LRB exp RRB ostmt .)
    RETURN          reduce using rule 33 (ostmt -> IF LRB exp RRB ostmt .)
    ON              reduce using rule 33 (ostmt -> IF LRB exp RRB ostmt .)
    PRINT           reduce using rule 33 (ostmt -> IF LRB exp RRB ostmt .)
    ID              reduce using rule 33 (ostmt -> IF LRB exp RRB ostmt .)
    LRB             reduce using rule 33 (ostmt -> IF LRB exp RRB ostmt .)
    SUB             reduce using rule 33 (ostmt -> IF LRB exp RRB ostmt .)
    NOT             reduce using rule 33 (ostmt -> IF LRB exp RRB ostmt .)
    LCB             reduce using rule 33 (ostmt -> IF LRB exp RRB ostmt .)
    INTEGERNUMBER   reduce using rule 33 (ostmt -> IF LRB exp RRB ostmt .)
    FLOATNUMBER     reduce using rule 33 (ostmt -> IF LRB exp RRB ostmt .)
    TRUE            reduce using rule 33 (ostmt -> IF LRB exp RRB ostmt .)
    FALSE           reduce using rule 33 (ostmt -> IF LRB exp RRB ostmt .)
    WHERE           reduce using rule 33 (ostmt -> IF LRB exp RRB ostmt .)


state 130

    (34) ostmt -> IF LRB exp RRB cstmt . elseiflist ELSE ostmt
    (39) cstmt -> IF LRB exp RRB cstmt . elseiflist ELSE cstmt
    (43) elseiflist -> . elseiflist ELSEIF LRB exp RRB cstmt
    (44) elseiflist -> . eps
    (80) eps -> .

    ELSE            reduce using rule 80 (eps -> .)
    ELSEIF          reduce using rule 80 (eps -> .)

    elseiflist                     shift and go to state 137
    eps                            shift and go to state 138

state 131

    (35) ostmt -> FOR LRB exp SEMICOLON exp . SEMICOLON exp RRB ostmt
    (40) cstmt -> FOR LRB exp SEMICOLON exp . SEMICOLON exp RRB cstmt
    (58) exp -> exp . operator exp
    (59) exp -> exp . relop exp
    (66) operator -> . AND
    (67) operator -> . OR
    (68) operator -> . SUM
    (69) operator -> . SUB
    (70) operator -> . MUL
    (71) operator -> . DIV
    (72) operator -> . MOD
    (51) relop -> . GT
    (52) relop -> . GE
    (53) relop -> . LT
    (54) relop -> . LE
    (55) relop -> . EQ
    (56) relop -> . NE

    SEMICOLON       shift and go to state 139
    AND             shift and go to state 49
    OR              shift and go to state 50
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 132

    (36) ostmt -> FOR LRB ID IN RRB . ostmt
    (41) cstmt -> FOR LRB ID IN RRB . cstmt
    (32) ostmt -> . IF LRB exp RRB simple
    (33) ostmt -> . IF LRB exp RRB ostmt
    (34) ostmt -> . IF LRB exp RRB cstmt elseiflist ELSE ostmt
    (35) ostmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt
    (36) ostmt -> . FOR LRB ID IN RRB ostmt
    (37) ostmt -> . WHILE LRB exp LRB ostmt
    (38) cstmt -> . simple
    (39) cstmt -> . IF LRB exp RRB cstmt elseiflist ELSE cstmt
    (40) cstmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt
    (41) cstmt -> . FOR LRB ID IN RRB cstmt
    (42) cstmt -> . WHILE LRB exp LRB cstmt
    (45) simple -> . RETURN exp SEMICOLON
    (46) simple -> . exp SEMICOLON
    (47) simple -> . block
    (48) simple -> . vardec
    (49) simple -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (50) simple -> . PRINT LRB ID RRB SEMICOLON
    (57) exp -> . lvalue ASSIGN exp
    (58) exp -> . exp operator exp
    (59) exp -> . exp relop exp
    (60) exp -> . const
    (61) exp -> . lvalue
    (62) exp -> . ID LRB explist RRB
    (63) exp -> . LRB exp RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (22) block -> . LCB stmtlist RCB
    (6) vardec -> . idlist COLON type SEMICOLON
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (73) const -> . INTEGERNUMBER
    (74) const -> . FLOATNUMBER
    (75) const -> . TRUE
    (76) const -> . FALSE
    (14) idlist -> . iddec
    (15) idlist -> . idlist COMMA iddec
    (12) iddec -> . lvalue
    (13) iddec -> . ID ASSIGN exp

    IF              shift and go to state 84
    FOR             shift and go to state 87
    WHILE           shift and go to state 89
    RETURN          shift and go to state 90
    ON              shift and go to state 93
    PRINT           shift and go to state 94
    ID              shift and go to state 88
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    LCB             shift and go to state 39
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    ostmt                          shift and go to state 140
    cstmt                          shift and go to state 141
    exp                            shift and go to state 85
    simple                         shift and go to state 86
    block                          shift and go to state 91
    vardec                         shift and go to state 92
    lvalue                         shift and go to state 95
    const                          shift and go to state 29
    idlist                         shift and go to state 8
    iddec                          shift and go to state 11

state 133

    (37) ostmt -> WHILE LRB exp LRB ostmt .

    RCB             reduce using rule 37 (ostmt -> WHILE LRB exp LRB ostmt .)
    IF              reduce using rule 37 (ostmt -> WHILE LRB exp LRB ostmt .)
    FOR             reduce using rule 37 (ostmt -> WHILE LRB exp LRB ostmt .)
    WHILE           reduce using rule 37 (ostmt -> WHILE LRB exp LRB ostmt .)
    RETURN          reduce using rule 37 (ostmt -> WHILE LRB exp LRB ostmt .)
    ON              reduce using rule 37 (ostmt -> WHILE LRB exp LRB ostmt .)
    PRINT           reduce using rule 37 (ostmt -> WHILE LRB exp LRB ostmt .)
    ID              reduce using rule 37 (ostmt -> WHILE LRB exp LRB ostmt .)
    LRB             reduce using rule 37 (ostmt -> WHILE LRB exp LRB ostmt .)
    SUB             reduce using rule 37 (ostmt -> WHILE LRB exp LRB ostmt .)
    NOT             reduce using rule 37 (ostmt -> WHILE LRB exp LRB ostmt .)
    LCB             reduce using rule 37 (ostmt -> WHILE LRB exp LRB ostmt .)
    INTEGERNUMBER   reduce using rule 37 (ostmt -> WHILE LRB exp LRB ostmt .)
    FLOATNUMBER     reduce using rule 37 (ostmt -> WHILE LRB exp LRB ostmt .)
    TRUE            reduce using rule 37 (ostmt -> WHILE LRB exp LRB ostmt .)
    FALSE           reduce using rule 37 (ostmt -> WHILE LRB exp LRB ostmt .)
    WHERE           reduce using rule 37 (ostmt -> WHILE LRB exp LRB ostmt .)


state 134

    (42) cstmt -> WHILE LRB exp LRB cstmt .

    RCB             reduce using rule 42 (cstmt -> WHILE LRB exp LRB cstmt .)
    IF              reduce using rule 42 (cstmt -> WHILE LRB exp LRB cstmt .)
    FOR             reduce using rule 42 (cstmt -> WHILE LRB exp LRB cstmt .)
    WHILE           reduce using rule 42 (cstmt -> WHILE LRB exp LRB cstmt .)
    RETURN          reduce using rule 42 (cstmt -> WHILE LRB exp LRB cstmt .)
    ON              reduce using rule 42 (cstmt -> WHILE LRB exp LRB cstmt .)
    PRINT           reduce using rule 42 (cstmt -> WHILE LRB exp LRB cstmt .)
    ID              reduce using rule 42 (cstmt -> WHILE LRB exp LRB cstmt .)
    LRB             reduce using rule 42 (cstmt -> WHILE LRB exp LRB cstmt .)
    SUB             reduce using rule 42 (cstmt -> WHILE LRB exp LRB cstmt .)
    NOT             reduce using rule 42 (cstmt -> WHILE LRB exp LRB cstmt .)
    LCB             reduce using rule 42 (cstmt -> WHILE LRB exp LRB cstmt .)
    INTEGERNUMBER   reduce using rule 42 (cstmt -> WHILE LRB exp LRB cstmt .)
    FLOATNUMBER     reduce using rule 42 (cstmt -> WHILE LRB exp LRB cstmt .)
    TRUE            reduce using rule 42 (cstmt -> WHILE LRB exp LRB cstmt .)
    FALSE           reduce using rule 42 (cstmt -> WHILE LRB exp LRB cstmt .)
    ELSE            reduce using rule 42 (cstmt -> WHILE LRB exp LRB cstmt .)
    ELSEIF          reduce using rule 42 (cstmt -> WHILE LRB exp LRB cstmt .)
    WHERE           reduce using rule 42 (cstmt -> WHILE LRB exp LRB cstmt .)


state 135

    (49) simple -> ON LRB exp RRB LCB . cases RCB SEMICOLON
    (28) cases -> . cases case
    (29) cases -> . eps
    (80) eps -> .

    RCB             reduce using rule 80 (eps -> .)
    WHERE           reduce using rule 80 (eps -> .)

    cases                          shift and go to state 142
    eps                            shift and go to state 143

state 136

    (50) simple -> PRINT LRB ID RRB SEMICOLON .

    RCB             reduce using rule 50 (simple -> PRINT LRB ID RRB SEMICOLON .)
    IF              reduce using rule 50 (simple -> PRINT LRB ID RRB SEMICOLON .)
    FOR             reduce using rule 50 (simple -> PRINT LRB ID RRB SEMICOLON .)
    WHILE           reduce using rule 50 (simple -> PRINT LRB ID RRB SEMICOLON .)
    RETURN          reduce using rule 50 (simple -> PRINT LRB ID RRB SEMICOLON .)
    ON              reduce using rule 50 (simple -> PRINT LRB ID RRB SEMICOLON .)
    PRINT           reduce using rule 50 (simple -> PRINT LRB ID RRB SEMICOLON .)
    ID              reduce using rule 50 (simple -> PRINT LRB ID RRB SEMICOLON .)
    LRB             reduce using rule 50 (simple -> PRINT LRB ID RRB SEMICOLON .)
    SUB             reduce using rule 50 (simple -> PRINT LRB ID RRB SEMICOLON .)
    NOT             reduce using rule 50 (simple -> PRINT LRB ID RRB SEMICOLON .)
    LCB             reduce using rule 50 (simple -> PRINT LRB ID RRB SEMICOLON .)
    INTEGERNUMBER   reduce using rule 50 (simple -> PRINT LRB ID RRB SEMICOLON .)
    FLOATNUMBER     reduce using rule 50 (simple -> PRINT LRB ID RRB SEMICOLON .)
    TRUE            reduce using rule 50 (simple -> PRINT LRB ID RRB SEMICOLON .)
    FALSE           reduce using rule 50 (simple -> PRINT LRB ID RRB SEMICOLON .)
    WHERE           reduce using rule 50 (simple -> PRINT LRB ID RRB SEMICOLON .)
    ELSE            reduce using rule 50 (simple -> PRINT LRB ID RRB SEMICOLON .)
    ELSEIF          reduce using rule 50 (simple -> PRINT LRB ID RRB SEMICOLON .)


state 137

    (34) ostmt -> IF LRB exp RRB cstmt elseiflist . ELSE ostmt
    (39) cstmt -> IF LRB exp RRB cstmt elseiflist . ELSE cstmt
    (43) elseiflist -> elseiflist . ELSEIF LRB exp RRB cstmt

    ELSE            shift and go to state 144
    ELSEIF          shift and go to state 145


state 138

    (44) elseiflist -> eps .

    ELSE            reduce using rule 44 (elseiflist -> eps .)
    ELSEIF          reduce using rule 44 (elseiflist -> eps .)


state 139

    (35) ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON . exp RRB ostmt
    (40) cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON . exp RRB cstmt
    (57) exp -> . lvalue ASSIGN exp
    (58) exp -> . exp operator exp
    (59) exp -> . exp relop exp
    (60) exp -> . const
    (61) exp -> . lvalue
    (62) exp -> . ID LRB explist RRB
    (63) exp -> . LRB exp RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (73) const -> . INTEGERNUMBER
    (74) const -> . FLOATNUMBER
    (75) const -> . TRUE
    (76) const -> . FALSE

    ID              shift and go to state 26
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 146
    lvalue                         shift and go to state 28
    const                          shift and go to state 29

state 140

    (36) ostmt -> FOR LRB ID IN RRB ostmt .

    RCB             reduce using rule 36 (ostmt -> FOR LRB ID IN RRB ostmt .)
    IF              reduce using rule 36 (ostmt -> FOR LRB ID IN RRB ostmt .)
    FOR             reduce using rule 36 (ostmt -> FOR LRB ID IN RRB ostmt .)
    WHILE           reduce using rule 36 (ostmt -> FOR LRB ID IN RRB ostmt .)
    RETURN          reduce using rule 36 (ostmt -> FOR LRB ID IN RRB ostmt .)
    ON              reduce using rule 36 (ostmt -> FOR LRB ID IN RRB ostmt .)
    PRINT           reduce using rule 36 (ostmt -> FOR LRB ID IN RRB ostmt .)
    ID              reduce using rule 36 (ostmt -> FOR LRB ID IN RRB ostmt .)
    LRB             reduce using rule 36 (ostmt -> FOR LRB ID IN RRB ostmt .)
    SUB             reduce using rule 36 (ostmt -> FOR LRB ID IN RRB ostmt .)
    NOT             reduce using rule 36 (ostmt -> FOR LRB ID IN RRB ostmt .)
    LCB             reduce using rule 36 (ostmt -> FOR LRB ID IN RRB ostmt .)
    INTEGERNUMBER   reduce using rule 36 (ostmt -> FOR LRB ID IN RRB ostmt .)
    FLOATNUMBER     reduce using rule 36 (ostmt -> FOR LRB ID IN RRB ostmt .)
    TRUE            reduce using rule 36 (ostmt -> FOR LRB ID IN RRB ostmt .)
    FALSE           reduce using rule 36 (ostmt -> FOR LRB ID IN RRB ostmt .)
    WHERE           reduce using rule 36 (ostmt -> FOR LRB ID IN RRB ostmt .)


state 141

    (41) cstmt -> FOR LRB ID IN RRB cstmt .

    RCB             reduce using rule 41 (cstmt -> FOR LRB ID IN RRB cstmt .)
    IF              reduce using rule 41 (cstmt -> FOR LRB ID IN RRB cstmt .)
    FOR             reduce using rule 41 (cstmt -> FOR LRB ID IN RRB cstmt .)
    WHILE           reduce using rule 41 (cstmt -> FOR LRB ID IN RRB cstmt .)
    RETURN          reduce using rule 41 (cstmt -> FOR LRB ID IN RRB cstmt .)
    ON              reduce using rule 41 (cstmt -> FOR LRB ID IN RRB cstmt .)
    PRINT           reduce using rule 41 (cstmt -> FOR LRB ID IN RRB cstmt .)
    ID              reduce using rule 41 (cstmt -> FOR LRB ID IN RRB cstmt .)
    LRB             reduce using rule 41 (cstmt -> FOR LRB ID IN RRB cstmt .)
    SUB             reduce using rule 41 (cstmt -> FOR LRB ID IN RRB cstmt .)
    NOT             reduce using rule 41 (cstmt -> FOR LRB ID IN RRB cstmt .)
    LCB             reduce using rule 41 (cstmt -> FOR LRB ID IN RRB cstmt .)
    INTEGERNUMBER   reduce using rule 41 (cstmt -> FOR LRB ID IN RRB cstmt .)
    FLOATNUMBER     reduce using rule 41 (cstmt -> FOR LRB ID IN RRB cstmt .)
    TRUE            reduce using rule 41 (cstmt -> FOR LRB ID IN RRB cstmt .)
    FALSE           reduce using rule 41 (cstmt -> FOR LRB ID IN RRB cstmt .)
    ELSE            reduce using rule 41 (cstmt -> FOR LRB ID IN RRB cstmt .)
    ELSEIF          reduce using rule 41 (cstmt -> FOR LRB ID IN RRB cstmt .)
    WHERE           reduce using rule 41 (cstmt -> FOR LRB ID IN RRB cstmt .)


state 142

    (49) simple -> ON LRB exp RRB LCB cases . RCB SEMICOLON
    (28) cases -> cases . case
    (27) case -> . WHERE const COLON stmtlist

    RCB             shift and go to state 147
    WHERE           shift and go to state 149

    case                           shift and go to state 148

state 143

    (29) cases -> eps .

    RCB             reduce using rule 29 (cases -> eps .)
    WHERE           reduce using rule 29 (cases -> eps .)


state 144

    (34) ostmt -> IF LRB exp RRB cstmt elseiflist ELSE . ostmt
    (39) cstmt -> IF LRB exp RRB cstmt elseiflist ELSE . cstmt
    (32) ostmt -> . IF LRB exp RRB simple
    (33) ostmt -> . IF LRB exp RRB ostmt
    (34) ostmt -> . IF LRB exp RRB cstmt elseiflist ELSE ostmt
    (35) ostmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt
    (36) ostmt -> . FOR LRB ID IN RRB ostmt
    (37) ostmt -> . WHILE LRB exp LRB ostmt
    (38) cstmt -> . simple
    (39) cstmt -> . IF LRB exp RRB cstmt elseiflist ELSE cstmt
    (40) cstmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt
    (41) cstmt -> . FOR LRB ID IN RRB cstmt
    (42) cstmt -> . WHILE LRB exp LRB cstmt
    (45) simple -> . RETURN exp SEMICOLON
    (46) simple -> . exp SEMICOLON
    (47) simple -> . block
    (48) simple -> . vardec
    (49) simple -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (50) simple -> . PRINT LRB ID RRB SEMICOLON
    (57) exp -> . lvalue ASSIGN exp
    (58) exp -> . exp operator exp
    (59) exp -> . exp relop exp
    (60) exp -> . const
    (61) exp -> . lvalue
    (62) exp -> . ID LRB explist RRB
    (63) exp -> . LRB exp RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (22) block -> . LCB stmtlist RCB
    (6) vardec -> . idlist COLON type SEMICOLON
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (73) const -> . INTEGERNUMBER
    (74) const -> . FLOATNUMBER
    (75) const -> . TRUE
    (76) const -> . FALSE
    (14) idlist -> . iddec
    (15) idlist -> . idlist COMMA iddec
    (12) iddec -> . lvalue
    (13) iddec -> . ID ASSIGN exp

    IF              shift and go to state 84
    FOR             shift and go to state 87
    WHILE           shift and go to state 89
    RETURN          shift and go to state 90
    ON              shift and go to state 93
    PRINT           shift and go to state 94
    ID              shift and go to state 88
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    LCB             shift and go to state 39
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 85
    cstmt                          shift and go to state 150
    ostmt                          shift and go to state 151
    simple                         shift and go to state 86
    block                          shift and go to state 91
    vardec                         shift and go to state 92
    lvalue                         shift and go to state 95
    const                          shift and go to state 29
    idlist                         shift and go to state 8
    iddec                          shift and go to state 11

state 145

    (43) elseiflist -> elseiflist ELSEIF . LRB exp RRB cstmt

    LRB             shift and go to state 152


state 146

    (35) ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp . RRB ostmt
    (40) cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp . RRB cstmt
    (58) exp -> exp . operator exp
    (59) exp -> exp . relop exp
    (66) operator -> . AND
    (67) operator -> . OR
    (68) operator -> . SUM
    (69) operator -> . SUB
    (70) operator -> . MUL
    (71) operator -> . DIV
    (72) operator -> . MOD
    (51) relop -> . GT
    (52) relop -> . GE
    (53) relop -> . LT
    (54) relop -> . LE
    (55) relop -> . EQ
    (56) relop -> . NE

    RRB             shift and go to state 153
    AND             shift and go to state 49
    OR              shift and go to state 50
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 147

    (49) simple -> ON LRB exp RRB LCB cases RCB . SEMICOLON

    SEMICOLON       shift and go to state 154


state 148

    (28) cases -> cases case .

    RCB             reduce using rule 28 (cases -> cases case .)
    WHERE           reduce using rule 28 (cases -> cases case .)


state 149

    (27) case -> WHERE . const COLON stmtlist
    (73) const -> . INTEGERNUMBER
    (74) const -> . FLOATNUMBER
    (75) const -> . TRUE
    (76) const -> . FALSE

    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    const                          shift and go to state 155

state 150

    (39) cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt .

    RCB             reduce using rule 39 (cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt .)
    IF              reduce using rule 39 (cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt .)
    FOR             reduce using rule 39 (cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt .)
    WHILE           reduce using rule 39 (cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt .)
    RETURN          reduce using rule 39 (cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt .)
    ON              reduce using rule 39 (cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt .)
    PRINT           reduce using rule 39 (cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt .)
    ID              reduce using rule 39 (cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt .)
    LRB             reduce using rule 39 (cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt .)
    SUB             reduce using rule 39 (cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt .)
    NOT             reduce using rule 39 (cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt .)
    LCB             reduce using rule 39 (cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt .)
    INTEGERNUMBER   reduce using rule 39 (cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt .)
    FLOATNUMBER     reduce using rule 39 (cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt .)
    TRUE            reduce using rule 39 (cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt .)
    FALSE           reduce using rule 39 (cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt .)
    ELSE            reduce using rule 39 (cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt .)
    ELSEIF          reduce using rule 39 (cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt .)
    WHERE           reduce using rule 39 (cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt .)


state 151

    (34) ostmt -> IF LRB exp RRB cstmt elseiflist ELSE ostmt .

    RCB             reduce using rule 34 (ostmt -> IF LRB exp RRB cstmt elseiflist ELSE ostmt .)
    IF              reduce using rule 34 (ostmt -> IF LRB exp RRB cstmt elseiflist ELSE ostmt .)
    FOR             reduce using rule 34 (ostmt -> IF LRB exp RRB cstmt elseiflist ELSE ostmt .)
    WHILE           reduce using rule 34 (ostmt -> IF LRB exp RRB cstmt elseiflist ELSE ostmt .)
    RETURN          reduce using rule 34 (ostmt -> IF LRB exp RRB cstmt elseiflist ELSE ostmt .)
    ON              reduce using rule 34 (ostmt -> IF LRB exp RRB cstmt elseiflist ELSE ostmt .)
    PRINT           reduce using rule 34 (ostmt -> IF LRB exp RRB cstmt elseiflist ELSE ostmt .)
    ID              reduce using rule 34 (ostmt -> IF LRB exp RRB cstmt elseiflist ELSE ostmt .)
    LRB             reduce using rule 34 (ostmt -> IF LRB exp RRB cstmt elseiflist ELSE ostmt .)
    SUB             reduce using rule 34 (ostmt -> IF LRB exp RRB cstmt elseiflist ELSE ostmt .)
    NOT             reduce using rule 34 (ostmt -> IF LRB exp RRB cstmt elseiflist ELSE ostmt .)
    LCB             reduce using rule 34 (ostmt -> IF LRB exp RRB cstmt elseiflist ELSE ostmt .)
    INTEGERNUMBER   reduce using rule 34 (ostmt -> IF LRB exp RRB cstmt elseiflist ELSE ostmt .)
    FLOATNUMBER     reduce using rule 34 (ostmt -> IF LRB exp RRB cstmt elseiflist ELSE ostmt .)
    TRUE            reduce using rule 34 (ostmt -> IF LRB exp RRB cstmt elseiflist ELSE ostmt .)
    FALSE           reduce using rule 34 (ostmt -> IF LRB exp RRB cstmt elseiflist ELSE ostmt .)
    WHERE           reduce using rule 34 (ostmt -> IF LRB exp RRB cstmt elseiflist ELSE ostmt .)


state 152

    (43) elseiflist -> elseiflist ELSEIF LRB . exp RRB cstmt
    (57) exp -> . lvalue ASSIGN exp
    (58) exp -> . exp operator exp
    (59) exp -> . exp relop exp
    (60) exp -> . const
    (61) exp -> . lvalue
    (62) exp -> . ID LRB explist RRB
    (63) exp -> . LRB exp RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (73) const -> . INTEGERNUMBER
    (74) const -> . FLOATNUMBER
    (75) const -> . TRUE
    (76) const -> . FALSE

    ID              shift and go to state 26
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 156
    lvalue                         shift and go to state 28
    const                          shift and go to state 29

state 153

    (35) ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB . ostmt
    (40) cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB . cstmt
    (32) ostmt -> . IF LRB exp RRB simple
    (33) ostmt -> . IF LRB exp RRB ostmt
    (34) ostmt -> . IF LRB exp RRB cstmt elseiflist ELSE ostmt
    (35) ostmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt
    (36) ostmt -> . FOR LRB ID IN RRB ostmt
    (37) ostmt -> . WHILE LRB exp LRB ostmt
    (38) cstmt -> . simple
    (39) cstmt -> . IF LRB exp RRB cstmt elseiflist ELSE cstmt
    (40) cstmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt
    (41) cstmt -> . FOR LRB ID IN RRB cstmt
    (42) cstmt -> . WHILE LRB exp LRB cstmt
    (45) simple -> . RETURN exp SEMICOLON
    (46) simple -> . exp SEMICOLON
    (47) simple -> . block
    (48) simple -> . vardec
    (49) simple -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (50) simple -> . PRINT LRB ID RRB SEMICOLON
    (57) exp -> . lvalue ASSIGN exp
    (58) exp -> . exp operator exp
    (59) exp -> . exp relop exp
    (60) exp -> . const
    (61) exp -> . lvalue
    (62) exp -> . ID LRB explist RRB
    (63) exp -> . LRB exp RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (22) block -> . LCB stmtlist RCB
    (6) vardec -> . idlist COLON type SEMICOLON
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (73) const -> . INTEGERNUMBER
    (74) const -> . FLOATNUMBER
    (75) const -> . TRUE
    (76) const -> . FALSE
    (14) idlist -> . iddec
    (15) idlist -> . idlist COMMA iddec
    (12) iddec -> . lvalue
    (13) iddec -> . ID ASSIGN exp

    IF              shift and go to state 84
    FOR             shift and go to state 87
    WHILE           shift and go to state 89
    RETURN          shift and go to state 90
    ON              shift and go to state 93
    PRINT           shift and go to state 94
    ID              shift and go to state 88
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    LCB             shift and go to state 39
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 85
    ostmt                          shift and go to state 157
    cstmt                          shift and go to state 158
    simple                         shift and go to state 86
    block                          shift and go to state 91
    vardec                         shift and go to state 92
    lvalue                         shift and go to state 95
    const                          shift and go to state 29
    idlist                         shift and go to state 8
    iddec                          shift and go to state 11

state 154

    (49) simple -> ON LRB exp RRB LCB cases RCB SEMICOLON .

    RCB             reduce using rule 49 (simple -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    IF              reduce using rule 49 (simple -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    FOR             reduce using rule 49 (simple -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    WHILE           reduce using rule 49 (simple -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    RETURN          reduce using rule 49 (simple -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ON              reduce using rule 49 (simple -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    PRINT           reduce using rule 49 (simple -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ID              reduce using rule 49 (simple -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    LRB             reduce using rule 49 (simple -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    SUB             reduce using rule 49 (simple -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    NOT             reduce using rule 49 (simple -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    LCB             reduce using rule 49 (simple -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    INTEGERNUMBER   reduce using rule 49 (simple -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    FLOATNUMBER     reduce using rule 49 (simple -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    TRUE            reduce using rule 49 (simple -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    FALSE           reduce using rule 49 (simple -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    WHERE           reduce using rule 49 (simple -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ELSE            reduce using rule 49 (simple -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ELSEIF          reduce using rule 49 (simple -> ON LRB exp RRB LCB cases RCB SEMICOLON .)


state 155

    (27) case -> WHERE const . COLON stmtlist

    COLON           shift and go to state 159


state 156

    (43) elseiflist -> elseiflist ELSEIF LRB exp . RRB cstmt
    (58) exp -> exp . operator exp
    (59) exp -> exp . relop exp
    (66) operator -> . AND
    (67) operator -> . OR
    (68) operator -> . SUM
    (69) operator -> . SUB
    (70) operator -> . MUL
    (71) operator -> . DIV
    (72) operator -> . MOD
    (51) relop -> . GT
    (52) relop -> . GE
    (53) relop -> . LT
    (54) relop -> . LE
    (55) relop -> . EQ
    (56) relop -> . NE

    RRB             shift and go to state 160
    AND             shift and go to state 49
    OR              shift and go to state 50
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 157

    (35) ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt .

    RCB             reduce using rule 35 (ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt .)
    IF              reduce using rule 35 (ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt .)
    FOR             reduce using rule 35 (ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt .)
    WHILE           reduce using rule 35 (ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt .)
    RETURN          reduce using rule 35 (ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt .)
    ON              reduce using rule 35 (ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt .)
    PRINT           reduce using rule 35 (ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt .)
    ID              reduce using rule 35 (ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt .)
    LRB             reduce using rule 35 (ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt .)
    SUB             reduce using rule 35 (ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt .)
    NOT             reduce using rule 35 (ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt .)
    LCB             reduce using rule 35 (ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt .)
    INTEGERNUMBER   reduce using rule 35 (ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt .)
    FLOATNUMBER     reduce using rule 35 (ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt .)
    TRUE            reduce using rule 35 (ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt .)
    FALSE           reduce using rule 35 (ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt .)
    WHERE           reduce using rule 35 (ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt .)


state 158

    (40) cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt .

    RCB             reduce using rule 40 (cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt .)
    IF              reduce using rule 40 (cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt .)
    FOR             reduce using rule 40 (cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt .)
    WHILE           reduce using rule 40 (cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt .)
    RETURN          reduce using rule 40 (cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt .)
    ON              reduce using rule 40 (cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt .)
    PRINT           reduce using rule 40 (cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt .)
    ID              reduce using rule 40 (cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt .)
    LRB             reduce using rule 40 (cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt .)
    SUB             reduce using rule 40 (cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt .)
    NOT             reduce using rule 40 (cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt .)
    LCB             reduce using rule 40 (cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt .)
    INTEGERNUMBER   reduce using rule 40 (cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt .)
    FLOATNUMBER     reduce using rule 40 (cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt .)
    TRUE            reduce using rule 40 (cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt .)
    FALSE           reduce using rule 40 (cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt .)
    ELSE            reduce using rule 40 (cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt .)
    ELSEIF          reduce using rule 40 (cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt .)
    WHERE           reduce using rule 40 (cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt .)


state 159

    (27) case -> WHERE const COLON . stmtlist
    (23) stmtlist -> . stmtlist stmt
    (24) stmtlist -> . eps
    (80) eps -> .

    IF              reduce using rule 80 (eps -> .)
    FOR             reduce using rule 80 (eps -> .)
    WHILE           reduce using rule 80 (eps -> .)
    RETURN          reduce using rule 80 (eps -> .)
    ON              reduce using rule 80 (eps -> .)
    PRINT           reduce using rule 80 (eps -> .)
    ID              reduce using rule 80 (eps -> .)
    LRB             reduce using rule 80 (eps -> .)
    SUB             reduce using rule 80 (eps -> .)
    NOT             reduce using rule 80 (eps -> .)
    LCB             reduce using rule 80 (eps -> .)
    INTEGERNUMBER   reduce using rule 80 (eps -> .)
    FLOATNUMBER     reduce using rule 80 (eps -> .)
    TRUE            reduce using rule 80 (eps -> .)
    FALSE           reduce using rule 80 (eps -> .)
    RCB             reduce using rule 80 (eps -> .)
    WHERE           reduce using rule 80 (eps -> .)

    stmtlist                       shift and go to state 161
    eps                            shift and go to state 68

state 160

    (43) elseiflist -> elseiflist ELSEIF LRB exp RRB . cstmt
    (38) cstmt -> . simple
    (39) cstmt -> . IF LRB exp RRB cstmt elseiflist ELSE cstmt
    (40) cstmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt
    (41) cstmt -> . FOR LRB ID IN RRB cstmt
    (42) cstmt -> . WHILE LRB exp LRB cstmt
    (45) simple -> . RETURN exp SEMICOLON
    (46) simple -> . exp SEMICOLON
    (47) simple -> . block
    (48) simple -> . vardec
    (49) simple -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (50) simple -> . PRINT LRB ID RRB SEMICOLON
    (57) exp -> . lvalue ASSIGN exp
    (58) exp -> . exp operator exp
    (59) exp -> . exp relop exp
    (60) exp -> . const
    (61) exp -> . lvalue
    (62) exp -> . ID LRB explist RRB
    (63) exp -> . LRB exp RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (22) block -> . LCB stmtlist RCB
    (6) vardec -> . idlist COLON type SEMICOLON
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (73) const -> . INTEGERNUMBER
    (74) const -> . FLOATNUMBER
    (75) const -> . TRUE
    (76) const -> . FALSE
    (14) idlist -> . iddec
    (15) idlist -> . idlist COMMA iddec
    (12) iddec -> . lvalue
    (13) iddec -> . ID ASSIGN exp

    IF              shift and go to state 163
    FOR             shift and go to state 164
    WHILE           shift and go to state 165
    RETURN          shift and go to state 90
    ON              shift and go to state 93
    PRINT           shift and go to state 94
    ID              shift and go to state 88
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    LCB             shift and go to state 39
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 85
    cstmt                          shift and go to state 162
    simple                         shift and go to state 86
    block                          shift and go to state 91
    vardec                         shift and go to state 92
    lvalue                         shift and go to state 95
    const                          shift and go to state 29
    idlist                         shift and go to state 8
    iddec                          shift and go to state 11

state 161

    (27) case -> WHERE const COLON stmtlist .
    (23) stmtlist -> stmtlist . stmt
    (30) stmt -> . ostmt
    (31) stmt -> . cstmt
    (32) ostmt -> . IF LRB exp RRB simple
    (33) ostmt -> . IF LRB exp RRB ostmt
    (34) ostmt -> . IF LRB exp RRB cstmt elseiflist ELSE ostmt
    (35) ostmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt
    (36) ostmt -> . FOR LRB ID IN RRB ostmt
    (37) ostmt -> . WHILE LRB exp LRB ostmt
    (38) cstmt -> . simple
    (39) cstmt -> . IF LRB exp RRB cstmt elseiflist ELSE cstmt
    (40) cstmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt
    (41) cstmt -> . FOR LRB ID IN RRB cstmt
    (42) cstmt -> . WHILE LRB exp LRB cstmt
    (45) simple -> . RETURN exp SEMICOLON
    (46) simple -> . exp SEMICOLON
    (47) simple -> . block
    (48) simple -> . vardec
    (49) simple -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (50) simple -> . PRINT LRB ID RRB SEMICOLON
    (57) exp -> . lvalue ASSIGN exp
    (58) exp -> . exp operator exp
    (59) exp -> . exp relop exp
    (60) exp -> . const
    (61) exp -> . lvalue
    (62) exp -> . ID LRB explist RRB
    (63) exp -> . LRB exp RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (22) block -> . LCB stmtlist RCB
    (6) vardec -> . idlist COLON type SEMICOLON
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (73) const -> . INTEGERNUMBER
    (74) const -> . FLOATNUMBER
    (75) const -> . TRUE
    (76) const -> . FALSE
    (14) idlist -> . iddec
    (15) idlist -> . idlist COMMA iddec
    (12) iddec -> . lvalue
    (13) iddec -> . ID ASSIGN exp

    RCB             reduce using rule 27 (case -> WHERE const COLON stmtlist .)
    WHERE           reduce using rule 27 (case -> WHERE const COLON stmtlist .)
    IF              shift and go to state 84
    FOR             shift and go to state 87
    WHILE           shift and go to state 89
    RETURN          shift and go to state 90
    ON              shift and go to state 93
    PRINT           shift and go to state 94
    ID              shift and go to state 88
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    LCB             shift and go to state 39
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    const                          shift and go to state 29
    stmt                           shift and go to state 81
    ostmt                          shift and go to state 82
    cstmt                          shift and go to state 83
    exp                            shift and go to state 85
    simple                         shift and go to state 86
    block                          shift and go to state 91
    vardec                         shift and go to state 92
    lvalue                         shift and go to state 95
    idlist                         shift and go to state 8
    iddec                          shift and go to state 11

state 162

    (43) elseiflist -> elseiflist ELSEIF LRB exp RRB cstmt .

    ELSE            reduce using rule 43 (elseiflist -> elseiflist ELSEIF LRB exp RRB cstmt .)
    ELSEIF          reduce using rule 43 (elseiflist -> elseiflist ELSEIF LRB exp RRB cstmt .)


state 163

    (39) cstmt -> IF . LRB exp RRB cstmt elseiflist ELSE cstmt

    LRB             shift and go to state 166


state 164

    (40) cstmt -> FOR . LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt
    (41) cstmt -> FOR . LRB ID IN RRB cstmt

    LRB             shift and go to state 167


state 165

    (42) cstmt -> WHILE . LRB exp LRB cstmt

    LRB             shift and go to state 168


state 166

    (39) cstmt -> IF LRB . exp RRB cstmt elseiflist ELSE cstmt
    (57) exp -> . lvalue ASSIGN exp
    (58) exp -> . exp operator exp
    (59) exp -> . exp relop exp
    (60) exp -> . const
    (61) exp -> . lvalue
    (62) exp -> . ID LRB explist RRB
    (63) exp -> . LRB exp RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (73) const -> . INTEGERNUMBER
    (74) const -> . FLOATNUMBER
    (75) const -> . TRUE
    (76) const -> . FALSE

    ID              shift and go to state 26
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 169
    lvalue                         shift and go to state 28
    const                          shift and go to state 29

state 167

    (40) cstmt -> FOR LRB . exp SEMICOLON exp SEMICOLON exp RRB cstmt
    (41) cstmt -> FOR LRB . ID IN RRB cstmt
    (57) exp -> . lvalue ASSIGN exp
    (58) exp -> . exp operator exp
    (59) exp -> . exp relop exp
    (60) exp -> . const
    (61) exp -> . lvalue
    (62) exp -> . ID LRB explist RRB
    (63) exp -> . LRB exp RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (73) const -> . INTEGERNUMBER
    (74) const -> . FLOATNUMBER
    (75) const -> . TRUE
    (76) const -> . FALSE

    ID              shift and go to state 171
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 170
    lvalue                         shift and go to state 28
    const                          shift and go to state 29

state 168

    (42) cstmt -> WHILE LRB . exp LRB cstmt
    (57) exp -> . lvalue ASSIGN exp
    (58) exp -> . exp operator exp
    (59) exp -> . exp relop exp
    (60) exp -> . const
    (61) exp -> . lvalue
    (62) exp -> . ID LRB explist RRB
    (63) exp -> . LRB exp RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (73) const -> . INTEGERNUMBER
    (74) const -> . FLOATNUMBER
    (75) const -> . TRUE
    (76) const -> . FALSE

    ID              shift and go to state 26
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 172
    lvalue                         shift and go to state 28
    const                          shift and go to state 29

state 169

    (39) cstmt -> IF LRB exp . RRB cstmt elseiflist ELSE cstmt
    (58) exp -> exp . operator exp
    (59) exp -> exp . relop exp
    (66) operator -> . AND
    (67) operator -> . OR
    (68) operator -> . SUM
    (69) operator -> . SUB
    (70) operator -> . MUL
    (71) operator -> . DIV
    (72) operator -> . MOD
    (51) relop -> . GT
    (52) relop -> . GE
    (53) relop -> . LT
    (54) relop -> . LE
    (55) relop -> . EQ
    (56) relop -> . NE

    RRB             shift and go to state 173
    AND             shift and go to state 49
    OR              shift and go to state 50
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 170

    (40) cstmt -> FOR LRB exp . SEMICOLON exp SEMICOLON exp RRB cstmt
    (58) exp -> exp . operator exp
    (59) exp -> exp . relop exp
    (66) operator -> . AND
    (67) operator -> . OR
    (68) operator -> . SUM
    (69) operator -> . SUB
    (70) operator -> . MUL
    (71) operator -> . DIV
    (72) operator -> . MOD
    (51) relop -> . GT
    (52) relop -> . GE
    (53) relop -> . LT
    (54) relop -> . LE
    (55) relop -> . EQ
    (56) relop -> . NE

    SEMICOLON       shift and go to state 174
    AND             shift and go to state 49
    OR              shift and go to state 50
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 171

    (41) cstmt -> FOR LRB ID . IN RRB cstmt
    (62) exp -> ID . LRB explist RRB
    (25) lvalue -> ID .
    (26) lvalue -> ID . LSB exp RSB

    IN              shift and go to state 175
    LRB             shift and go to state 46
    ASSIGN          reduce using rule 25 (lvalue -> ID .)
    SEMICOLON       reduce using rule 25 (lvalue -> ID .)
    AND             reduce using rule 25 (lvalue -> ID .)
    OR              reduce using rule 25 (lvalue -> ID .)
    SUM             reduce using rule 25 (lvalue -> ID .)
    SUB             reduce using rule 25 (lvalue -> ID .)
    MUL             reduce using rule 25 (lvalue -> ID .)
    DIV             reduce using rule 25 (lvalue -> ID .)
    MOD             reduce using rule 25 (lvalue -> ID .)
    GT              reduce using rule 25 (lvalue -> ID .)
    GE              reduce using rule 25 (lvalue -> ID .)
    LT              reduce using rule 25 (lvalue -> ID .)
    LE              reduce using rule 25 (lvalue -> ID .)
    EQ              reduce using rule 25 (lvalue -> ID .)
    NE              reduce using rule 25 (lvalue -> ID .)
    LSB             shift and go to state 18


state 172

    (42) cstmt -> WHILE LRB exp . LRB cstmt
    (58) exp -> exp . operator exp
    (59) exp -> exp . relop exp
    (66) operator -> . AND
    (67) operator -> . OR
    (68) operator -> . SUM
    (69) operator -> . SUB
    (70) operator -> . MUL
    (71) operator -> . DIV
    (72) operator -> . MOD
    (51) relop -> . GT
    (52) relop -> . GE
    (53) relop -> . LT
    (54) relop -> . LE
    (55) relop -> . EQ
    (56) relop -> . NE

    LRB             shift and go to state 176
    AND             shift and go to state 49
    OR              shift and go to state 50
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 173

    (39) cstmt -> IF LRB exp RRB . cstmt elseiflist ELSE cstmt
    (38) cstmt -> . simple
    (39) cstmt -> . IF LRB exp RRB cstmt elseiflist ELSE cstmt
    (40) cstmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt
    (41) cstmt -> . FOR LRB ID IN RRB cstmt
    (42) cstmt -> . WHILE LRB exp LRB cstmt
    (45) simple -> . RETURN exp SEMICOLON
    (46) simple -> . exp SEMICOLON
    (47) simple -> . block
    (48) simple -> . vardec
    (49) simple -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (50) simple -> . PRINT LRB ID RRB SEMICOLON
    (57) exp -> . lvalue ASSIGN exp
    (58) exp -> . exp operator exp
    (59) exp -> . exp relop exp
    (60) exp -> . const
    (61) exp -> . lvalue
    (62) exp -> . ID LRB explist RRB
    (63) exp -> . LRB exp RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (22) block -> . LCB stmtlist RCB
    (6) vardec -> . idlist COLON type SEMICOLON
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (73) const -> . INTEGERNUMBER
    (74) const -> . FLOATNUMBER
    (75) const -> . TRUE
    (76) const -> . FALSE
    (14) idlist -> . iddec
    (15) idlist -> . idlist COMMA iddec
    (12) iddec -> . lvalue
    (13) iddec -> . ID ASSIGN exp

    IF              shift and go to state 163
    FOR             shift and go to state 164
    WHILE           shift and go to state 165
    RETURN          shift and go to state 90
    ON              shift and go to state 93
    PRINT           shift and go to state 94
    ID              shift and go to state 88
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    LCB             shift and go to state 39
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 85
    cstmt                          shift and go to state 177
    simple                         shift and go to state 86
    block                          shift and go to state 91
    vardec                         shift and go to state 92
    lvalue                         shift and go to state 95
    const                          shift and go to state 29
    idlist                         shift and go to state 8
    iddec                          shift and go to state 11

state 174

    (40) cstmt -> FOR LRB exp SEMICOLON . exp SEMICOLON exp RRB cstmt
    (57) exp -> . lvalue ASSIGN exp
    (58) exp -> . exp operator exp
    (59) exp -> . exp relop exp
    (60) exp -> . const
    (61) exp -> . lvalue
    (62) exp -> . ID LRB explist RRB
    (63) exp -> . LRB exp RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (73) const -> . INTEGERNUMBER
    (74) const -> . FLOATNUMBER
    (75) const -> . TRUE
    (76) const -> . FALSE

    ID              shift and go to state 26
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 178
    lvalue                         shift and go to state 28
    const                          shift and go to state 29

state 175

    (41) cstmt -> FOR LRB ID IN . RRB cstmt

    RRB             shift and go to state 179


state 176

    (42) cstmt -> WHILE LRB exp LRB . cstmt
    (38) cstmt -> . simple
    (39) cstmt -> . IF LRB exp RRB cstmt elseiflist ELSE cstmt
    (40) cstmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt
    (41) cstmt -> . FOR LRB ID IN RRB cstmt
    (42) cstmt -> . WHILE LRB exp LRB cstmt
    (45) simple -> . RETURN exp SEMICOLON
    (46) simple -> . exp SEMICOLON
    (47) simple -> . block
    (48) simple -> . vardec
    (49) simple -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (50) simple -> . PRINT LRB ID RRB SEMICOLON
    (57) exp -> . lvalue ASSIGN exp
    (58) exp -> . exp operator exp
    (59) exp -> . exp relop exp
    (60) exp -> . const
    (61) exp -> . lvalue
    (62) exp -> . ID LRB explist RRB
    (63) exp -> . LRB exp RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (22) block -> . LCB stmtlist RCB
    (6) vardec -> . idlist COLON type SEMICOLON
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (73) const -> . INTEGERNUMBER
    (74) const -> . FLOATNUMBER
    (75) const -> . TRUE
    (76) const -> . FALSE
    (14) idlist -> . iddec
    (15) idlist -> . idlist COMMA iddec
    (12) iddec -> . lvalue
    (13) iddec -> . ID ASSIGN exp

    IF              shift and go to state 163
    FOR             shift and go to state 164
    WHILE           shift and go to state 165
    RETURN          shift and go to state 90
    ON              shift and go to state 93
    PRINT           shift and go to state 94
    ID              shift and go to state 88
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    LCB             shift and go to state 39
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 85
    cstmt                          shift and go to state 134
    simple                         shift and go to state 86
    block                          shift and go to state 91
    vardec                         shift and go to state 92
    lvalue                         shift and go to state 95
    const                          shift and go to state 29
    idlist                         shift and go to state 8
    iddec                          shift and go to state 11

state 177

    (39) cstmt -> IF LRB exp RRB cstmt . elseiflist ELSE cstmt
    (43) elseiflist -> . elseiflist ELSEIF LRB exp RRB cstmt
    (44) elseiflist -> . eps
    (80) eps -> .

    ELSE            reduce using rule 80 (eps -> .)
    ELSEIF          reduce using rule 80 (eps -> .)

    elseiflist                     shift and go to state 180
    eps                            shift and go to state 138

state 178

    (40) cstmt -> FOR LRB exp SEMICOLON exp . SEMICOLON exp RRB cstmt
    (58) exp -> exp . operator exp
    (59) exp -> exp . relop exp
    (66) operator -> . AND
    (67) operator -> . OR
    (68) operator -> . SUM
    (69) operator -> . SUB
    (70) operator -> . MUL
    (71) operator -> . DIV
    (72) operator -> . MOD
    (51) relop -> . GT
    (52) relop -> . GE
    (53) relop -> . LT
    (54) relop -> . LE
    (55) relop -> . EQ
    (56) relop -> . NE

    SEMICOLON       shift and go to state 181
    AND             shift and go to state 49
    OR              shift and go to state 50
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 179

    (41) cstmt -> FOR LRB ID IN RRB . cstmt
    (38) cstmt -> . simple
    (39) cstmt -> . IF LRB exp RRB cstmt elseiflist ELSE cstmt
    (40) cstmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt
    (41) cstmt -> . FOR LRB ID IN RRB cstmt
    (42) cstmt -> . WHILE LRB exp LRB cstmt
    (45) simple -> . RETURN exp SEMICOLON
    (46) simple -> . exp SEMICOLON
    (47) simple -> . block
    (48) simple -> . vardec
    (49) simple -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (50) simple -> . PRINT LRB ID RRB SEMICOLON
    (57) exp -> . lvalue ASSIGN exp
    (58) exp -> . exp operator exp
    (59) exp -> . exp relop exp
    (60) exp -> . const
    (61) exp -> . lvalue
    (62) exp -> . ID LRB explist RRB
    (63) exp -> . LRB exp RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (22) block -> . LCB stmtlist RCB
    (6) vardec -> . idlist COLON type SEMICOLON
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (73) const -> . INTEGERNUMBER
    (74) const -> . FLOATNUMBER
    (75) const -> . TRUE
    (76) const -> . FALSE
    (14) idlist -> . iddec
    (15) idlist -> . idlist COMMA iddec
    (12) iddec -> . lvalue
    (13) iddec -> . ID ASSIGN exp

    IF              shift and go to state 163
    FOR             shift and go to state 164
    WHILE           shift and go to state 165
    RETURN          shift and go to state 90
    ON              shift and go to state 93
    PRINT           shift and go to state 94
    ID              shift and go to state 88
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    LCB             shift and go to state 39
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    cstmt                          shift and go to state 141
    simple                         shift and go to state 86
    exp                            shift and go to state 85
    block                          shift and go to state 91
    vardec                         shift and go to state 92
    lvalue                         shift and go to state 95
    const                          shift and go to state 29
    idlist                         shift and go to state 8
    iddec                          shift and go to state 11

state 180

    (39) cstmt -> IF LRB exp RRB cstmt elseiflist . ELSE cstmt
    (43) elseiflist -> elseiflist . ELSEIF LRB exp RRB cstmt

    ELSE            shift and go to state 182
    ELSEIF          shift and go to state 145


state 181

    (40) cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON . exp RRB cstmt
    (57) exp -> . lvalue ASSIGN exp
    (58) exp -> . exp operator exp
    (59) exp -> . exp relop exp
    (60) exp -> . const
    (61) exp -> . lvalue
    (62) exp -> . ID LRB explist RRB
    (63) exp -> . LRB exp RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (73) const -> . INTEGERNUMBER
    (74) const -> . FLOATNUMBER
    (75) const -> . TRUE
    (76) const -> . FALSE

    ID              shift and go to state 26
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 183
    lvalue                         shift and go to state 28
    const                          shift and go to state 29

state 182

    (39) cstmt -> IF LRB exp RRB cstmt elseiflist ELSE . cstmt
    (38) cstmt -> . simple
    (39) cstmt -> . IF LRB exp RRB cstmt elseiflist ELSE cstmt
    (40) cstmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt
    (41) cstmt -> . FOR LRB ID IN RRB cstmt
    (42) cstmt -> . WHILE LRB exp LRB cstmt
    (45) simple -> . RETURN exp SEMICOLON
    (46) simple -> . exp SEMICOLON
    (47) simple -> . block
    (48) simple -> . vardec
    (49) simple -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (50) simple -> . PRINT LRB ID RRB SEMICOLON
    (57) exp -> . lvalue ASSIGN exp
    (58) exp -> . exp operator exp
    (59) exp -> . exp relop exp
    (60) exp -> . const
    (61) exp -> . lvalue
    (62) exp -> . ID LRB explist RRB
    (63) exp -> . LRB exp RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (22) block -> . LCB stmtlist RCB
    (6) vardec -> . idlist COLON type SEMICOLON
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (73) const -> . INTEGERNUMBER
    (74) const -> . FLOATNUMBER
    (75) const -> . TRUE
    (76) const -> . FALSE
    (14) idlist -> . iddec
    (15) idlist -> . idlist COMMA iddec
    (12) iddec -> . lvalue
    (13) iddec -> . ID ASSIGN exp

    IF              shift and go to state 163
    FOR             shift and go to state 164
    WHILE           shift and go to state 165
    RETURN          shift and go to state 90
    ON              shift and go to state 93
    PRINT           shift and go to state 94
    ID              shift and go to state 88
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    LCB             shift and go to state 39
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 85
    cstmt                          shift and go to state 150
    simple                         shift and go to state 86
    block                          shift and go to state 91
    vardec                         shift and go to state 92
    lvalue                         shift and go to state 95
    const                          shift and go to state 29
    idlist                         shift and go to state 8
    iddec                          shift and go to state 11

state 183

    (40) cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp . RRB cstmt
    (58) exp -> exp . operator exp
    (59) exp -> exp . relop exp
    (66) operator -> . AND
    (67) operator -> . OR
    (68) operator -> . SUM
    (69) operator -> . SUB
    (70) operator -> . MUL
    (71) operator -> . DIV
    (72) operator -> . MOD
    (51) relop -> . GT
    (52) relop -> . GE
    (53) relop -> . LT
    (54) relop -> . LE
    (55) relop -> . EQ
    (56) relop -> . NE

    RRB             shift and go to state 184
    AND             shift and go to state 49
    OR              shift and go to state 50
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 184

    (40) cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB . cstmt
    (38) cstmt -> . simple
    (39) cstmt -> . IF LRB exp RRB cstmt elseiflist ELSE cstmt
    (40) cstmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt
    (41) cstmt -> . FOR LRB ID IN RRB cstmt
    (42) cstmt -> . WHILE LRB exp LRB cstmt
    (45) simple -> . RETURN exp SEMICOLON
    (46) simple -> . exp SEMICOLON
    (47) simple -> . block
    (48) simple -> . vardec
    (49) simple -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (50) simple -> . PRINT LRB ID RRB SEMICOLON
    (57) exp -> . lvalue ASSIGN exp
    (58) exp -> . exp operator exp
    (59) exp -> . exp relop exp
    (60) exp -> . const
    (61) exp -> . lvalue
    (62) exp -> . ID LRB explist RRB
    (63) exp -> . LRB exp RRB
    (64) exp -> . SUB exp
    (65) exp -> . NOT exp
    (22) block -> . LCB stmtlist RCB
    (6) vardec -> . idlist COLON type SEMICOLON
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (73) const -> . INTEGERNUMBER
    (74) const -> . FLOATNUMBER
    (75) const -> . TRUE
    (76) const -> . FALSE
    (14) idlist -> . iddec
    (15) idlist -> . idlist COMMA iddec
    (12) iddec -> . lvalue
    (13) iddec -> . ID ASSIGN exp

    IF              shift and go to state 163
    FOR             shift and go to state 164
    WHILE           shift and go to state 165
    RETURN          shift and go to state 90
    ON              shift and go to state 93
    PRINT           shift and go to state 94
    ID              shift and go to state 88
    LRB             shift and go to state 30
    SUB             shift and go to state 31
    NOT             shift and go to state 32
    LCB             shift and go to state 39
    INTEGERNUMBER   shift and go to state 33
    FLOATNUMBER     shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    exp                            shift and go to state 85
    cstmt                          shift and go to state 158
    simple                         shift and go to state 86
    block                          shift and go to state 91
    vardec                         shift and go to state 92
    lvalue                         shift and go to state 95
    const                          shift and go to state 29
    idlist                         shift and go to state 8
    iddec                          shift and go to state 11
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LRB in state 26 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 88 resolved as shift
