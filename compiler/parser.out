Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ERROR

Grammar

Rule 0     S' -> program
Rule 1     program -> declist MAIN LRB RRB block
Rule 2     declist -> declist dec
Rule 3     declist -> eps
Rule 4     dec -> vardec
Rule 5     dec -> funcdec
Rule 6     type -> INTEGER
Rule 7     type -> FLOAT
Rule 8     type -> BOOLEAN
Rule 9     iddec -> lvalue
Rule 10    iddec -> ID ASSIGN exp
Rule 11    idlist -> iddec
Rule 12    idlist -> idlist COMMA iddec
Rule 13    vardec -> idlist COLON type
Rule 14    funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block
Rule 15    funcdec -> FUNCTION ID LRB paramdecs RRB block
Rule 16    paramdecs -> paramdecslist
Rule 17    paramdecs -> eps
Rule 18    paramdecslist -> paramdec
Rule 19    paramdecslist -> paramdecslist COMMA paramdec
Rule 20    paramdec -> ID COLON type
Rule 21    paramdec -> ID LSB RSB COLON type
Rule 22    block -> LCB stmtlist RCB
Rule 23    stmtlist -> stmtlist stmt
Rule 24    stmtlist -> eps
Rule 25    lvalue -> ID
Rule 26    lvalue -> ID LSB exp RSB
Rule 27    case -> WHERE const COLON stmtlist
Rule 28    cases -> cases case
Rule 29    cases -> eps
Rule 30    stmt -> RETURN exp SEMICOLON
Rule 31    stmt -> exp SEMICOLON
Rule 32    stmt -> block
Rule 33    stmt -> vardec
Rule 34    stmt -> WHILE LRB exp LRB stmt
Rule 35    stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON
Rule 36    stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
Rule 37    stmt -> FOR LRB ID IN RRB stmt
Rule 38    stmt -> IF LRB exp RRB stmt elseiflist
Rule 39    stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt
Rule 40    stmt -> PRINT LRB ID RRB SEMICOLON
Rule 41    elseiflist -> elseiflist ELSEIF LRB exp RRB stmt
Rule 42    elseiflist -> eps
Rule 43    relopexp -> exp relop exp
Rule 44    relopexp -> relopexp relop exp
Rule 45    relop -> GT
Rule 46    relop -> GE
Rule 47    relop -> LT
Rule 48    relop -> LE
Rule 49    relop -> EQ
Rule 50    relop -> NE
Rule 51    exp -> lvalue ASSIGN exp
Rule 52    exp -> exp operator exp
Rule 53    exp -> relopexp
Rule 54    exp -> const
Rule 55    exp -> lvalue
Rule 56    exp -> ID LRB explist RRB
Rule 57    exp -> LRB exp RRB
Rule 58    exp -> lvalue LRB RRB
Rule 59    exp -> SUB exp
Rule 60    exp -> NOT exp
Rule 61    operator -> AND
Rule 62    operator -> OR
Rule 63    operator -> SUM
Rule 64    operator -> SUB
Rule 65    operator -> MUL
Rule 66    operator -> DIV
Rule 67    operator -> MOD
Rule 68    const -> INTEGERNUMBER
Rule 69    const -> FLOATNUMBER
Rule 70    const -> TRUE
Rule 71    const -> FALSE
Rule 72    explist -> exp
Rule 73    explist -> explist COMMA exp
Rule 74    eps -> <empty>

Terminals, with rules where they appear

AND                  : 61
ASSIGN               : 10 51
BOOLEAN              : 8
COLON                : 13 14 20 21 27
COMMA                : 12 19 73
DIV                  : 66
ELSE                 : 39
ELSEIF               : 41
EQ                   : 49
ERROR                : 
FALSE                : 71
FLOAT                : 7
FLOATNUMBER          : 69
FOR                  : 36 37
FUNCTION             : 14 15
GE                   : 46
GT                   : 45
ID                   : 10 14 15 20 21 25 26 37 40 56
IF                   : 38 39
IN                   : 37
INTEGER              : 6
INTEGERNUMBER        : 68
LCB                  : 22 35
LE                   : 48
LRB                  : 1 14 15 34 34 35 36 37 38 39 40 41 56 57 58
LSB                  : 21 26
LT                   : 47
MAIN                 : 1
MOD                  : 67
MUL                  : 65
NE                   : 50
NOT                  : 60
ON                   : 35
OR                   : 62
PRINT                : 40
RCB                  : 22 35
RETURN               : 30
RRB                  : 1 14 15 35 36 37 38 39 40 41 56 57 58
RSB                  : 21 26
SEMICOLON            : 30 31 35 36 36 40
SUB                  : 59 64
SUM                  : 63
TRUE                 : 70
WHERE                : 27
WHILE                : 34
error                : 

Nonterminals, with rules where they appear

block                : 1 14 15 32
case                 : 28
cases                : 28 35
const                : 27 54
dec                  : 2
declist              : 1 2
elseiflist           : 38 39 41
eps                  : 3 17 24 29 42
exp                  : 10 26 30 31 34 35 36 36 36 38 39 41 43 43 44 51 52 52 57 59 60 72 73
explist              : 56 73
funcdec              : 5
iddec                : 11 12
idlist               : 12 13
lvalue               : 9 51 55 58
operator             : 52
paramdec             : 18 19
paramdecs            : 14 15
paramdecslist        : 16 19
program              : 0
relop                : 43 44
relopexp             : 44 53
stmt                 : 23 34 36 37 38 39 39 41
stmtlist             : 22 23 27
type                 : 13 14 20 21
vardec               : 4 33

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declist MAIN LRB RRB block
    (2) declist -> . declist dec
    (3) declist -> . eps
    (74) eps -> .

    MAIN            reduce using rule 74 (eps -> .)
    FUNCTION        reduce using rule 74 (eps -> .)
    ID              reduce using rule 74 (eps -> .)

    program                        shift and go to state 1
    declist                        shift and go to state 2
    eps                            shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> declist . MAIN LRB RRB block
    (2) declist -> declist . dec
    (4) dec -> . vardec
    (5) dec -> . funcdec
    (13) vardec -> . idlist COLON type
    (14) funcdec -> . FUNCTION ID LRB paramdecs RRB COLON type block
    (15) funcdec -> . FUNCTION ID LRB paramdecs RRB block
    (11) idlist -> . iddec
    (12) idlist -> . idlist COMMA iddec
    (9) iddec -> . lvalue
    (10) iddec -> . ID ASSIGN exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB

    MAIN            shift and go to state 4
    FUNCTION        shift and go to state 9
    ID              shift and go to state 10

    dec                            shift and go to state 5
    vardec                         shift and go to state 6
    funcdec                        shift and go to state 7
    idlist                         shift and go to state 8
    iddec                          shift and go to state 11
    lvalue                         shift and go to state 12

state 3

    (3) declist -> eps .

    MAIN            reduce using rule 3 (declist -> eps .)
    FUNCTION        reduce using rule 3 (declist -> eps .)
    ID              reduce using rule 3 (declist -> eps .)


state 4

    (1) program -> declist MAIN . LRB RRB block

    LRB             shift and go to state 13


state 5

    (2) declist -> declist dec .

    MAIN            reduce using rule 2 (declist -> declist dec .)
    FUNCTION        reduce using rule 2 (declist -> declist dec .)
    ID              reduce using rule 2 (declist -> declist dec .)


state 6

    (4) dec -> vardec .

    MAIN            reduce using rule 4 (dec -> vardec .)
    FUNCTION        reduce using rule 4 (dec -> vardec .)
    ID              reduce using rule 4 (dec -> vardec .)


state 7

    (5) dec -> funcdec .

    MAIN            reduce using rule 5 (dec -> funcdec .)
    FUNCTION        reduce using rule 5 (dec -> funcdec .)
    ID              reduce using rule 5 (dec -> funcdec .)


state 8

    (13) vardec -> idlist . COLON type
    (12) idlist -> idlist . COMMA iddec

    COLON           shift and go to state 14
    COMMA           shift and go to state 15


state 9

    (14) funcdec -> FUNCTION . ID LRB paramdecs RRB COLON type block
    (15) funcdec -> FUNCTION . ID LRB paramdecs RRB block

    ID              shift and go to state 16


state 10

    (10) iddec -> ID . ASSIGN exp
    (25) lvalue -> ID .
    (26) lvalue -> ID . LSB exp RSB

    ASSIGN          shift and go to state 17
    COLON           reduce using rule 25 (lvalue -> ID .)
    COMMA           reduce using rule 25 (lvalue -> ID .)
    LSB             shift and go to state 18


state 11

    (11) idlist -> iddec .

    COLON           reduce using rule 11 (idlist -> iddec .)
    COMMA           reduce using rule 11 (idlist -> iddec .)


state 12

    (9) iddec -> lvalue .

    COLON           reduce using rule 9 (iddec -> lvalue .)
    COMMA           reduce using rule 9 (iddec -> lvalue .)


state 13

    (1) program -> declist MAIN LRB . RRB block

    RRB             shift and go to state 19


state 14

    (13) vardec -> idlist COLON . type
    (6) type -> . INTEGER
    (7) type -> . FLOAT
    (8) type -> . BOOLEAN

    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22
    BOOLEAN         shift and go to state 23

    type                           shift and go to state 20

state 15

    (12) idlist -> idlist COMMA . iddec
    (9) iddec -> . lvalue
    (10) iddec -> . ID ASSIGN exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 10

    iddec                          shift and go to state 24
    lvalue                         shift and go to state 12

state 16

    (14) funcdec -> FUNCTION ID . LRB paramdecs RRB COLON type block
    (15) funcdec -> FUNCTION ID . LRB paramdecs RRB block

    LRB             shift and go to state 25


state 17

    (10) iddec -> ID ASSIGN . exp
    (51) exp -> . lvalue ASSIGN exp
    (52) exp -> . exp operator exp
    (53) exp -> . relopexp
    (54) exp -> . const
    (55) exp -> . lvalue
    (56) exp -> . ID LRB explist RRB
    (57) exp -> . LRB exp RRB
    (58) exp -> . lvalue LRB RRB
    (59) exp -> . SUB exp
    (60) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (43) relopexp -> . exp relop exp
    (44) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 26
    LRB             shift and go to state 31
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 27
    lvalue                         shift and go to state 28
    relopexp                       shift and go to state 29
    const                          shift and go to state 30

state 18

    (26) lvalue -> ID LSB . exp RSB
    (51) exp -> . lvalue ASSIGN exp
    (52) exp -> . exp operator exp
    (53) exp -> . relopexp
    (54) exp -> . const
    (55) exp -> . lvalue
    (56) exp -> . ID LRB explist RRB
    (57) exp -> . LRB exp RRB
    (58) exp -> . lvalue LRB RRB
    (59) exp -> . SUB exp
    (60) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (43) relopexp -> . exp relop exp
    (44) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 26
    LRB             shift and go to state 31
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 38
    lvalue                         shift and go to state 28
    relopexp                       shift and go to state 29
    const                          shift and go to state 30

state 19

    (1) program -> declist MAIN LRB RRB . block
    (22) block -> . LCB stmtlist RCB

    LCB             shift and go to state 40

    block                          shift and go to state 39

state 20

    (13) vardec -> idlist COLON type .

    MAIN            reduce using rule 13 (vardec -> idlist COLON type .)
    FUNCTION        reduce using rule 13 (vardec -> idlist COLON type .)
    ID              reduce using rule 13 (vardec -> idlist COLON type .)
    RCB             reduce using rule 13 (vardec -> idlist COLON type .)
    RETURN          reduce using rule 13 (vardec -> idlist COLON type .)
    WHILE           reduce using rule 13 (vardec -> idlist COLON type .)
    ON              reduce using rule 13 (vardec -> idlist COLON type .)
    FOR             reduce using rule 13 (vardec -> idlist COLON type .)
    IF              reduce using rule 13 (vardec -> idlist COLON type .)
    PRINT           reduce using rule 13 (vardec -> idlist COLON type .)
    LRB             reduce using rule 13 (vardec -> idlist COLON type .)
    SUB             reduce using rule 13 (vardec -> idlist COLON type .)
    NOT             reduce using rule 13 (vardec -> idlist COLON type .)
    LCB             reduce using rule 13 (vardec -> idlist COLON type .)
    INTEGERNUMBER   reduce using rule 13 (vardec -> idlist COLON type .)
    FLOATNUMBER     reduce using rule 13 (vardec -> idlist COLON type .)
    TRUE            reduce using rule 13 (vardec -> idlist COLON type .)
    FALSE           reduce using rule 13 (vardec -> idlist COLON type .)
    ELSE            reduce using rule 13 (vardec -> idlist COLON type .)
    ELSEIF          reduce using rule 13 (vardec -> idlist COLON type .)
    WHERE           reduce using rule 13 (vardec -> idlist COLON type .)


state 21

    (6) type -> INTEGER .

    MAIN            reduce using rule 6 (type -> INTEGER .)
    FUNCTION        reduce using rule 6 (type -> INTEGER .)
    ID              reduce using rule 6 (type -> INTEGER .)
    RCB             reduce using rule 6 (type -> INTEGER .)
    RETURN          reduce using rule 6 (type -> INTEGER .)
    WHILE           reduce using rule 6 (type -> INTEGER .)
    ON              reduce using rule 6 (type -> INTEGER .)
    FOR             reduce using rule 6 (type -> INTEGER .)
    IF              reduce using rule 6 (type -> INTEGER .)
    PRINT           reduce using rule 6 (type -> INTEGER .)
    LRB             reduce using rule 6 (type -> INTEGER .)
    SUB             reduce using rule 6 (type -> INTEGER .)
    NOT             reduce using rule 6 (type -> INTEGER .)
    LCB             reduce using rule 6 (type -> INTEGER .)
    INTEGERNUMBER   reduce using rule 6 (type -> INTEGER .)
    FLOATNUMBER     reduce using rule 6 (type -> INTEGER .)
    TRUE            reduce using rule 6 (type -> INTEGER .)
    FALSE           reduce using rule 6 (type -> INTEGER .)
    ELSE            reduce using rule 6 (type -> INTEGER .)
    ELSEIF          reduce using rule 6 (type -> INTEGER .)
    WHERE           reduce using rule 6 (type -> INTEGER .)
    COMMA           reduce using rule 6 (type -> INTEGER .)
    RRB             reduce using rule 6 (type -> INTEGER .)


state 22

    (7) type -> FLOAT .

    MAIN            reduce using rule 7 (type -> FLOAT .)
    FUNCTION        reduce using rule 7 (type -> FLOAT .)
    ID              reduce using rule 7 (type -> FLOAT .)
    RCB             reduce using rule 7 (type -> FLOAT .)
    RETURN          reduce using rule 7 (type -> FLOAT .)
    WHILE           reduce using rule 7 (type -> FLOAT .)
    ON              reduce using rule 7 (type -> FLOAT .)
    FOR             reduce using rule 7 (type -> FLOAT .)
    IF              reduce using rule 7 (type -> FLOAT .)
    PRINT           reduce using rule 7 (type -> FLOAT .)
    LRB             reduce using rule 7 (type -> FLOAT .)
    SUB             reduce using rule 7 (type -> FLOAT .)
    NOT             reduce using rule 7 (type -> FLOAT .)
    LCB             reduce using rule 7 (type -> FLOAT .)
    INTEGERNUMBER   reduce using rule 7 (type -> FLOAT .)
    FLOATNUMBER     reduce using rule 7 (type -> FLOAT .)
    TRUE            reduce using rule 7 (type -> FLOAT .)
    FALSE           reduce using rule 7 (type -> FLOAT .)
    ELSE            reduce using rule 7 (type -> FLOAT .)
    ELSEIF          reduce using rule 7 (type -> FLOAT .)
    WHERE           reduce using rule 7 (type -> FLOAT .)
    COMMA           reduce using rule 7 (type -> FLOAT .)
    RRB             reduce using rule 7 (type -> FLOAT .)


state 23

    (8) type -> BOOLEAN .

    MAIN            reduce using rule 8 (type -> BOOLEAN .)
    FUNCTION        reduce using rule 8 (type -> BOOLEAN .)
    ID              reduce using rule 8 (type -> BOOLEAN .)
    RCB             reduce using rule 8 (type -> BOOLEAN .)
    RETURN          reduce using rule 8 (type -> BOOLEAN .)
    WHILE           reduce using rule 8 (type -> BOOLEAN .)
    ON              reduce using rule 8 (type -> BOOLEAN .)
    FOR             reduce using rule 8 (type -> BOOLEAN .)
    IF              reduce using rule 8 (type -> BOOLEAN .)
    PRINT           reduce using rule 8 (type -> BOOLEAN .)
    LRB             reduce using rule 8 (type -> BOOLEAN .)
    SUB             reduce using rule 8 (type -> BOOLEAN .)
    NOT             reduce using rule 8 (type -> BOOLEAN .)
    LCB             reduce using rule 8 (type -> BOOLEAN .)
    INTEGERNUMBER   reduce using rule 8 (type -> BOOLEAN .)
    FLOATNUMBER     reduce using rule 8 (type -> BOOLEAN .)
    TRUE            reduce using rule 8 (type -> BOOLEAN .)
    FALSE           reduce using rule 8 (type -> BOOLEAN .)
    ELSE            reduce using rule 8 (type -> BOOLEAN .)
    ELSEIF          reduce using rule 8 (type -> BOOLEAN .)
    WHERE           reduce using rule 8 (type -> BOOLEAN .)
    COMMA           reduce using rule 8 (type -> BOOLEAN .)
    RRB             reduce using rule 8 (type -> BOOLEAN .)


state 24

    (12) idlist -> idlist COMMA iddec .

    COLON           reduce using rule 12 (idlist -> idlist COMMA iddec .)
    COMMA           reduce using rule 12 (idlist -> idlist COMMA iddec .)


state 25

    (14) funcdec -> FUNCTION ID LRB . paramdecs RRB COLON type block
    (15) funcdec -> FUNCTION ID LRB . paramdecs RRB block
    (16) paramdecs -> . paramdecslist
    (17) paramdecs -> . eps
    (18) paramdecslist -> . paramdec
    (19) paramdecslist -> . paramdecslist COMMA paramdec
    (74) eps -> .
    (20) paramdec -> . ID COLON type
    (21) paramdec -> . ID LSB RSB COLON type

    RRB             reduce using rule 74 (eps -> .)
    ID              shift and go to state 41

    paramdecs                      shift and go to state 42
    paramdecslist                  shift and go to state 43
    eps                            shift and go to state 44
    paramdec                       shift and go to state 45

state 26

    (56) exp -> ID . LRB explist RRB
    (25) lvalue -> ID .
    (26) lvalue -> ID . LSB exp RSB

  ! shift/reduce conflict for LRB resolved as shift
    LRB             shift and go to state 46
    ASSIGN          reduce using rule 25 (lvalue -> ID .)
    AND             reduce using rule 25 (lvalue -> ID .)
    OR              reduce using rule 25 (lvalue -> ID .)
    SUM             reduce using rule 25 (lvalue -> ID .)
    SUB             reduce using rule 25 (lvalue -> ID .)
    MUL             reduce using rule 25 (lvalue -> ID .)
    DIV             reduce using rule 25 (lvalue -> ID .)
    MOD             reduce using rule 25 (lvalue -> ID .)
    GT              reduce using rule 25 (lvalue -> ID .)
    GE              reduce using rule 25 (lvalue -> ID .)
    LT              reduce using rule 25 (lvalue -> ID .)
    LE              reduce using rule 25 (lvalue -> ID .)
    EQ              reduce using rule 25 (lvalue -> ID .)
    NE              reduce using rule 25 (lvalue -> ID .)
    COLON           reduce using rule 25 (lvalue -> ID .)
    COMMA           reduce using rule 25 (lvalue -> ID .)
    RSB             reduce using rule 25 (lvalue -> ID .)
    RRB             reduce using rule 25 (lvalue -> ID .)
    SEMICOLON       reduce using rule 25 (lvalue -> ID .)
    LSB             shift and go to state 18

  ! LRB             [ reduce using rule 25 (lvalue -> ID .) ]


state 27

    (10) iddec -> ID ASSIGN exp .
    (52) exp -> exp . operator exp
    (43) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (45) relop -> . GT
    (46) relop -> . GE
    (47) relop -> . LT
    (48) relop -> . LE
    (49) relop -> . EQ
    (50) relop -> . NE

    COLON           reduce using rule 10 (iddec -> ID ASSIGN exp .)
    COMMA           reduce using rule 10 (iddec -> ID ASSIGN exp .)
    AND             shift and go to state 49
    OR              shift and go to state 50
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 28

    (51) exp -> lvalue . ASSIGN exp
    (55) exp -> lvalue .
    (58) exp -> lvalue . LRB RRB

  ! shift/reduce conflict for LRB resolved as shift
    ASSIGN          shift and go to state 62
    AND             reduce using rule 55 (exp -> lvalue .)
    OR              reduce using rule 55 (exp -> lvalue .)
    SUM             reduce using rule 55 (exp -> lvalue .)
    SUB             reduce using rule 55 (exp -> lvalue .)
    MUL             reduce using rule 55 (exp -> lvalue .)
    DIV             reduce using rule 55 (exp -> lvalue .)
    MOD             reduce using rule 55 (exp -> lvalue .)
    GT              reduce using rule 55 (exp -> lvalue .)
    GE              reduce using rule 55 (exp -> lvalue .)
    LT              reduce using rule 55 (exp -> lvalue .)
    LE              reduce using rule 55 (exp -> lvalue .)
    EQ              reduce using rule 55 (exp -> lvalue .)
    NE              reduce using rule 55 (exp -> lvalue .)
    COLON           reduce using rule 55 (exp -> lvalue .)
    COMMA           reduce using rule 55 (exp -> lvalue .)
    RSB             reduce using rule 55 (exp -> lvalue .)
    RRB             reduce using rule 55 (exp -> lvalue .)
    SEMICOLON       reduce using rule 55 (exp -> lvalue .)
    LRB             shift and go to state 63

  ! LRB             [ reduce using rule 55 (exp -> lvalue .) ]


state 29

    (53) exp -> relopexp .
    (44) relopexp -> relopexp . relop exp
    (45) relop -> . GT
    (46) relop -> . GE
    (47) relop -> . LT
    (48) relop -> . LE
    (49) relop -> . EQ
    (50) relop -> . NE

  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    AND             reduce using rule 53 (exp -> relopexp .)
    OR              reduce using rule 53 (exp -> relopexp .)
    SUM             reduce using rule 53 (exp -> relopexp .)
    SUB             reduce using rule 53 (exp -> relopexp .)
    MUL             reduce using rule 53 (exp -> relopexp .)
    DIV             reduce using rule 53 (exp -> relopexp .)
    MOD             reduce using rule 53 (exp -> relopexp .)
    COLON           reduce using rule 53 (exp -> relopexp .)
    COMMA           reduce using rule 53 (exp -> relopexp .)
    RSB             reduce using rule 53 (exp -> relopexp .)
    RRB             reduce using rule 53 (exp -> relopexp .)
    SEMICOLON       reduce using rule 53 (exp -> relopexp .)
    LRB             reduce using rule 53 (exp -> relopexp .)
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

  ! GT              [ reduce using rule 53 (exp -> relopexp .) ]
  ! GE              [ reduce using rule 53 (exp -> relopexp .) ]
  ! LT              [ reduce using rule 53 (exp -> relopexp .) ]
  ! LE              [ reduce using rule 53 (exp -> relopexp .) ]
  ! EQ              [ reduce using rule 53 (exp -> relopexp .) ]
  ! NE              [ reduce using rule 53 (exp -> relopexp .) ]

    relop                          shift and go to state 64

state 30

    (54) exp -> const .

    AND             reduce using rule 54 (exp -> const .)
    OR              reduce using rule 54 (exp -> const .)
    SUM             reduce using rule 54 (exp -> const .)
    SUB             reduce using rule 54 (exp -> const .)
    MUL             reduce using rule 54 (exp -> const .)
    DIV             reduce using rule 54 (exp -> const .)
    MOD             reduce using rule 54 (exp -> const .)
    GT              reduce using rule 54 (exp -> const .)
    GE              reduce using rule 54 (exp -> const .)
    LT              reduce using rule 54 (exp -> const .)
    LE              reduce using rule 54 (exp -> const .)
    EQ              reduce using rule 54 (exp -> const .)
    NE              reduce using rule 54 (exp -> const .)
    COLON           reduce using rule 54 (exp -> const .)
    COMMA           reduce using rule 54 (exp -> const .)
    RSB             reduce using rule 54 (exp -> const .)
    RRB             reduce using rule 54 (exp -> const .)
    SEMICOLON       reduce using rule 54 (exp -> const .)
    LRB             reduce using rule 54 (exp -> const .)


state 31

    (57) exp -> LRB . exp RRB
    (51) exp -> . lvalue ASSIGN exp
    (52) exp -> . exp operator exp
    (53) exp -> . relopexp
    (54) exp -> . const
    (55) exp -> . lvalue
    (56) exp -> . ID LRB explist RRB
    (57) exp -> . LRB exp RRB
    (58) exp -> . lvalue LRB RRB
    (59) exp -> . SUB exp
    (60) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (43) relopexp -> . exp relop exp
    (44) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 26
    LRB             shift and go to state 31
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 65
    lvalue                         shift and go to state 28
    relopexp                       shift and go to state 29
    const                          shift and go to state 30

state 32

    (59) exp -> SUB . exp
    (51) exp -> . lvalue ASSIGN exp
    (52) exp -> . exp operator exp
    (53) exp -> . relopexp
    (54) exp -> . const
    (55) exp -> . lvalue
    (56) exp -> . ID LRB explist RRB
    (57) exp -> . LRB exp RRB
    (58) exp -> . lvalue LRB RRB
    (59) exp -> . SUB exp
    (60) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (43) relopexp -> . exp relop exp
    (44) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 26
    LRB             shift and go to state 31
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 66
    lvalue                         shift and go to state 28
    relopexp                       shift and go to state 29
    const                          shift and go to state 30

state 33

    (60) exp -> NOT . exp
    (51) exp -> . lvalue ASSIGN exp
    (52) exp -> . exp operator exp
    (53) exp -> . relopexp
    (54) exp -> . const
    (55) exp -> . lvalue
    (56) exp -> . ID LRB explist RRB
    (57) exp -> . LRB exp RRB
    (58) exp -> . lvalue LRB RRB
    (59) exp -> . SUB exp
    (60) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (43) relopexp -> . exp relop exp
    (44) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 26
    LRB             shift and go to state 31
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 67
    lvalue                         shift and go to state 28
    relopexp                       shift and go to state 29
    const                          shift and go to state 30

state 34

    (68) const -> INTEGERNUMBER .

    AND             reduce using rule 68 (const -> INTEGERNUMBER .)
    OR              reduce using rule 68 (const -> INTEGERNUMBER .)
    SUM             reduce using rule 68 (const -> INTEGERNUMBER .)
    SUB             reduce using rule 68 (const -> INTEGERNUMBER .)
    MUL             reduce using rule 68 (const -> INTEGERNUMBER .)
    DIV             reduce using rule 68 (const -> INTEGERNUMBER .)
    MOD             reduce using rule 68 (const -> INTEGERNUMBER .)
    GT              reduce using rule 68 (const -> INTEGERNUMBER .)
    GE              reduce using rule 68 (const -> INTEGERNUMBER .)
    LT              reduce using rule 68 (const -> INTEGERNUMBER .)
    LE              reduce using rule 68 (const -> INTEGERNUMBER .)
    EQ              reduce using rule 68 (const -> INTEGERNUMBER .)
    NE              reduce using rule 68 (const -> INTEGERNUMBER .)
    COLON           reduce using rule 68 (const -> INTEGERNUMBER .)
    COMMA           reduce using rule 68 (const -> INTEGERNUMBER .)
    RSB             reduce using rule 68 (const -> INTEGERNUMBER .)
    RRB             reduce using rule 68 (const -> INTEGERNUMBER .)
    SEMICOLON       reduce using rule 68 (const -> INTEGERNUMBER .)
    LRB             reduce using rule 68 (const -> INTEGERNUMBER .)


state 35

    (69) const -> FLOATNUMBER .

    AND             reduce using rule 69 (const -> FLOATNUMBER .)
    OR              reduce using rule 69 (const -> FLOATNUMBER .)
    SUM             reduce using rule 69 (const -> FLOATNUMBER .)
    SUB             reduce using rule 69 (const -> FLOATNUMBER .)
    MUL             reduce using rule 69 (const -> FLOATNUMBER .)
    DIV             reduce using rule 69 (const -> FLOATNUMBER .)
    MOD             reduce using rule 69 (const -> FLOATNUMBER .)
    GT              reduce using rule 69 (const -> FLOATNUMBER .)
    GE              reduce using rule 69 (const -> FLOATNUMBER .)
    LT              reduce using rule 69 (const -> FLOATNUMBER .)
    LE              reduce using rule 69 (const -> FLOATNUMBER .)
    EQ              reduce using rule 69 (const -> FLOATNUMBER .)
    NE              reduce using rule 69 (const -> FLOATNUMBER .)
    COLON           reduce using rule 69 (const -> FLOATNUMBER .)
    COMMA           reduce using rule 69 (const -> FLOATNUMBER .)
    RSB             reduce using rule 69 (const -> FLOATNUMBER .)
    RRB             reduce using rule 69 (const -> FLOATNUMBER .)
    SEMICOLON       reduce using rule 69 (const -> FLOATNUMBER .)
    LRB             reduce using rule 69 (const -> FLOATNUMBER .)


state 36

    (70) const -> TRUE .

    AND             reduce using rule 70 (const -> TRUE .)
    OR              reduce using rule 70 (const -> TRUE .)
    SUM             reduce using rule 70 (const -> TRUE .)
    SUB             reduce using rule 70 (const -> TRUE .)
    MUL             reduce using rule 70 (const -> TRUE .)
    DIV             reduce using rule 70 (const -> TRUE .)
    MOD             reduce using rule 70 (const -> TRUE .)
    GT              reduce using rule 70 (const -> TRUE .)
    GE              reduce using rule 70 (const -> TRUE .)
    LT              reduce using rule 70 (const -> TRUE .)
    LE              reduce using rule 70 (const -> TRUE .)
    EQ              reduce using rule 70 (const -> TRUE .)
    NE              reduce using rule 70 (const -> TRUE .)
    COLON           reduce using rule 70 (const -> TRUE .)
    COMMA           reduce using rule 70 (const -> TRUE .)
    RSB             reduce using rule 70 (const -> TRUE .)
    RRB             reduce using rule 70 (const -> TRUE .)
    SEMICOLON       reduce using rule 70 (const -> TRUE .)
    LRB             reduce using rule 70 (const -> TRUE .)


state 37

    (71) const -> FALSE .

    AND             reduce using rule 71 (const -> FALSE .)
    OR              reduce using rule 71 (const -> FALSE .)
    SUM             reduce using rule 71 (const -> FALSE .)
    SUB             reduce using rule 71 (const -> FALSE .)
    MUL             reduce using rule 71 (const -> FALSE .)
    DIV             reduce using rule 71 (const -> FALSE .)
    MOD             reduce using rule 71 (const -> FALSE .)
    GT              reduce using rule 71 (const -> FALSE .)
    GE              reduce using rule 71 (const -> FALSE .)
    LT              reduce using rule 71 (const -> FALSE .)
    LE              reduce using rule 71 (const -> FALSE .)
    EQ              reduce using rule 71 (const -> FALSE .)
    NE              reduce using rule 71 (const -> FALSE .)
    COLON           reduce using rule 71 (const -> FALSE .)
    COMMA           reduce using rule 71 (const -> FALSE .)
    RSB             reduce using rule 71 (const -> FALSE .)
    RRB             reduce using rule 71 (const -> FALSE .)
    SEMICOLON       reduce using rule 71 (const -> FALSE .)
    LRB             reduce using rule 71 (const -> FALSE .)


state 38

    (26) lvalue -> ID LSB exp . RSB
    (52) exp -> exp . operator exp
    (43) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (45) relop -> . GT
    (46) relop -> . GE
    (47) relop -> . LT
    (48) relop -> . LE
    (49) relop -> . EQ
    (50) relop -> . NE

    RSB             shift and go to state 68
    AND             shift and go to state 49
    OR              shift and go to state 50
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 39

    (1) program -> declist MAIN LRB RRB block .

    $end            reduce using rule 1 (program -> declist MAIN LRB RRB block .)


state 40

    (22) block -> LCB . stmtlist RCB
    (23) stmtlist -> . stmtlist stmt
    (24) stmtlist -> . eps
    (74) eps -> .

    RCB             reduce using rule 74 (eps -> .)
    RETURN          reduce using rule 74 (eps -> .)
    WHILE           reduce using rule 74 (eps -> .)
    ON              reduce using rule 74 (eps -> .)
    FOR             reduce using rule 74 (eps -> .)
    IF              reduce using rule 74 (eps -> .)
    PRINT           reduce using rule 74 (eps -> .)
    ID              reduce using rule 74 (eps -> .)
    LRB             reduce using rule 74 (eps -> .)
    SUB             reduce using rule 74 (eps -> .)
    NOT             reduce using rule 74 (eps -> .)
    LCB             reduce using rule 74 (eps -> .)
    INTEGERNUMBER   reduce using rule 74 (eps -> .)
    FLOATNUMBER     reduce using rule 74 (eps -> .)
    TRUE            reduce using rule 74 (eps -> .)
    FALSE           reduce using rule 74 (eps -> .)

    stmtlist                       shift and go to state 69
    eps                            shift and go to state 70

state 41

    (20) paramdec -> ID . COLON type
    (21) paramdec -> ID . LSB RSB COLON type

    COLON           shift and go to state 71
    LSB             shift and go to state 72


state 42

    (14) funcdec -> FUNCTION ID LRB paramdecs . RRB COLON type block
    (15) funcdec -> FUNCTION ID LRB paramdecs . RRB block

    RRB             shift and go to state 73


state 43

    (16) paramdecs -> paramdecslist .
    (19) paramdecslist -> paramdecslist . COMMA paramdec

    RRB             reduce using rule 16 (paramdecs -> paramdecslist .)
    COMMA           shift and go to state 74


state 44

    (17) paramdecs -> eps .

    RRB             reduce using rule 17 (paramdecs -> eps .)


state 45

    (18) paramdecslist -> paramdec .

    COMMA           reduce using rule 18 (paramdecslist -> paramdec .)
    RRB             reduce using rule 18 (paramdecslist -> paramdec .)


state 46

    (56) exp -> ID LRB . explist RRB
    (72) explist -> . exp
    (73) explist -> . explist COMMA exp
    (51) exp -> . lvalue ASSIGN exp
    (52) exp -> . exp operator exp
    (53) exp -> . relopexp
    (54) exp -> . const
    (55) exp -> . lvalue
    (56) exp -> . ID LRB explist RRB
    (57) exp -> . LRB exp RRB
    (58) exp -> . lvalue LRB RRB
    (59) exp -> . SUB exp
    (60) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (43) relopexp -> . exp relop exp
    (44) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 26
    LRB             shift and go to state 31
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    explist                        shift and go to state 75
    exp                            shift and go to state 76
    lvalue                         shift and go to state 28
    relopexp                       shift and go to state 29
    const                          shift and go to state 30

state 47

    (52) exp -> exp operator . exp
    (51) exp -> . lvalue ASSIGN exp
    (52) exp -> . exp operator exp
    (53) exp -> . relopexp
    (54) exp -> . const
    (55) exp -> . lvalue
    (56) exp -> . ID LRB explist RRB
    (57) exp -> . LRB exp RRB
    (58) exp -> . lvalue LRB RRB
    (59) exp -> . SUB exp
    (60) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (43) relopexp -> . exp relop exp
    (44) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 26
    LRB             shift and go to state 31
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 77
    lvalue                         shift and go to state 28
    relopexp                       shift and go to state 29
    const                          shift and go to state 30

state 48

    (43) relopexp -> exp relop . exp
    (51) exp -> . lvalue ASSIGN exp
    (52) exp -> . exp operator exp
    (53) exp -> . relopexp
    (54) exp -> . const
    (55) exp -> . lvalue
    (56) exp -> . ID LRB explist RRB
    (57) exp -> . LRB exp RRB
    (58) exp -> . lvalue LRB RRB
    (59) exp -> . SUB exp
    (60) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (43) relopexp -> . exp relop exp
    (44) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 26
    LRB             shift and go to state 31
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 78
    lvalue                         shift and go to state 28
    relopexp                       shift and go to state 29
    const                          shift and go to state 30

state 49

    (61) operator -> AND .

    ID              reduce using rule 61 (operator -> AND .)
    LRB             reduce using rule 61 (operator -> AND .)
    SUB             reduce using rule 61 (operator -> AND .)
    NOT             reduce using rule 61 (operator -> AND .)
    INTEGERNUMBER   reduce using rule 61 (operator -> AND .)
    FLOATNUMBER     reduce using rule 61 (operator -> AND .)
    TRUE            reduce using rule 61 (operator -> AND .)
    FALSE           reduce using rule 61 (operator -> AND .)


state 50

    (62) operator -> OR .

    ID              reduce using rule 62 (operator -> OR .)
    LRB             reduce using rule 62 (operator -> OR .)
    SUB             reduce using rule 62 (operator -> OR .)
    NOT             reduce using rule 62 (operator -> OR .)
    INTEGERNUMBER   reduce using rule 62 (operator -> OR .)
    FLOATNUMBER     reduce using rule 62 (operator -> OR .)
    TRUE            reduce using rule 62 (operator -> OR .)
    FALSE           reduce using rule 62 (operator -> OR .)


state 51

    (63) operator -> SUM .

    ID              reduce using rule 63 (operator -> SUM .)
    LRB             reduce using rule 63 (operator -> SUM .)
    SUB             reduce using rule 63 (operator -> SUM .)
    NOT             reduce using rule 63 (operator -> SUM .)
    INTEGERNUMBER   reduce using rule 63 (operator -> SUM .)
    FLOATNUMBER     reduce using rule 63 (operator -> SUM .)
    TRUE            reduce using rule 63 (operator -> SUM .)
    FALSE           reduce using rule 63 (operator -> SUM .)


state 52

    (64) operator -> SUB .

    ID              reduce using rule 64 (operator -> SUB .)
    LRB             reduce using rule 64 (operator -> SUB .)
    SUB             reduce using rule 64 (operator -> SUB .)
    NOT             reduce using rule 64 (operator -> SUB .)
    INTEGERNUMBER   reduce using rule 64 (operator -> SUB .)
    FLOATNUMBER     reduce using rule 64 (operator -> SUB .)
    TRUE            reduce using rule 64 (operator -> SUB .)
    FALSE           reduce using rule 64 (operator -> SUB .)


state 53

    (65) operator -> MUL .

    ID              reduce using rule 65 (operator -> MUL .)
    LRB             reduce using rule 65 (operator -> MUL .)
    SUB             reduce using rule 65 (operator -> MUL .)
    NOT             reduce using rule 65 (operator -> MUL .)
    INTEGERNUMBER   reduce using rule 65 (operator -> MUL .)
    FLOATNUMBER     reduce using rule 65 (operator -> MUL .)
    TRUE            reduce using rule 65 (operator -> MUL .)
    FALSE           reduce using rule 65 (operator -> MUL .)


state 54

    (66) operator -> DIV .

    ID              reduce using rule 66 (operator -> DIV .)
    LRB             reduce using rule 66 (operator -> DIV .)
    SUB             reduce using rule 66 (operator -> DIV .)
    NOT             reduce using rule 66 (operator -> DIV .)
    INTEGERNUMBER   reduce using rule 66 (operator -> DIV .)
    FLOATNUMBER     reduce using rule 66 (operator -> DIV .)
    TRUE            reduce using rule 66 (operator -> DIV .)
    FALSE           reduce using rule 66 (operator -> DIV .)


state 55

    (67) operator -> MOD .

    ID              reduce using rule 67 (operator -> MOD .)
    LRB             reduce using rule 67 (operator -> MOD .)
    SUB             reduce using rule 67 (operator -> MOD .)
    NOT             reduce using rule 67 (operator -> MOD .)
    INTEGERNUMBER   reduce using rule 67 (operator -> MOD .)
    FLOATNUMBER     reduce using rule 67 (operator -> MOD .)
    TRUE            reduce using rule 67 (operator -> MOD .)
    FALSE           reduce using rule 67 (operator -> MOD .)


state 56

    (45) relop -> GT .

    ID              reduce using rule 45 (relop -> GT .)
    LRB             reduce using rule 45 (relop -> GT .)
    SUB             reduce using rule 45 (relop -> GT .)
    NOT             reduce using rule 45 (relop -> GT .)
    INTEGERNUMBER   reduce using rule 45 (relop -> GT .)
    FLOATNUMBER     reduce using rule 45 (relop -> GT .)
    TRUE            reduce using rule 45 (relop -> GT .)
    FALSE           reduce using rule 45 (relop -> GT .)


state 57

    (46) relop -> GE .

    ID              reduce using rule 46 (relop -> GE .)
    LRB             reduce using rule 46 (relop -> GE .)
    SUB             reduce using rule 46 (relop -> GE .)
    NOT             reduce using rule 46 (relop -> GE .)
    INTEGERNUMBER   reduce using rule 46 (relop -> GE .)
    FLOATNUMBER     reduce using rule 46 (relop -> GE .)
    TRUE            reduce using rule 46 (relop -> GE .)
    FALSE           reduce using rule 46 (relop -> GE .)


state 58

    (47) relop -> LT .

    ID              reduce using rule 47 (relop -> LT .)
    LRB             reduce using rule 47 (relop -> LT .)
    SUB             reduce using rule 47 (relop -> LT .)
    NOT             reduce using rule 47 (relop -> LT .)
    INTEGERNUMBER   reduce using rule 47 (relop -> LT .)
    FLOATNUMBER     reduce using rule 47 (relop -> LT .)
    TRUE            reduce using rule 47 (relop -> LT .)
    FALSE           reduce using rule 47 (relop -> LT .)


state 59

    (48) relop -> LE .

    ID              reduce using rule 48 (relop -> LE .)
    LRB             reduce using rule 48 (relop -> LE .)
    SUB             reduce using rule 48 (relop -> LE .)
    NOT             reduce using rule 48 (relop -> LE .)
    INTEGERNUMBER   reduce using rule 48 (relop -> LE .)
    FLOATNUMBER     reduce using rule 48 (relop -> LE .)
    TRUE            reduce using rule 48 (relop -> LE .)
    FALSE           reduce using rule 48 (relop -> LE .)


state 60

    (49) relop -> EQ .

    ID              reduce using rule 49 (relop -> EQ .)
    LRB             reduce using rule 49 (relop -> EQ .)
    SUB             reduce using rule 49 (relop -> EQ .)
    NOT             reduce using rule 49 (relop -> EQ .)
    INTEGERNUMBER   reduce using rule 49 (relop -> EQ .)
    FLOATNUMBER     reduce using rule 49 (relop -> EQ .)
    TRUE            reduce using rule 49 (relop -> EQ .)
    FALSE           reduce using rule 49 (relop -> EQ .)


state 61

    (50) relop -> NE .

    ID              reduce using rule 50 (relop -> NE .)
    LRB             reduce using rule 50 (relop -> NE .)
    SUB             reduce using rule 50 (relop -> NE .)
    NOT             reduce using rule 50 (relop -> NE .)
    INTEGERNUMBER   reduce using rule 50 (relop -> NE .)
    FLOATNUMBER     reduce using rule 50 (relop -> NE .)
    TRUE            reduce using rule 50 (relop -> NE .)
    FALSE           reduce using rule 50 (relop -> NE .)


state 62

    (51) exp -> lvalue ASSIGN . exp
    (51) exp -> . lvalue ASSIGN exp
    (52) exp -> . exp operator exp
    (53) exp -> . relopexp
    (54) exp -> . const
    (55) exp -> . lvalue
    (56) exp -> . ID LRB explist RRB
    (57) exp -> . LRB exp RRB
    (58) exp -> . lvalue LRB RRB
    (59) exp -> . SUB exp
    (60) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (43) relopexp -> . exp relop exp
    (44) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 26
    LRB             shift and go to state 31
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    lvalue                         shift and go to state 28
    exp                            shift and go to state 79
    relopexp                       shift and go to state 29
    const                          shift and go to state 30

state 63

    (58) exp -> lvalue LRB . RRB

    RRB             shift and go to state 80


state 64

    (44) relopexp -> relopexp relop . exp
    (51) exp -> . lvalue ASSIGN exp
    (52) exp -> . exp operator exp
    (53) exp -> . relopexp
    (54) exp -> . const
    (55) exp -> . lvalue
    (56) exp -> . ID LRB explist RRB
    (57) exp -> . LRB exp RRB
    (58) exp -> . lvalue LRB RRB
    (59) exp -> . SUB exp
    (60) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (43) relopexp -> . exp relop exp
    (44) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 26
    LRB             shift and go to state 31
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    relopexp                       shift and go to state 29
    exp                            shift and go to state 81
    lvalue                         shift and go to state 28
    const                          shift and go to state 30

state 65

    (57) exp -> LRB exp . RRB
    (52) exp -> exp . operator exp
    (43) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (45) relop -> . GT
    (46) relop -> . GE
    (47) relop -> . LT
    (48) relop -> . LE
    (49) relop -> . EQ
    (50) relop -> . NE

    RRB             shift and go to state 82
    AND             shift and go to state 49
    OR              shift and go to state 50
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 66

    (59) exp -> SUB exp .
    (52) exp -> exp . operator exp
    (43) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (45) relop -> . GT
    (46) relop -> . GE
    (47) relop -> . LT
    (48) relop -> . LE
    (49) relop -> . EQ
    (50) relop -> . NE

    AND             reduce using rule 59 (exp -> SUB exp .)
    OR              reduce using rule 59 (exp -> SUB exp .)
    SUM             reduce using rule 59 (exp -> SUB exp .)
    SUB             reduce using rule 59 (exp -> SUB exp .)
    GT              reduce using rule 59 (exp -> SUB exp .)
    GE              reduce using rule 59 (exp -> SUB exp .)
    LT              reduce using rule 59 (exp -> SUB exp .)
    LE              reduce using rule 59 (exp -> SUB exp .)
    EQ              reduce using rule 59 (exp -> SUB exp .)
    NE              reduce using rule 59 (exp -> SUB exp .)
    COLON           reduce using rule 59 (exp -> SUB exp .)
    COMMA           reduce using rule 59 (exp -> SUB exp .)
    RSB             reduce using rule 59 (exp -> SUB exp .)
    RRB             reduce using rule 59 (exp -> SUB exp .)
    SEMICOLON       reduce using rule 59 (exp -> SUB exp .)
    LRB             reduce using rule 59 (exp -> SUB exp .)
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55

  ! MUL             [ reduce using rule 59 (exp -> SUB exp .) ]
  ! DIV             [ reduce using rule 59 (exp -> SUB exp .) ]
  ! MOD             [ reduce using rule 59 (exp -> SUB exp .) ]
  ! AND             [ shift and go to state 49 ]
  ! OR              [ shift and go to state 50 ]
  ! SUM             [ shift and go to state 51 ]
  ! SUB             [ shift and go to state 52 ]
  ! GT              [ shift and go to state 56 ]
  ! GE              [ shift and go to state 57 ]
  ! LT              [ shift and go to state 58 ]
  ! LE              [ shift and go to state 59 ]
  ! EQ              [ shift and go to state 60 ]
  ! NE              [ shift and go to state 61 ]

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 67

    (60) exp -> NOT exp .
    (52) exp -> exp . operator exp
    (43) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (45) relop -> . GT
    (46) relop -> . GE
    (47) relop -> . LT
    (48) relop -> . LE
    (49) relop -> . EQ
    (50) relop -> . NE

    AND             reduce using rule 60 (exp -> NOT exp .)
    OR              reduce using rule 60 (exp -> NOT exp .)
    COLON           reduce using rule 60 (exp -> NOT exp .)
    COMMA           reduce using rule 60 (exp -> NOT exp .)
    RSB             reduce using rule 60 (exp -> NOT exp .)
    RRB             reduce using rule 60 (exp -> NOT exp .)
    SEMICOLON       reduce using rule 60 (exp -> NOT exp .)
    LRB             reduce using rule 60 (exp -> NOT exp .)
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

  ! SUM             [ reduce using rule 60 (exp -> NOT exp .) ]
  ! SUB             [ reduce using rule 60 (exp -> NOT exp .) ]
  ! MUL             [ reduce using rule 60 (exp -> NOT exp .) ]
  ! DIV             [ reduce using rule 60 (exp -> NOT exp .) ]
  ! MOD             [ reduce using rule 60 (exp -> NOT exp .) ]
  ! GT              [ reduce using rule 60 (exp -> NOT exp .) ]
  ! GE              [ reduce using rule 60 (exp -> NOT exp .) ]
  ! LT              [ reduce using rule 60 (exp -> NOT exp .) ]
  ! LE              [ reduce using rule 60 (exp -> NOT exp .) ]
  ! EQ              [ reduce using rule 60 (exp -> NOT exp .) ]
  ! NE              [ reduce using rule 60 (exp -> NOT exp .) ]
  ! AND             [ shift and go to state 49 ]
  ! OR              [ shift and go to state 50 ]

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 68

    (26) lvalue -> ID LSB exp RSB .

    COLON           reduce using rule 26 (lvalue -> ID LSB exp RSB .)
    COMMA           reduce using rule 26 (lvalue -> ID LSB exp RSB .)
    ASSIGN          reduce using rule 26 (lvalue -> ID LSB exp RSB .)
    LRB             reduce using rule 26 (lvalue -> ID LSB exp RSB .)
    AND             reduce using rule 26 (lvalue -> ID LSB exp RSB .)
    OR              reduce using rule 26 (lvalue -> ID LSB exp RSB .)
    SUM             reduce using rule 26 (lvalue -> ID LSB exp RSB .)
    SUB             reduce using rule 26 (lvalue -> ID LSB exp RSB .)
    MUL             reduce using rule 26 (lvalue -> ID LSB exp RSB .)
    DIV             reduce using rule 26 (lvalue -> ID LSB exp RSB .)
    MOD             reduce using rule 26 (lvalue -> ID LSB exp RSB .)
    GT              reduce using rule 26 (lvalue -> ID LSB exp RSB .)
    GE              reduce using rule 26 (lvalue -> ID LSB exp RSB .)
    LT              reduce using rule 26 (lvalue -> ID LSB exp RSB .)
    LE              reduce using rule 26 (lvalue -> ID LSB exp RSB .)
    EQ              reduce using rule 26 (lvalue -> ID LSB exp RSB .)
    NE              reduce using rule 26 (lvalue -> ID LSB exp RSB .)
    RSB             reduce using rule 26 (lvalue -> ID LSB exp RSB .)
    RRB             reduce using rule 26 (lvalue -> ID LSB exp RSB .)
    SEMICOLON       reduce using rule 26 (lvalue -> ID LSB exp RSB .)


state 69

    (22) block -> LCB stmtlist . RCB
    (23) stmtlist -> stmtlist . stmt
    (30) stmt -> . RETURN exp SEMICOLON
    (31) stmt -> . exp SEMICOLON
    (32) stmt -> . block
    (33) stmt -> . vardec
    (34) stmt -> . WHILE LRB exp LRB stmt
    (35) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (36) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (37) stmt -> . FOR LRB ID IN RRB stmt
    (38) stmt -> . IF LRB exp RRB stmt elseiflist
    (39) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (40) stmt -> . PRINT LRB ID RRB SEMICOLON
    (51) exp -> . lvalue ASSIGN exp
    (52) exp -> . exp operator exp
    (53) exp -> . relopexp
    (54) exp -> . const
    (55) exp -> . lvalue
    (56) exp -> . ID LRB explist RRB
    (57) exp -> . LRB exp RRB
    (58) exp -> . lvalue LRB RRB
    (59) exp -> . SUB exp
    (60) exp -> . NOT exp
    (22) block -> . LCB stmtlist RCB
    (13) vardec -> . idlist COLON type
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (43) relopexp -> . exp relop exp
    (44) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (11) idlist -> . iddec
    (12) idlist -> . idlist COMMA iddec
    (9) iddec -> . lvalue
    (10) iddec -> . ID ASSIGN exp

    RCB             shift and go to state 83
    RETURN          shift and go to state 85
    WHILE           shift and go to state 89
    ON              shift and go to state 90
    FOR             shift and go to state 91
    IF              shift and go to state 93
    PRINT           shift and go to state 94
    ID              shift and go to state 92
    LRB             shift and go to state 31
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LCB             shift and go to state 40
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    stmt                           shift and go to state 84
    exp                            shift and go to state 86
    block                          shift and go to state 87
    vardec                         shift and go to state 88
    lvalue                         shift and go to state 95
    relopexp                       shift and go to state 29
    const                          shift and go to state 30
    idlist                         shift and go to state 8
    iddec                          shift and go to state 11

state 70

    (24) stmtlist -> eps .

    RCB             reduce using rule 24 (stmtlist -> eps .)
    RETURN          reduce using rule 24 (stmtlist -> eps .)
    WHILE           reduce using rule 24 (stmtlist -> eps .)
    ON              reduce using rule 24 (stmtlist -> eps .)
    FOR             reduce using rule 24 (stmtlist -> eps .)
    IF              reduce using rule 24 (stmtlist -> eps .)
    PRINT           reduce using rule 24 (stmtlist -> eps .)
    ID              reduce using rule 24 (stmtlist -> eps .)
    LRB             reduce using rule 24 (stmtlist -> eps .)
    SUB             reduce using rule 24 (stmtlist -> eps .)
    NOT             reduce using rule 24 (stmtlist -> eps .)
    LCB             reduce using rule 24 (stmtlist -> eps .)
    INTEGERNUMBER   reduce using rule 24 (stmtlist -> eps .)
    FLOATNUMBER     reduce using rule 24 (stmtlist -> eps .)
    TRUE            reduce using rule 24 (stmtlist -> eps .)
    FALSE           reduce using rule 24 (stmtlist -> eps .)
    WHERE           reduce using rule 24 (stmtlist -> eps .)


state 71

    (20) paramdec -> ID COLON . type
    (6) type -> . INTEGER
    (7) type -> . FLOAT
    (8) type -> . BOOLEAN

    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22
    BOOLEAN         shift and go to state 23

    type                           shift and go to state 96

state 72

    (21) paramdec -> ID LSB . RSB COLON type

    RSB             shift and go to state 97


state 73

    (14) funcdec -> FUNCTION ID LRB paramdecs RRB . COLON type block
    (15) funcdec -> FUNCTION ID LRB paramdecs RRB . block
    (22) block -> . LCB stmtlist RCB

    COLON           shift and go to state 98
    LCB             shift and go to state 40

    block                          shift and go to state 99

state 74

    (19) paramdecslist -> paramdecslist COMMA . paramdec
    (20) paramdec -> . ID COLON type
    (21) paramdec -> . ID LSB RSB COLON type

    ID              shift and go to state 41

    paramdec                       shift and go to state 100

state 75

    (56) exp -> ID LRB explist . RRB
    (73) explist -> explist . COMMA exp

    RRB             shift and go to state 101
    COMMA           shift and go to state 102


state 76

    (72) explist -> exp .
    (52) exp -> exp . operator exp
    (43) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (45) relop -> . GT
    (46) relop -> . GE
    (47) relop -> . LT
    (48) relop -> . LE
    (49) relop -> . EQ
    (50) relop -> . NE

    RRB             reduce using rule 72 (explist -> exp .)
    COMMA           reduce using rule 72 (explist -> exp .)
    AND             shift and go to state 49
    OR              shift and go to state 50
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 77

    (52) exp -> exp operator exp .
    (52) exp -> exp . operator exp
    (43) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (45) relop -> . GT
    (46) relop -> . GE
    (47) relop -> . LT
    (48) relop -> . LE
    (49) relop -> . EQ
    (50) relop -> . NE

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for SUM resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    COLON           reduce using rule 52 (exp -> exp operator exp .)
    COMMA           reduce using rule 52 (exp -> exp operator exp .)
    RSB             reduce using rule 52 (exp -> exp operator exp .)
    RRB             reduce using rule 52 (exp -> exp operator exp .)
    SEMICOLON       reduce using rule 52 (exp -> exp operator exp .)
    LRB             reduce using rule 52 (exp -> exp operator exp .)
    AND             shift and go to state 49
    OR              shift and go to state 50
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

  ! AND             [ reduce using rule 52 (exp -> exp operator exp .) ]
  ! OR              [ reduce using rule 52 (exp -> exp operator exp .) ]
  ! SUM             [ reduce using rule 52 (exp -> exp operator exp .) ]
  ! SUB             [ reduce using rule 52 (exp -> exp operator exp .) ]
  ! MUL             [ reduce using rule 52 (exp -> exp operator exp .) ]
  ! DIV             [ reduce using rule 52 (exp -> exp operator exp .) ]
  ! MOD             [ reduce using rule 52 (exp -> exp operator exp .) ]
  ! GT              [ reduce using rule 52 (exp -> exp operator exp .) ]
  ! GE              [ reduce using rule 52 (exp -> exp operator exp .) ]
  ! LT              [ reduce using rule 52 (exp -> exp operator exp .) ]
  ! LE              [ reduce using rule 52 (exp -> exp operator exp .) ]
  ! EQ              [ reduce using rule 52 (exp -> exp operator exp .) ]
  ! NE              [ reduce using rule 52 (exp -> exp operator exp .) ]

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 78

    (43) relopexp -> exp relop exp .
    (52) exp -> exp . operator exp
    (43) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (45) relop -> . GT
    (46) relop -> . GE
    (47) relop -> . LT
    (48) relop -> . LE
    (49) relop -> . EQ
    (50) relop -> . NE

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for SUM resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    COLON           reduce using rule 43 (relopexp -> exp relop exp .)
    COMMA           reduce using rule 43 (relopexp -> exp relop exp .)
    RSB             reduce using rule 43 (relopexp -> exp relop exp .)
    RRB             reduce using rule 43 (relopexp -> exp relop exp .)
    SEMICOLON       reduce using rule 43 (relopexp -> exp relop exp .)
    LRB             reduce using rule 43 (relopexp -> exp relop exp .)
    AND             shift and go to state 49
    OR              shift and go to state 50
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

  ! GT              [ reduce using rule 43 (relopexp -> exp relop exp .) ]
  ! GE              [ reduce using rule 43 (relopexp -> exp relop exp .) ]
  ! LT              [ reduce using rule 43 (relopexp -> exp relop exp .) ]
  ! LE              [ reduce using rule 43 (relopexp -> exp relop exp .) ]
  ! EQ              [ reduce using rule 43 (relopexp -> exp relop exp .) ]
  ! NE              [ reduce using rule 43 (relopexp -> exp relop exp .) ]
  ! AND             [ reduce using rule 43 (relopexp -> exp relop exp .) ]
  ! OR              [ reduce using rule 43 (relopexp -> exp relop exp .) ]
  ! SUM             [ reduce using rule 43 (relopexp -> exp relop exp .) ]
  ! SUB             [ reduce using rule 43 (relopexp -> exp relop exp .) ]
  ! MUL             [ reduce using rule 43 (relopexp -> exp relop exp .) ]
  ! DIV             [ reduce using rule 43 (relopexp -> exp relop exp .) ]
  ! MOD             [ reduce using rule 43 (relopexp -> exp relop exp .) ]

    relop                          shift and go to state 48
    operator                       shift and go to state 47

state 79

    (51) exp -> lvalue ASSIGN exp .
    (52) exp -> exp . operator exp
    (43) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (45) relop -> . GT
    (46) relop -> . GE
    (47) relop -> . LT
    (48) relop -> . LE
    (49) relop -> . EQ
    (50) relop -> . NE

    AND             reduce using rule 51 (exp -> lvalue ASSIGN exp .)
    OR              reduce using rule 51 (exp -> lvalue ASSIGN exp .)
    GT              reduce using rule 51 (exp -> lvalue ASSIGN exp .)
    GE              reduce using rule 51 (exp -> lvalue ASSIGN exp .)
    LT              reduce using rule 51 (exp -> lvalue ASSIGN exp .)
    LE              reduce using rule 51 (exp -> lvalue ASSIGN exp .)
    EQ              reduce using rule 51 (exp -> lvalue ASSIGN exp .)
    NE              reduce using rule 51 (exp -> lvalue ASSIGN exp .)
    COLON           reduce using rule 51 (exp -> lvalue ASSIGN exp .)
    COMMA           reduce using rule 51 (exp -> lvalue ASSIGN exp .)
    RSB             reduce using rule 51 (exp -> lvalue ASSIGN exp .)
    RRB             reduce using rule 51 (exp -> lvalue ASSIGN exp .)
    SEMICOLON       reduce using rule 51 (exp -> lvalue ASSIGN exp .)
    LRB             reduce using rule 51 (exp -> lvalue ASSIGN exp .)
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55

  ! SUM             [ reduce using rule 51 (exp -> lvalue ASSIGN exp .) ]
  ! SUB             [ reduce using rule 51 (exp -> lvalue ASSIGN exp .) ]
  ! MUL             [ reduce using rule 51 (exp -> lvalue ASSIGN exp .) ]
  ! DIV             [ reduce using rule 51 (exp -> lvalue ASSIGN exp .) ]
  ! MOD             [ reduce using rule 51 (exp -> lvalue ASSIGN exp .) ]
  ! AND             [ shift and go to state 49 ]
  ! OR              [ shift and go to state 50 ]
  ! GT              [ shift and go to state 56 ]
  ! GE              [ shift and go to state 57 ]
  ! LT              [ shift and go to state 58 ]
  ! LE              [ shift and go to state 59 ]
  ! EQ              [ shift and go to state 60 ]
  ! NE              [ shift and go to state 61 ]

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 80

    (58) exp -> lvalue LRB RRB .

    AND             reduce using rule 58 (exp -> lvalue LRB RRB .)
    OR              reduce using rule 58 (exp -> lvalue LRB RRB .)
    SUM             reduce using rule 58 (exp -> lvalue LRB RRB .)
    SUB             reduce using rule 58 (exp -> lvalue LRB RRB .)
    MUL             reduce using rule 58 (exp -> lvalue LRB RRB .)
    DIV             reduce using rule 58 (exp -> lvalue LRB RRB .)
    MOD             reduce using rule 58 (exp -> lvalue LRB RRB .)
    GT              reduce using rule 58 (exp -> lvalue LRB RRB .)
    GE              reduce using rule 58 (exp -> lvalue LRB RRB .)
    LT              reduce using rule 58 (exp -> lvalue LRB RRB .)
    LE              reduce using rule 58 (exp -> lvalue LRB RRB .)
    EQ              reduce using rule 58 (exp -> lvalue LRB RRB .)
    NE              reduce using rule 58 (exp -> lvalue LRB RRB .)
    COLON           reduce using rule 58 (exp -> lvalue LRB RRB .)
    COMMA           reduce using rule 58 (exp -> lvalue LRB RRB .)
    RSB             reduce using rule 58 (exp -> lvalue LRB RRB .)
    RRB             reduce using rule 58 (exp -> lvalue LRB RRB .)
    SEMICOLON       reduce using rule 58 (exp -> lvalue LRB RRB .)
    LRB             reduce using rule 58 (exp -> lvalue LRB RRB .)


state 81

    (44) relopexp -> relopexp relop exp .
    (52) exp -> exp . operator exp
    (43) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (45) relop -> . GT
    (46) relop -> . GE
    (47) relop -> . LT
    (48) relop -> . LE
    (49) relop -> . EQ
    (50) relop -> . NE

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for SUM resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    COLON           reduce using rule 44 (relopexp -> relopexp relop exp .)
    COMMA           reduce using rule 44 (relopexp -> relopexp relop exp .)
    RSB             reduce using rule 44 (relopexp -> relopexp relop exp .)
    RRB             reduce using rule 44 (relopexp -> relopexp relop exp .)
    SEMICOLON       reduce using rule 44 (relopexp -> relopexp relop exp .)
    LRB             reduce using rule 44 (relopexp -> relopexp relop exp .)
    AND             shift and go to state 49
    OR              shift and go to state 50
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

  ! GT              [ reduce using rule 44 (relopexp -> relopexp relop exp .) ]
  ! GE              [ reduce using rule 44 (relopexp -> relopexp relop exp .) ]
  ! LT              [ reduce using rule 44 (relopexp -> relopexp relop exp .) ]
  ! LE              [ reduce using rule 44 (relopexp -> relopexp relop exp .) ]
  ! EQ              [ reduce using rule 44 (relopexp -> relopexp relop exp .) ]
  ! NE              [ reduce using rule 44 (relopexp -> relopexp relop exp .) ]
  ! AND             [ reduce using rule 44 (relopexp -> relopexp relop exp .) ]
  ! OR              [ reduce using rule 44 (relopexp -> relopexp relop exp .) ]
  ! SUM             [ reduce using rule 44 (relopexp -> relopexp relop exp .) ]
  ! SUB             [ reduce using rule 44 (relopexp -> relopexp relop exp .) ]
  ! MUL             [ reduce using rule 44 (relopexp -> relopexp relop exp .) ]
  ! DIV             [ reduce using rule 44 (relopexp -> relopexp relop exp .) ]
  ! MOD             [ reduce using rule 44 (relopexp -> relopexp relop exp .) ]

    relop                          shift and go to state 48
    operator                       shift and go to state 47

state 82

    (57) exp -> LRB exp RRB .

    AND             reduce using rule 57 (exp -> LRB exp RRB .)
    OR              reduce using rule 57 (exp -> LRB exp RRB .)
    SUM             reduce using rule 57 (exp -> LRB exp RRB .)
    SUB             reduce using rule 57 (exp -> LRB exp RRB .)
    MUL             reduce using rule 57 (exp -> LRB exp RRB .)
    DIV             reduce using rule 57 (exp -> LRB exp RRB .)
    MOD             reduce using rule 57 (exp -> LRB exp RRB .)
    GT              reduce using rule 57 (exp -> LRB exp RRB .)
    GE              reduce using rule 57 (exp -> LRB exp RRB .)
    LT              reduce using rule 57 (exp -> LRB exp RRB .)
    LE              reduce using rule 57 (exp -> LRB exp RRB .)
    EQ              reduce using rule 57 (exp -> LRB exp RRB .)
    NE              reduce using rule 57 (exp -> LRB exp RRB .)
    COLON           reduce using rule 57 (exp -> LRB exp RRB .)
    COMMA           reduce using rule 57 (exp -> LRB exp RRB .)
    RSB             reduce using rule 57 (exp -> LRB exp RRB .)
    RRB             reduce using rule 57 (exp -> LRB exp RRB .)
    SEMICOLON       reduce using rule 57 (exp -> LRB exp RRB .)
    LRB             reduce using rule 57 (exp -> LRB exp RRB .)


state 83

    (22) block -> LCB stmtlist RCB .

    $end            reduce using rule 22 (block -> LCB stmtlist RCB .)
    RCB             reduce using rule 22 (block -> LCB stmtlist RCB .)
    RETURN          reduce using rule 22 (block -> LCB stmtlist RCB .)
    WHILE           reduce using rule 22 (block -> LCB stmtlist RCB .)
    ON              reduce using rule 22 (block -> LCB stmtlist RCB .)
    FOR             reduce using rule 22 (block -> LCB stmtlist RCB .)
    IF              reduce using rule 22 (block -> LCB stmtlist RCB .)
    PRINT           reduce using rule 22 (block -> LCB stmtlist RCB .)
    ID              reduce using rule 22 (block -> LCB stmtlist RCB .)
    LRB             reduce using rule 22 (block -> LCB stmtlist RCB .)
    SUB             reduce using rule 22 (block -> LCB stmtlist RCB .)
    NOT             reduce using rule 22 (block -> LCB stmtlist RCB .)
    LCB             reduce using rule 22 (block -> LCB stmtlist RCB .)
    INTEGERNUMBER   reduce using rule 22 (block -> LCB stmtlist RCB .)
    FLOATNUMBER     reduce using rule 22 (block -> LCB stmtlist RCB .)
    TRUE            reduce using rule 22 (block -> LCB stmtlist RCB .)
    FALSE           reduce using rule 22 (block -> LCB stmtlist RCB .)
    MAIN            reduce using rule 22 (block -> LCB stmtlist RCB .)
    FUNCTION        reduce using rule 22 (block -> LCB stmtlist RCB .)
    ELSE            reduce using rule 22 (block -> LCB stmtlist RCB .)
    ELSEIF          reduce using rule 22 (block -> LCB stmtlist RCB .)
    WHERE           reduce using rule 22 (block -> LCB stmtlist RCB .)


state 84

    (23) stmtlist -> stmtlist stmt .

    RCB             reduce using rule 23 (stmtlist -> stmtlist stmt .)
    RETURN          reduce using rule 23 (stmtlist -> stmtlist stmt .)
    WHILE           reduce using rule 23 (stmtlist -> stmtlist stmt .)
    ON              reduce using rule 23 (stmtlist -> stmtlist stmt .)
    FOR             reduce using rule 23 (stmtlist -> stmtlist stmt .)
    IF              reduce using rule 23 (stmtlist -> stmtlist stmt .)
    PRINT           reduce using rule 23 (stmtlist -> stmtlist stmt .)
    ID              reduce using rule 23 (stmtlist -> stmtlist stmt .)
    LRB             reduce using rule 23 (stmtlist -> stmtlist stmt .)
    SUB             reduce using rule 23 (stmtlist -> stmtlist stmt .)
    NOT             reduce using rule 23 (stmtlist -> stmtlist stmt .)
    LCB             reduce using rule 23 (stmtlist -> stmtlist stmt .)
    INTEGERNUMBER   reduce using rule 23 (stmtlist -> stmtlist stmt .)
    FLOATNUMBER     reduce using rule 23 (stmtlist -> stmtlist stmt .)
    TRUE            reduce using rule 23 (stmtlist -> stmtlist stmt .)
    FALSE           reduce using rule 23 (stmtlist -> stmtlist stmt .)
    WHERE           reduce using rule 23 (stmtlist -> stmtlist stmt .)


state 85

    (30) stmt -> RETURN . exp SEMICOLON
    (51) exp -> . lvalue ASSIGN exp
    (52) exp -> . exp operator exp
    (53) exp -> . relopexp
    (54) exp -> . const
    (55) exp -> . lvalue
    (56) exp -> . ID LRB explist RRB
    (57) exp -> . LRB exp RRB
    (58) exp -> . lvalue LRB RRB
    (59) exp -> . SUB exp
    (60) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (43) relopexp -> . exp relop exp
    (44) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 26
    LRB             shift and go to state 31
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 103
    lvalue                         shift and go to state 28
    relopexp                       shift and go to state 29
    const                          shift and go to state 30

state 86

    (31) stmt -> exp . SEMICOLON
    (52) exp -> exp . operator exp
    (43) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (45) relop -> . GT
    (46) relop -> . GE
    (47) relop -> . LT
    (48) relop -> . LE
    (49) relop -> . EQ
    (50) relop -> . NE

    SEMICOLON       shift and go to state 104
    AND             shift and go to state 49
    OR              shift and go to state 50
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 87

    (32) stmt -> block .

    RCB             reduce using rule 32 (stmt -> block .)
    RETURN          reduce using rule 32 (stmt -> block .)
    WHILE           reduce using rule 32 (stmt -> block .)
    ON              reduce using rule 32 (stmt -> block .)
    FOR             reduce using rule 32 (stmt -> block .)
    IF              reduce using rule 32 (stmt -> block .)
    PRINT           reduce using rule 32 (stmt -> block .)
    ID              reduce using rule 32 (stmt -> block .)
    LRB             reduce using rule 32 (stmt -> block .)
    SUB             reduce using rule 32 (stmt -> block .)
    NOT             reduce using rule 32 (stmt -> block .)
    LCB             reduce using rule 32 (stmt -> block .)
    INTEGERNUMBER   reduce using rule 32 (stmt -> block .)
    FLOATNUMBER     reduce using rule 32 (stmt -> block .)
    TRUE            reduce using rule 32 (stmt -> block .)
    FALSE           reduce using rule 32 (stmt -> block .)
    ELSE            reduce using rule 32 (stmt -> block .)
    ELSEIF          reduce using rule 32 (stmt -> block .)
    WHERE           reduce using rule 32 (stmt -> block .)


state 88

    (33) stmt -> vardec .

    RCB             reduce using rule 33 (stmt -> vardec .)
    RETURN          reduce using rule 33 (stmt -> vardec .)
    WHILE           reduce using rule 33 (stmt -> vardec .)
    ON              reduce using rule 33 (stmt -> vardec .)
    FOR             reduce using rule 33 (stmt -> vardec .)
    IF              reduce using rule 33 (stmt -> vardec .)
    PRINT           reduce using rule 33 (stmt -> vardec .)
    ID              reduce using rule 33 (stmt -> vardec .)
    LRB             reduce using rule 33 (stmt -> vardec .)
    SUB             reduce using rule 33 (stmt -> vardec .)
    NOT             reduce using rule 33 (stmt -> vardec .)
    LCB             reduce using rule 33 (stmt -> vardec .)
    INTEGERNUMBER   reduce using rule 33 (stmt -> vardec .)
    FLOATNUMBER     reduce using rule 33 (stmt -> vardec .)
    TRUE            reduce using rule 33 (stmt -> vardec .)
    FALSE           reduce using rule 33 (stmt -> vardec .)
    ELSE            reduce using rule 33 (stmt -> vardec .)
    ELSEIF          reduce using rule 33 (stmt -> vardec .)
    WHERE           reduce using rule 33 (stmt -> vardec .)


state 89

    (34) stmt -> WHILE . LRB exp LRB stmt

    LRB             shift and go to state 105


state 90

    (35) stmt -> ON . LRB exp RRB LCB cases RCB SEMICOLON

    LRB             shift and go to state 106


state 91

    (36) stmt -> FOR . LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (37) stmt -> FOR . LRB ID IN RRB stmt

    LRB             shift and go to state 107


state 92

    (56) exp -> ID . LRB explist RRB
    (25) lvalue -> ID .
    (26) lvalue -> ID . LSB exp RSB
    (10) iddec -> ID . ASSIGN exp

  ! shift/reduce conflict for LRB resolved as shift
  ! shift/reduce conflict for ASSIGN resolved as shift
    LRB             shift and go to state 46
    SEMICOLON       reduce using rule 25 (lvalue -> ID .)
    AND             reduce using rule 25 (lvalue -> ID .)
    OR              reduce using rule 25 (lvalue -> ID .)
    SUM             reduce using rule 25 (lvalue -> ID .)
    SUB             reduce using rule 25 (lvalue -> ID .)
    MUL             reduce using rule 25 (lvalue -> ID .)
    DIV             reduce using rule 25 (lvalue -> ID .)
    MOD             reduce using rule 25 (lvalue -> ID .)
    GT              reduce using rule 25 (lvalue -> ID .)
    GE              reduce using rule 25 (lvalue -> ID .)
    LT              reduce using rule 25 (lvalue -> ID .)
    LE              reduce using rule 25 (lvalue -> ID .)
    EQ              reduce using rule 25 (lvalue -> ID .)
    NE              reduce using rule 25 (lvalue -> ID .)
    COLON           reduce using rule 25 (lvalue -> ID .)
    COMMA           reduce using rule 25 (lvalue -> ID .)
    LSB             shift and go to state 18
    ASSIGN          shift and go to state 17

  ! ASSIGN          [ reduce using rule 25 (lvalue -> ID .) ]
  ! LRB             [ reduce using rule 25 (lvalue -> ID .) ]


state 93

    (38) stmt -> IF . LRB exp RRB stmt elseiflist
    (39) stmt -> IF . LRB exp RRB stmt elseiflist ELSE stmt

    LRB             shift and go to state 108


state 94

    (40) stmt -> PRINT . LRB ID RRB SEMICOLON

    LRB             shift and go to state 109


state 95

    (51) exp -> lvalue . ASSIGN exp
    (55) exp -> lvalue .
    (58) exp -> lvalue . LRB RRB
    (9) iddec -> lvalue .

    ASSIGN          shift and go to state 62
    SEMICOLON       reduce using rule 55 (exp -> lvalue .)
    AND             reduce using rule 55 (exp -> lvalue .)
    OR              reduce using rule 55 (exp -> lvalue .)
    SUM             reduce using rule 55 (exp -> lvalue .)
    SUB             reduce using rule 55 (exp -> lvalue .)
    MUL             reduce using rule 55 (exp -> lvalue .)
    DIV             reduce using rule 55 (exp -> lvalue .)
    MOD             reduce using rule 55 (exp -> lvalue .)
    GT              reduce using rule 55 (exp -> lvalue .)
    GE              reduce using rule 55 (exp -> lvalue .)
    LT              reduce using rule 55 (exp -> lvalue .)
    LE              reduce using rule 55 (exp -> lvalue .)
    EQ              reduce using rule 55 (exp -> lvalue .)
    NE              reduce using rule 55 (exp -> lvalue .)
    LRB             shift and go to state 63
    COLON           reduce using rule 9 (iddec -> lvalue .)
    COMMA           reduce using rule 9 (iddec -> lvalue .)


state 96

    (20) paramdec -> ID COLON type .

    COMMA           reduce using rule 20 (paramdec -> ID COLON type .)
    RRB             reduce using rule 20 (paramdec -> ID COLON type .)


state 97

    (21) paramdec -> ID LSB RSB . COLON type

    COLON           shift and go to state 110


state 98

    (14) funcdec -> FUNCTION ID LRB paramdecs RRB COLON . type block
    (6) type -> . INTEGER
    (7) type -> . FLOAT
    (8) type -> . BOOLEAN

    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22
    BOOLEAN         shift and go to state 23

    type                           shift and go to state 111

state 99

    (15) funcdec -> FUNCTION ID LRB paramdecs RRB block .

    MAIN            reduce using rule 15 (funcdec -> FUNCTION ID LRB paramdecs RRB block .)
    FUNCTION        reduce using rule 15 (funcdec -> FUNCTION ID LRB paramdecs RRB block .)
    ID              reduce using rule 15 (funcdec -> FUNCTION ID LRB paramdecs RRB block .)


state 100

    (19) paramdecslist -> paramdecslist COMMA paramdec .

    COMMA           reduce using rule 19 (paramdecslist -> paramdecslist COMMA paramdec .)
    RRB             reduce using rule 19 (paramdecslist -> paramdecslist COMMA paramdec .)


state 101

    (56) exp -> ID LRB explist RRB .

    AND             reduce using rule 56 (exp -> ID LRB explist RRB .)
    OR              reduce using rule 56 (exp -> ID LRB explist RRB .)
    SUM             reduce using rule 56 (exp -> ID LRB explist RRB .)
    SUB             reduce using rule 56 (exp -> ID LRB explist RRB .)
    MUL             reduce using rule 56 (exp -> ID LRB explist RRB .)
    DIV             reduce using rule 56 (exp -> ID LRB explist RRB .)
    MOD             reduce using rule 56 (exp -> ID LRB explist RRB .)
    GT              reduce using rule 56 (exp -> ID LRB explist RRB .)
    GE              reduce using rule 56 (exp -> ID LRB explist RRB .)
    LT              reduce using rule 56 (exp -> ID LRB explist RRB .)
    LE              reduce using rule 56 (exp -> ID LRB explist RRB .)
    EQ              reduce using rule 56 (exp -> ID LRB explist RRB .)
    NE              reduce using rule 56 (exp -> ID LRB explist RRB .)
    COLON           reduce using rule 56 (exp -> ID LRB explist RRB .)
    COMMA           reduce using rule 56 (exp -> ID LRB explist RRB .)
    RSB             reduce using rule 56 (exp -> ID LRB explist RRB .)
    RRB             reduce using rule 56 (exp -> ID LRB explist RRB .)
    SEMICOLON       reduce using rule 56 (exp -> ID LRB explist RRB .)
    LRB             reduce using rule 56 (exp -> ID LRB explist RRB .)


state 102

    (73) explist -> explist COMMA . exp
    (51) exp -> . lvalue ASSIGN exp
    (52) exp -> . exp operator exp
    (53) exp -> . relopexp
    (54) exp -> . const
    (55) exp -> . lvalue
    (56) exp -> . ID LRB explist RRB
    (57) exp -> . LRB exp RRB
    (58) exp -> . lvalue LRB RRB
    (59) exp -> . SUB exp
    (60) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (43) relopexp -> . exp relop exp
    (44) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 26
    LRB             shift and go to state 31
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 112
    lvalue                         shift and go to state 28
    relopexp                       shift and go to state 29
    const                          shift and go to state 30

state 103

    (30) stmt -> RETURN exp . SEMICOLON
    (52) exp -> exp . operator exp
    (43) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (45) relop -> . GT
    (46) relop -> . GE
    (47) relop -> . LT
    (48) relop -> . LE
    (49) relop -> . EQ
    (50) relop -> . NE

    SEMICOLON       shift and go to state 113
    AND             shift and go to state 49
    OR              shift and go to state 50
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 104

    (31) stmt -> exp SEMICOLON .

    RCB             reduce using rule 31 (stmt -> exp SEMICOLON .)
    RETURN          reduce using rule 31 (stmt -> exp SEMICOLON .)
    WHILE           reduce using rule 31 (stmt -> exp SEMICOLON .)
    ON              reduce using rule 31 (stmt -> exp SEMICOLON .)
    FOR             reduce using rule 31 (stmt -> exp SEMICOLON .)
    IF              reduce using rule 31 (stmt -> exp SEMICOLON .)
    PRINT           reduce using rule 31 (stmt -> exp SEMICOLON .)
    ID              reduce using rule 31 (stmt -> exp SEMICOLON .)
    LRB             reduce using rule 31 (stmt -> exp SEMICOLON .)
    SUB             reduce using rule 31 (stmt -> exp SEMICOLON .)
    NOT             reduce using rule 31 (stmt -> exp SEMICOLON .)
    LCB             reduce using rule 31 (stmt -> exp SEMICOLON .)
    INTEGERNUMBER   reduce using rule 31 (stmt -> exp SEMICOLON .)
    FLOATNUMBER     reduce using rule 31 (stmt -> exp SEMICOLON .)
    TRUE            reduce using rule 31 (stmt -> exp SEMICOLON .)
    FALSE           reduce using rule 31 (stmt -> exp SEMICOLON .)
    ELSE            reduce using rule 31 (stmt -> exp SEMICOLON .)
    ELSEIF          reduce using rule 31 (stmt -> exp SEMICOLON .)
    WHERE           reduce using rule 31 (stmt -> exp SEMICOLON .)


state 105

    (34) stmt -> WHILE LRB . exp LRB stmt
    (51) exp -> . lvalue ASSIGN exp
    (52) exp -> . exp operator exp
    (53) exp -> . relopexp
    (54) exp -> . const
    (55) exp -> . lvalue
    (56) exp -> . ID LRB explist RRB
    (57) exp -> . LRB exp RRB
    (58) exp -> . lvalue LRB RRB
    (59) exp -> . SUB exp
    (60) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (43) relopexp -> . exp relop exp
    (44) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 26
    LRB             shift and go to state 31
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 114
    lvalue                         shift and go to state 28
    relopexp                       shift and go to state 29
    const                          shift and go to state 30

state 106

    (35) stmt -> ON LRB . exp RRB LCB cases RCB SEMICOLON
    (51) exp -> . lvalue ASSIGN exp
    (52) exp -> . exp operator exp
    (53) exp -> . relopexp
    (54) exp -> . const
    (55) exp -> . lvalue
    (56) exp -> . ID LRB explist RRB
    (57) exp -> . LRB exp RRB
    (58) exp -> . lvalue LRB RRB
    (59) exp -> . SUB exp
    (60) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (43) relopexp -> . exp relop exp
    (44) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 26
    LRB             shift and go to state 31
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 115
    lvalue                         shift and go to state 28
    relopexp                       shift and go to state 29
    const                          shift and go to state 30

state 107

    (36) stmt -> FOR LRB . exp SEMICOLON exp SEMICOLON exp RRB stmt
    (37) stmt -> FOR LRB . ID IN RRB stmt
    (51) exp -> . lvalue ASSIGN exp
    (52) exp -> . exp operator exp
    (53) exp -> . relopexp
    (54) exp -> . const
    (55) exp -> . lvalue
    (56) exp -> . ID LRB explist RRB
    (57) exp -> . LRB exp RRB
    (58) exp -> . lvalue LRB RRB
    (59) exp -> . SUB exp
    (60) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (43) relopexp -> . exp relop exp
    (44) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 117
    LRB             shift and go to state 31
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 116
    lvalue                         shift and go to state 28
    relopexp                       shift and go to state 29
    const                          shift and go to state 30

state 108

    (38) stmt -> IF LRB . exp RRB stmt elseiflist
    (39) stmt -> IF LRB . exp RRB stmt elseiflist ELSE stmt
    (51) exp -> . lvalue ASSIGN exp
    (52) exp -> . exp operator exp
    (53) exp -> . relopexp
    (54) exp -> . const
    (55) exp -> . lvalue
    (56) exp -> . ID LRB explist RRB
    (57) exp -> . LRB exp RRB
    (58) exp -> . lvalue LRB RRB
    (59) exp -> . SUB exp
    (60) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (43) relopexp -> . exp relop exp
    (44) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 26
    LRB             shift and go to state 31
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 118
    lvalue                         shift and go to state 28
    relopexp                       shift and go to state 29
    const                          shift and go to state 30

state 109

    (40) stmt -> PRINT LRB . ID RRB SEMICOLON

    ID              shift and go to state 119


state 110

    (21) paramdec -> ID LSB RSB COLON . type
    (6) type -> . INTEGER
    (7) type -> . FLOAT
    (8) type -> . BOOLEAN

    INTEGER         shift and go to state 21
    FLOAT           shift and go to state 22
    BOOLEAN         shift and go to state 23

    type                           shift and go to state 120

state 111

    (14) funcdec -> FUNCTION ID LRB paramdecs RRB COLON type . block
    (22) block -> . LCB stmtlist RCB

    LCB             shift and go to state 40

    block                          shift and go to state 121

state 112

    (73) explist -> explist COMMA exp .
    (52) exp -> exp . operator exp
    (43) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (45) relop -> . GT
    (46) relop -> . GE
    (47) relop -> . LT
    (48) relop -> . LE
    (49) relop -> . EQ
    (50) relop -> . NE

    RRB             reduce using rule 73 (explist -> explist COMMA exp .)
    COMMA           reduce using rule 73 (explist -> explist COMMA exp .)
    AND             shift and go to state 49
    OR              shift and go to state 50
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 113

    (30) stmt -> RETURN exp SEMICOLON .

    RCB             reduce using rule 30 (stmt -> RETURN exp SEMICOLON .)
    RETURN          reduce using rule 30 (stmt -> RETURN exp SEMICOLON .)
    WHILE           reduce using rule 30 (stmt -> RETURN exp SEMICOLON .)
    ON              reduce using rule 30 (stmt -> RETURN exp SEMICOLON .)
    FOR             reduce using rule 30 (stmt -> RETURN exp SEMICOLON .)
    IF              reduce using rule 30 (stmt -> RETURN exp SEMICOLON .)
    PRINT           reduce using rule 30 (stmt -> RETURN exp SEMICOLON .)
    ID              reduce using rule 30 (stmt -> RETURN exp SEMICOLON .)
    LRB             reduce using rule 30 (stmt -> RETURN exp SEMICOLON .)
    SUB             reduce using rule 30 (stmt -> RETURN exp SEMICOLON .)
    NOT             reduce using rule 30 (stmt -> RETURN exp SEMICOLON .)
    LCB             reduce using rule 30 (stmt -> RETURN exp SEMICOLON .)
    INTEGERNUMBER   reduce using rule 30 (stmt -> RETURN exp SEMICOLON .)
    FLOATNUMBER     reduce using rule 30 (stmt -> RETURN exp SEMICOLON .)
    TRUE            reduce using rule 30 (stmt -> RETURN exp SEMICOLON .)
    FALSE           reduce using rule 30 (stmt -> RETURN exp SEMICOLON .)
    ELSE            reduce using rule 30 (stmt -> RETURN exp SEMICOLON .)
    ELSEIF          reduce using rule 30 (stmt -> RETURN exp SEMICOLON .)
    WHERE           reduce using rule 30 (stmt -> RETURN exp SEMICOLON .)


state 114

    (34) stmt -> WHILE LRB exp . LRB stmt
    (52) exp -> exp . operator exp
    (43) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (45) relop -> . GT
    (46) relop -> . GE
    (47) relop -> . LT
    (48) relop -> . LE
    (49) relop -> . EQ
    (50) relop -> . NE

    LRB             shift and go to state 122
    AND             shift and go to state 49
    OR              shift and go to state 50
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 115

    (35) stmt -> ON LRB exp . RRB LCB cases RCB SEMICOLON
    (52) exp -> exp . operator exp
    (43) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (45) relop -> . GT
    (46) relop -> . GE
    (47) relop -> . LT
    (48) relop -> . LE
    (49) relop -> . EQ
    (50) relop -> . NE

    RRB             shift and go to state 123
    AND             shift and go to state 49
    OR              shift and go to state 50
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 116

    (36) stmt -> FOR LRB exp . SEMICOLON exp SEMICOLON exp RRB stmt
    (52) exp -> exp . operator exp
    (43) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (45) relop -> . GT
    (46) relop -> . GE
    (47) relop -> . LT
    (48) relop -> . LE
    (49) relop -> . EQ
    (50) relop -> . NE

    SEMICOLON       shift and go to state 124
    AND             shift and go to state 49
    OR              shift and go to state 50
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 117

    (37) stmt -> FOR LRB ID . IN RRB stmt
    (56) exp -> ID . LRB explist RRB
    (25) lvalue -> ID .
    (26) lvalue -> ID . LSB exp RSB

  ! shift/reduce conflict for LRB resolved as shift
    IN              shift and go to state 125
    LRB             shift and go to state 46
    ASSIGN          reduce using rule 25 (lvalue -> ID .)
    SEMICOLON       reduce using rule 25 (lvalue -> ID .)
    AND             reduce using rule 25 (lvalue -> ID .)
    OR              reduce using rule 25 (lvalue -> ID .)
    SUM             reduce using rule 25 (lvalue -> ID .)
    SUB             reduce using rule 25 (lvalue -> ID .)
    MUL             reduce using rule 25 (lvalue -> ID .)
    DIV             reduce using rule 25 (lvalue -> ID .)
    MOD             reduce using rule 25 (lvalue -> ID .)
    GT              reduce using rule 25 (lvalue -> ID .)
    GE              reduce using rule 25 (lvalue -> ID .)
    LT              reduce using rule 25 (lvalue -> ID .)
    LE              reduce using rule 25 (lvalue -> ID .)
    EQ              reduce using rule 25 (lvalue -> ID .)
    NE              reduce using rule 25 (lvalue -> ID .)
    LSB             shift and go to state 18

  ! LRB             [ reduce using rule 25 (lvalue -> ID .) ]


state 118

    (38) stmt -> IF LRB exp . RRB stmt elseiflist
    (39) stmt -> IF LRB exp . RRB stmt elseiflist ELSE stmt
    (52) exp -> exp . operator exp
    (43) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (45) relop -> . GT
    (46) relop -> . GE
    (47) relop -> . LT
    (48) relop -> . LE
    (49) relop -> . EQ
    (50) relop -> . NE

    RRB             shift and go to state 126
    AND             shift and go to state 49
    OR              shift and go to state 50
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 119

    (40) stmt -> PRINT LRB ID . RRB SEMICOLON

    RRB             shift and go to state 127


state 120

    (21) paramdec -> ID LSB RSB COLON type .

    COMMA           reduce using rule 21 (paramdec -> ID LSB RSB COLON type .)
    RRB             reduce using rule 21 (paramdec -> ID LSB RSB COLON type .)


state 121

    (14) funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .

    MAIN            reduce using rule 14 (funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .)
    FUNCTION        reduce using rule 14 (funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .)
    ID              reduce using rule 14 (funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .)


state 122

    (34) stmt -> WHILE LRB exp LRB . stmt
    (30) stmt -> . RETURN exp SEMICOLON
    (31) stmt -> . exp SEMICOLON
    (32) stmt -> . block
    (33) stmt -> . vardec
    (34) stmt -> . WHILE LRB exp LRB stmt
    (35) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (36) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (37) stmt -> . FOR LRB ID IN RRB stmt
    (38) stmt -> . IF LRB exp RRB stmt elseiflist
    (39) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (40) stmt -> . PRINT LRB ID RRB SEMICOLON
    (51) exp -> . lvalue ASSIGN exp
    (52) exp -> . exp operator exp
    (53) exp -> . relopexp
    (54) exp -> . const
    (55) exp -> . lvalue
    (56) exp -> . ID LRB explist RRB
    (57) exp -> . LRB exp RRB
    (58) exp -> . lvalue LRB RRB
    (59) exp -> . SUB exp
    (60) exp -> . NOT exp
    (22) block -> . LCB stmtlist RCB
    (13) vardec -> . idlist COLON type
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (43) relopexp -> . exp relop exp
    (44) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (11) idlist -> . iddec
    (12) idlist -> . idlist COMMA iddec
    (9) iddec -> . lvalue
    (10) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 85
    WHILE           shift and go to state 89
    ON              shift and go to state 90
    FOR             shift and go to state 91
    IF              shift and go to state 93
    PRINT           shift and go to state 94
    ID              shift and go to state 92
    LRB             shift and go to state 31
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LCB             shift and go to state 40
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 86
    stmt                           shift and go to state 128
    block                          shift and go to state 87
    vardec                         shift and go to state 88
    lvalue                         shift and go to state 95
    relopexp                       shift and go to state 29
    const                          shift and go to state 30
    idlist                         shift and go to state 8
    iddec                          shift and go to state 11

state 123

    (35) stmt -> ON LRB exp RRB . LCB cases RCB SEMICOLON

    LCB             shift and go to state 129


state 124

    (36) stmt -> FOR LRB exp SEMICOLON . exp SEMICOLON exp RRB stmt
    (51) exp -> . lvalue ASSIGN exp
    (52) exp -> . exp operator exp
    (53) exp -> . relopexp
    (54) exp -> . const
    (55) exp -> . lvalue
    (56) exp -> . ID LRB explist RRB
    (57) exp -> . LRB exp RRB
    (58) exp -> . lvalue LRB RRB
    (59) exp -> . SUB exp
    (60) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (43) relopexp -> . exp relop exp
    (44) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 26
    LRB             shift and go to state 31
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 130
    lvalue                         shift and go to state 28
    relopexp                       shift and go to state 29
    const                          shift and go to state 30

state 125

    (37) stmt -> FOR LRB ID IN . RRB stmt

    RRB             shift and go to state 131


state 126

    (38) stmt -> IF LRB exp RRB . stmt elseiflist
    (39) stmt -> IF LRB exp RRB . stmt elseiflist ELSE stmt
    (30) stmt -> . RETURN exp SEMICOLON
    (31) stmt -> . exp SEMICOLON
    (32) stmt -> . block
    (33) stmt -> . vardec
    (34) stmt -> . WHILE LRB exp LRB stmt
    (35) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (36) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (37) stmt -> . FOR LRB ID IN RRB stmt
    (38) stmt -> . IF LRB exp RRB stmt elseiflist
    (39) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (40) stmt -> . PRINT LRB ID RRB SEMICOLON
    (51) exp -> . lvalue ASSIGN exp
    (52) exp -> . exp operator exp
    (53) exp -> . relopexp
    (54) exp -> . const
    (55) exp -> . lvalue
    (56) exp -> . ID LRB explist RRB
    (57) exp -> . LRB exp RRB
    (58) exp -> . lvalue LRB RRB
    (59) exp -> . SUB exp
    (60) exp -> . NOT exp
    (22) block -> . LCB stmtlist RCB
    (13) vardec -> . idlist COLON type
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (43) relopexp -> . exp relop exp
    (44) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (11) idlist -> . iddec
    (12) idlist -> . idlist COMMA iddec
    (9) iddec -> . lvalue
    (10) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 85
    WHILE           shift and go to state 89
    ON              shift and go to state 90
    FOR             shift and go to state 91
    IF              shift and go to state 93
    PRINT           shift and go to state 94
    ID              shift and go to state 92
    LRB             shift and go to state 31
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LCB             shift and go to state 40
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 86
    stmt                           shift and go to state 132
    block                          shift and go to state 87
    vardec                         shift and go to state 88
    lvalue                         shift and go to state 95
    relopexp                       shift and go to state 29
    const                          shift and go to state 30
    idlist                         shift and go to state 8
    iddec                          shift and go to state 11

state 127

    (40) stmt -> PRINT LRB ID RRB . SEMICOLON

    SEMICOLON       shift and go to state 133


state 128

    (34) stmt -> WHILE LRB exp LRB stmt .

    RCB             reduce using rule 34 (stmt -> WHILE LRB exp LRB stmt .)
    RETURN          reduce using rule 34 (stmt -> WHILE LRB exp LRB stmt .)
    WHILE           reduce using rule 34 (stmt -> WHILE LRB exp LRB stmt .)
    ON              reduce using rule 34 (stmt -> WHILE LRB exp LRB stmt .)
    FOR             reduce using rule 34 (stmt -> WHILE LRB exp LRB stmt .)
    IF              reduce using rule 34 (stmt -> WHILE LRB exp LRB stmt .)
    PRINT           reduce using rule 34 (stmt -> WHILE LRB exp LRB stmt .)
    ID              reduce using rule 34 (stmt -> WHILE LRB exp LRB stmt .)
    LRB             reduce using rule 34 (stmt -> WHILE LRB exp LRB stmt .)
    SUB             reduce using rule 34 (stmt -> WHILE LRB exp LRB stmt .)
    NOT             reduce using rule 34 (stmt -> WHILE LRB exp LRB stmt .)
    LCB             reduce using rule 34 (stmt -> WHILE LRB exp LRB stmt .)
    INTEGERNUMBER   reduce using rule 34 (stmt -> WHILE LRB exp LRB stmt .)
    FLOATNUMBER     reduce using rule 34 (stmt -> WHILE LRB exp LRB stmt .)
    TRUE            reduce using rule 34 (stmt -> WHILE LRB exp LRB stmt .)
    FALSE           reduce using rule 34 (stmt -> WHILE LRB exp LRB stmt .)
    ELSE            reduce using rule 34 (stmt -> WHILE LRB exp LRB stmt .)
    ELSEIF          reduce using rule 34 (stmt -> WHILE LRB exp LRB stmt .)
    WHERE           reduce using rule 34 (stmt -> WHILE LRB exp LRB stmt .)


state 129

    (35) stmt -> ON LRB exp RRB LCB . cases RCB SEMICOLON
    (28) cases -> . cases case
    (29) cases -> . eps
    (74) eps -> .

    RCB             reduce using rule 74 (eps -> .)
    WHERE           reduce using rule 74 (eps -> .)

    cases                          shift and go to state 134
    eps                            shift and go to state 135

state 130

    (36) stmt -> FOR LRB exp SEMICOLON exp . SEMICOLON exp RRB stmt
    (52) exp -> exp . operator exp
    (43) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (45) relop -> . GT
    (46) relop -> . GE
    (47) relop -> . LT
    (48) relop -> . LE
    (49) relop -> . EQ
    (50) relop -> . NE

    SEMICOLON       shift and go to state 136
    AND             shift and go to state 49
    OR              shift and go to state 50
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 131

    (37) stmt -> FOR LRB ID IN RRB . stmt
    (30) stmt -> . RETURN exp SEMICOLON
    (31) stmt -> . exp SEMICOLON
    (32) stmt -> . block
    (33) stmt -> . vardec
    (34) stmt -> . WHILE LRB exp LRB stmt
    (35) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (36) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (37) stmt -> . FOR LRB ID IN RRB stmt
    (38) stmt -> . IF LRB exp RRB stmt elseiflist
    (39) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (40) stmt -> . PRINT LRB ID RRB SEMICOLON
    (51) exp -> . lvalue ASSIGN exp
    (52) exp -> . exp operator exp
    (53) exp -> . relopexp
    (54) exp -> . const
    (55) exp -> . lvalue
    (56) exp -> . ID LRB explist RRB
    (57) exp -> . LRB exp RRB
    (58) exp -> . lvalue LRB RRB
    (59) exp -> . SUB exp
    (60) exp -> . NOT exp
    (22) block -> . LCB stmtlist RCB
    (13) vardec -> . idlist COLON type
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (43) relopexp -> . exp relop exp
    (44) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (11) idlist -> . iddec
    (12) idlist -> . idlist COMMA iddec
    (9) iddec -> . lvalue
    (10) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 85
    WHILE           shift and go to state 89
    ON              shift and go to state 90
    FOR             shift and go to state 91
    IF              shift and go to state 93
    PRINT           shift and go to state 94
    ID              shift and go to state 92
    LRB             shift and go to state 31
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LCB             shift and go to state 40
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    stmt                           shift and go to state 137
    exp                            shift and go to state 86
    block                          shift and go to state 87
    vardec                         shift and go to state 88
    lvalue                         shift and go to state 95
    relopexp                       shift and go to state 29
    const                          shift and go to state 30
    idlist                         shift and go to state 8
    iddec                          shift and go to state 11

state 132

    (38) stmt -> IF LRB exp RRB stmt . elseiflist
    (39) stmt -> IF LRB exp RRB stmt . elseiflist ELSE stmt
    (41) elseiflist -> . elseiflist ELSEIF LRB exp RRB stmt
    (42) elseiflist -> . eps
    (74) eps -> .

    RCB             reduce using rule 74 (eps -> .)
    RETURN          reduce using rule 74 (eps -> .)
    WHILE           reduce using rule 74 (eps -> .)
    ON              reduce using rule 74 (eps -> .)
    FOR             reduce using rule 74 (eps -> .)
    IF              reduce using rule 74 (eps -> .)
    PRINT           reduce using rule 74 (eps -> .)
    ID              reduce using rule 74 (eps -> .)
    LRB             reduce using rule 74 (eps -> .)
    SUB             reduce using rule 74 (eps -> .)
    NOT             reduce using rule 74 (eps -> .)
    LCB             reduce using rule 74 (eps -> .)
    INTEGERNUMBER   reduce using rule 74 (eps -> .)
    FLOATNUMBER     reduce using rule 74 (eps -> .)
    TRUE            reduce using rule 74 (eps -> .)
    FALSE           reduce using rule 74 (eps -> .)
    ELSE            reduce using rule 74 (eps -> .)
    ELSEIF          reduce using rule 74 (eps -> .)
    WHERE           reduce using rule 74 (eps -> .)

    elseiflist                     shift and go to state 138
    eps                            shift and go to state 139

state 133

    (40) stmt -> PRINT LRB ID RRB SEMICOLON .

    RCB             reduce using rule 40 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    RETURN          reduce using rule 40 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    WHILE           reduce using rule 40 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    ON              reduce using rule 40 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    FOR             reduce using rule 40 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    IF              reduce using rule 40 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    PRINT           reduce using rule 40 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    ID              reduce using rule 40 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    LRB             reduce using rule 40 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    SUB             reduce using rule 40 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    NOT             reduce using rule 40 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    LCB             reduce using rule 40 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    INTEGERNUMBER   reduce using rule 40 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    FLOATNUMBER     reduce using rule 40 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    TRUE            reduce using rule 40 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    FALSE           reduce using rule 40 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    ELSE            reduce using rule 40 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    ELSEIF          reduce using rule 40 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    WHERE           reduce using rule 40 (stmt -> PRINT LRB ID RRB SEMICOLON .)


state 134

    (35) stmt -> ON LRB exp RRB LCB cases . RCB SEMICOLON
    (28) cases -> cases . case
    (27) case -> . WHERE const COLON stmtlist

    RCB             shift and go to state 140
    WHERE           shift and go to state 142

    case                           shift and go to state 141

state 135

    (29) cases -> eps .

    RCB             reduce using rule 29 (cases -> eps .)
    WHERE           reduce using rule 29 (cases -> eps .)


state 136

    (36) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON . exp RRB stmt
    (51) exp -> . lvalue ASSIGN exp
    (52) exp -> . exp operator exp
    (53) exp -> . relopexp
    (54) exp -> . const
    (55) exp -> . lvalue
    (56) exp -> . ID LRB explist RRB
    (57) exp -> . LRB exp RRB
    (58) exp -> . lvalue LRB RRB
    (59) exp -> . SUB exp
    (60) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (43) relopexp -> . exp relop exp
    (44) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 26
    LRB             shift and go to state 31
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 143
    lvalue                         shift and go to state 28
    relopexp                       shift and go to state 29
    const                          shift and go to state 30

state 137

    (37) stmt -> FOR LRB ID IN RRB stmt .

    RCB             reduce using rule 37 (stmt -> FOR LRB ID IN RRB stmt .)
    RETURN          reduce using rule 37 (stmt -> FOR LRB ID IN RRB stmt .)
    WHILE           reduce using rule 37 (stmt -> FOR LRB ID IN RRB stmt .)
    ON              reduce using rule 37 (stmt -> FOR LRB ID IN RRB stmt .)
    FOR             reduce using rule 37 (stmt -> FOR LRB ID IN RRB stmt .)
    IF              reduce using rule 37 (stmt -> FOR LRB ID IN RRB stmt .)
    PRINT           reduce using rule 37 (stmt -> FOR LRB ID IN RRB stmt .)
    ID              reduce using rule 37 (stmt -> FOR LRB ID IN RRB stmt .)
    LRB             reduce using rule 37 (stmt -> FOR LRB ID IN RRB stmt .)
    SUB             reduce using rule 37 (stmt -> FOR LRB ID IN RRB stmt .)
    NOT             reduce using rule 37 (stmt -> FOR LRB ID IN RRB stmt .)
    LCB             reduce using rule 37 (stmt -> FOR LRB ID IN RRB stmt .)
    INTEGERNUMBER   reduce using rule 37 (stmt -> FOR LRB ID IN RRB stmt .)
    FLOATNUMBER     reduce using rule 37 (stmt -> FOR LRB ID IN RRB stmt .)
    TRUE            reduce using rule 37 (stmt -> FOR LRB ID IN RRB stmt .)
    FALSE           reduce using rule 37 (stmt -> FOR LRB ID IN RRB stmt .)
    ELSE            reduce using rule 37 (stmt -> FOR LRB ID IN RRB stmt .)
    ELSEIF          reduce using rule 37 (stmt -> FOR LRB ID IN RRB stmt .)
    WHERE           reduce using rule 37 (stmt -> FOR LRB ID IN RRB stmt .)


state 138

    (38) stmt -> IF LRB exp RRB stmt elseiflist .
    (39) stmt -> IF LRB exp RRB stmt elseiflist . ELSE stmt
    (41) elseiflist -> elseiflist . ELSEIF LRB exp RRB stmt

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
    RCB             reduce using rule 38 (stmt -> IF LRB exp RRB stmt elseiflist .)
    RETURN          reduce using rule 38 (stmt -> IF LRB exp RRB stmt elseiflist .)
    WHILE           reduce using rule 38 (stmt -> IF LRB exp RRB stmt elseiflist .)
    ON              reduce using rule 38 (stmt -> IF LRB exp RRB stmt elseiflist .)
    FOR             reduce using rule 38 (stmt -> IF LRB exp RRB stmt elseiflist .)
    IF              reduce using rule 38 (stmt -> IF LRB exp RRB stmt elseiflist .)
    PRINT           reduce using rule 38 (stmt -> IF LRB exp RRB stmt elseiflist .)
    ID              reduce using rule 38 (stmt -> IF LRB exp RRB stmt elseiflist .)
    LRB             reduce using rule 38 (stmt -> IF LRB exp RRB stmt elseiflist .)
    SUB             reduce using rule 38 (stmt -> IF LRB exp RRB stmt elseiflist .)
    NOT             reduce using rule 38 (stmt -> IF LRB exp RRB stmt elseiflist .)
    LCB             reduce using rule 38 (stmt -> IF LRB exp RRB stmt elseiflist .)
    INTEGERNUMBER   reduce using rule 38 (stmt -> IF LRB exp RRB stmt elseiflist .)
    FLOATNUMBER     reduce using rule 38 (stmt -> IF LRB exp RRB stmt elseiflist .)
    TRUE            reduce using rule 38 (stmt -> IF LRB exp RRB stmt elseiflist .)
    FALSE           reduce using rule 38 (stmt -> IF LRB exp RRB stmt elseiflist .)
    WHERE           reduce using rule 38 (stmt -> IF LRB exp RRB stmt elseiflist .)
    ELSE            shift and go to state 144
    ELSEIF          shift and go to state 145

  ! ELSE            [ reduce using rule 38 (stmt -> IF LRB exp RRB stmt elseiflist .) ]
  ! ELSEIF          [ reduce using rule 38 (stmt -> IF LRB exp RRB stmt elseiflist .) ]


state 139

    (42) elseiflist -> eps .

    RCB             reduce using rule 42 (elseiflist -> eps .)
    RETURN          reduce using rule 42 (elseiflist -> eps .)
    WHILE           reduce using rule 42 (elseiflist -> eps .)
    ON              reduce using rule 42 (elseiflist -> eps .)
    FOR             reduce using rule 42 (elseiflist -> eps .)
    IF              reduce using rule 42 (elseiflist -> eps .)
    PRINT           reduce using rule 42 (elseiflist -> eps .)
    ID              reduce using rule 42 (elseiflist -> eps .)
    LRB             reduce using rule 42 (elseiflist -> eps .)
    SUB             reduce using rule 42 (elseiflist -> eps .)
    NOT             reduce using rule 42 (elseiflist -> eps .)
    LCB             reduce using rule 42 (elseiflist -> eps .)
    INTEGERNUMBER   reduce using rule 42 (elseiflist -> eps .)
    FLOATNUMBER     reduce using rule 42 (elseiflist -> eps .)
    TRUE            reduce using rule 42 (elseiflist -> eps .)
    FALSE           reduce using rule 42 (elseiflist -> eps .)
    ELSE            reduce using rule 42 (elseiflist -> eps .)
    ELSEIF          reduce using rule 42 (elseiflist -> eps .)
    WHERE           reduce using rule 42 (elseiflist -> eps .)


state 140

    (35) stmt -> ON LRB exp RRB LCB cases RCB . SEMICOLON

    SEMICOLON       shift and go to state 146


state 141

    (28) cases -> cases case .

    RCB             reduce using rule 28 (cases -> cases case .)
    WHERE           reduce using rule 28 (cases -> cases case .)


state 142

    (27) case -> WHERE . const COLON stmtlist
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    const                          shift and go to state 147

state 143

    (36) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp . RRB stmt
    (52) exp -> exp . operator exp
    (43) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (45) relop -> . GT
    (46) relop -> . GE
    (47) relop -> . LT
    (48) relop -> . LE
    (49) relop -> . EQ
    (50) relop -> . NE

    RRB             shift and go to state 148
    AND             shift and go to state 49
    OR              shift and go to state 50
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 144

    (39) stmt -> IF LRB exp RRB stmt elseiflist ELSE . stmt
    (30) stmt -> . RETURN exp SEMICOLON
    (31) stmt -> . exp SEMICOLON
    (32) stmt -> . block
    (33) stmt -> . vardec
    (34) stmt -> . WHILE LRB exp LRB stmt
    (35) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (36) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (37) stmt -> . FOR LRB ID IN RRB stmt
    (38) stmt -> . IF LRB exp RRB stmt elseiflist
    (39) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (40) stmt -> . PRINT LRB ID RRB SEMICOLON
    (51) exp -> . lvalue ASSIGN exp
    (52) exp -> . exp operator exp
    (53) exp -> . relopexp
    (54) exp -> . const
    (55) exp -> . lvalue
    (56) exp -> . ID LRB explist RRB
    (57) exp -> . LRB exp RRB
    (58) exp -> . lvalue LRB RRB
    (59) exp -> . SUB exp
    (60) exp -> . NOT exp
    (22) block -> . LCB stmtlist RCB
    (13) vardec -> . idlist COLON type
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (43) relopexp -> . exp relop exp
    (44) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (11) idlist -> . iddec
    (12) idlist -> . idlist COMMA iddec
    (9) iddec -> . lvalue
    (10) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 85
    WHILE           shift and go to state 89
    ON              shift and go to state 90
    FOR             shift and go to state 91
    IF              shift and go to state 93
    PRINT           shift and go to state 94
    ID              shift and go to state 92
    LRB             shift and go to state 31
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LCB             shift and go to state 40
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 86
    stmt                           shift and go to state 149
    block                          shift and go to state 87
    vardec                         shift and go to state 88
    lvalue                         shift and go to state 95
    relopexp                       shift and go to state 29
    const                          shift and go to state 30
    idlist                         shift and go to state 8
    iddec                          shift and go to state 11

state 145

    (41) elseiflist -> elseiflist ELSEIF . LRB exp RRB stmt

    LRB             shift and go to state 150


state 146

    (35) stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .

    RCB             reduce using rule 35 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    RETURN          reduce using rule 35 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    WHILE           reduce using rule 35 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ON              reduce using rule 35 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    FOR             reduce using rule 35 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    IF              reduce using rule 35 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    PRINT           reduce using rule 35 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ID              reduce using rule 35 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    LRB             reduce using rule 35 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    SUB             reduce using rule 35 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    NOT             reduce using rule 35 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    LCB             reduce using rule 35 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    INTEGERNUMBER   reduce using rule 35 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    FLOATNUMBER     reduce using rule 35 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    TRUE            reduce using rule 35 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    FALSE           reduce using rule 35 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ELSE            reduce using rule 35 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ELSEIF          reduce using rule 35 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    WHERE           reduce using rule 35 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)


state 147

    (27) case -> WHERE const . COLON stmtlist

    COLON           shift and go to state 151


state 148

    (36) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB . stmt
    (30) stmt -> . RETURN exp SEMICOLON
    (31) stmt -> . exp SEMICOLON
    (32) stmt -> . block
    (33) stmt -> . vardec
    (34) stmt -> . WHILE LRB exp LRB stmt
    (35) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (36) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (37) stmt -> . FOR LRB ID IN RRB stmt
    (38) stmt -> . IF LRB exp RRB stmt elseiflist
    (39) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (40) stmt -> . PRINT LRB ID RRB SEMICOLON
    (51) exp -> . lvalue ASSIGN exp
    (52) exp -> . exp operator exp
    (53) exp -> . relopexp
    (54) exp -> . const
    (55) exp -> . lvalue
    (56) exp -> . ID LRB explist RRB
    (57) exp -> . LRB exp RRB
    (58) exp -> . lvalue LRB RRB
    (59) exp -> . SUB exp
    (60) exp -> . NOT exp
    (22) block -> . LCB stmtlist RCB
    (13) vardec -> . idlist COLON type
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (43) relopexp -> . exp relop exp
    (44) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (11) idlist -> . iddec
    (12) idlist -> . idlist COMMA iddec
    (9) iddec -> . lvalue
    (10) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 85
    WHILE           shift and go to state 89
    ON              shift and go to state 90
    FOR             shift and go to state 91
    IF              shift and go to state 93
    PRINT           shift and go to state 94
    ID              shift and go to state 92
    LRB             shift and go to state 31
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LCB             shift and go to state 40
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 86
    stmt                           shift and go to state 152
    block                          shift and go to state 87
    vardec                         shift and go to state 88
    lvalue                         shift and go to state 95
    relopexp                       shift and go to state 29
    const                          shift and go to state 30
    idlist                         shift and go to state 8
    iddec                          shift and go to state 11

state 149

    (39) stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .

    RCB             reduce using rule 39 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    RETURN          reduce using rule 39 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    WHILE           reduce using rule 39 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    ON              reduce using rule 39 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    FOR             reduce using rule 39 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    IF              reduce using rule 39 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    PRINT           reduce using rule 39 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    ID              reduce using rule 39 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    LRB             reduce using rule 39 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    SUB             reduce using rule 39 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    NOT             reduce using rule 39 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    LCB             reduce using rule 39 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    INTEGERNUMBER   reduce using rule 39 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    FLOATNUMBER     reduce using rule 39 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    TRUE            reduce using rule 39 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    FALSE           reduce using rule 39 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    ELSE            reduce using rule 39 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    ELSEIF          reduce using rule 39 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    WHERE           reduce using rule 39 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)


state 150

    (41) elseiflist -> elseiflist ELSEIF LRB . exp RRB stmt
    (51) exp -> . lvalue ASSIGN exp
    (52) exp -> . exp operator exp
    (53) exp -> . relopexp
    (54) exp -> . const
    (55) exp -> . lvalue
    (56) exp -> . ID LRB explist RRB
    (57) exp -> . LRB exp RRB
    (58) exp -> . lvalue LRB RRB
    (59) exp -> . SUB exp
    (60) exp -> . NOT exp
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (43) relopexp -> . exp relop exp
    (44) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 26
    LRB             shift and go to state 31
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 153
    lvalue                         shift and go to state 28
    relopexp                       shift and go to state 29
    const                          shift and go to state 30

state 151

    (27) case -> WHERE const COLON . stmtlist
    (23) stmtlist -> . stmtlist stmt
    (24) stmtlist -> . eps
    (74) eps -> .

    RETURN          reduce using rule 74 (eps -> .)
    WHILE           reduce using rule 74 (eps -> .)
    ON              reduce using rule 74 (eps -> .)
    FOR             reduce using rule 74 (eps -> .)
    IF              reduce using rule 74 (eps -> .)
    PRINT           reduce using rule 74 (eps -> .)
    ID              reduce using rule 74 (eps -> .)
    LRB             reduce using rule 74 (eps -> .)
    SUB             reduce using rule 74 (eps -> .)
    NOT             reduce using rule 74 (eps -> .)
    LCB             reduce using rule 74 (eps -> .)
    INTEGERNUMBER   reduce using rule 74 (eps -> .)
    FLOATNUMBER     reduce using rule 74 (eps -> .)
    TRUE            reduce using rule 74 (eps -> .)
    FALSE           reduce using rule 74 (eps -> .)
    RCB             reduce using rule 74 (eps -> .)
    WHERE           reduce using rule 74 (eps -> .)

    stmtlist                       shift and go to state 154
    eps                            shift and go to state 70

state 152

    (36) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .

    RCB             reduce using rule 36 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    RETURN          reduce using rule 36 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    WHILE           reduce using rule 36 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ON              reduce using rule 36 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    FOR             reduce using rule 36 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    IF              reduce using rule 36 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    PRINT           reduce using rule 36 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ID              reduce using rule 36 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    LRB             reduce using rule 36 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    SUB             reduce using rule 36 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    NOT             reduce using rule 36 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    LCB             reduce using rule 36 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 36 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    FLOATNUMBER     reduce using rule 36 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    TRUE            reduce using rule 36 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    FALSE           reduce using rule 36 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ELSE            reduce using rule 36 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ELSEIF          reduce using rule 36 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    WHERE           reduce using rule 36 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)


state 153

    (41) elseiflist -> elseiflist ELSEIF LRB exp . RRB stmt
    (52) exp -> exp . operator exp
    (43) relopexp -> exp . relop exp
    (61) operator -> . AND
    (62) operator -> . OR
    (63) operator -> . SUM
    (64) operator -> . SUB
    (65) operator -> . MUL
    (66) operator -> . DIV
    (67) operator -> . MOD
    (45) relop -> . GT
    (46) relop -> . GE
    (47) relop -> . LT
    (48) relop -> . LE
    (49) relop -> . EQ
    (50) relop -> . NE

    RRB             shift and go to state 155
    AND             shift and go to state 49
    OR              shift and go to state 50
    SUM             shift and go to state 51
    SUB             shift and go to state 52
    MUL             shift and go to state 53
    DIV             shift and go to state 54
    MOD             shift and go to state 55
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

    operator                       shift and go to state 47
    relop                          shift and go to state 48

state 154

    (27) case -> WHERE const COLON stmtlist .
    (23) stmtlist -> stmtlist . stmt
    (30) stmt -> . RETURN exp SEMICOLON
    (31) stmt -> . exp SEMICOLON
    (32) stmt -> . block
    (33) stmt -> . vardec
    (34) stmt -> . WHILE LRB exp LRB stmt
    (35) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (36) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (37) stmt -> . FOR LRB ID IN RRB stmt
    (38) stmt -> . IF LRB exp RRB stmt elseiflist
    (39) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (40) stmt -> . PRINT LRB ID RRB SEMICOLON
    (51) exp -> . lvalue ASSIGN exp
    (52) exp -> . exp operator exp
    (53) exp -> . relopexp
    (54) exp -> . const
    (55) exp -> . lvalue
    (56) exp -> . ID LRB explist RRB
    (57) exp -> . LRB exp RRB
    (58) exp -> . lvalue LRB RRB
    (59) exp -> . SUB exp
    (60) exp -> . NOT exp
    (22) block -> . LCB stmtlist RCB
    (13) vardec -> . idlist COLON type
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (43) relopexp -> . exp relop exp
    (44) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (11) idlist -> . iddec
    (12) idlist -> . idlist COMMA iddec
    (9) iddec -> . lvalue
    (10) iddec -> . ID ASSIGN exp

    RCB             reduce using rule 27 (case -> WHERE const COLON stmtlist .)
    WHERE           reduce using rule 27 (case -> WHERE const COLON stmtlist .)
    RETURN          shift and go to state 85
    WHILE           shift and go to state 89
    ON              shift and go to state 90
    FOR             shift and go to state 91
    IF              shift and go to state 93
    PRINT           shift and go to state 94
    ID              shift and go to state 92
    LRB             shift and go to state 31
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LCB             shift and go to state 40
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    const                          shift and go to state 30
    stmt                           shift and go to state 84
    exp                            shift and go to state 86
    block                          shift and go to state 87
    vardec                         shift and go to state 88
    lvalue                         shift and go to state 95
    relopexp                       shift and go to state 29
    idlist                         shift and go to state 8
    iddec                          shift and go to state 11

state 155

    (41) elseiflist -> elseiflist ELSEIF LRB exp RRB . stmt
    (30) stmt -> . RETURN exp SEMICOLON
    (31) stmt -> . exp SEMICOLON
    (32) stmt -> . block
    (33) stmt -> . vardec
    (34) stmt -> . WHILE LRB exp LRB stmt
    (35) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (36) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (37) stmt -> . FOR LRB ID IN RRB stmt
    (38) stmt -> . IF LRB exp RRB stmt elseiflist
    (39) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (40) stmt -> . PRINT LRB ID RRB SEMICOLON
    (51) exp -> . lvalue ASSIGN exp
    (52) exp -> . exp operator exp
    (53) exp -> . relopexp
    (54) exp -> . const
    (55) exp -> . lvalue
    (56) exp -> . ID LRB explist RRB
    (57) exp -> . LRB exp RRB
    (58) exp -> . lvalue LRB RRB
    (59) exp -> . SUB exp
    (60) exp -> . NOT exp
    (22) block -> . LCB stmtlist RCB
    (13) vardec -> . idlist COLON type
    (25) lvalue -> . ID
    (26) lvalue -> . ID LSB exp RSB
    (43) relopexp -> . exp relop exp
    (44) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (11) idlist -> . iddec
    (12) idlist -> . idlist COMMA iddec
    (9) iddec -> . lvalue
    (10) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 85
    WHILE           shift and go to state 89
    ON              shift and go to state 90
    FOR             shift and go to state 91
    IF              shift and go to state 93
    PRINT           shift and go to state 94
    ID              shift and go to state 92
    LRB             shift and go to state 31
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LCB             shift and go to state 40
    INTEGERNUMBER   shift and go to state 34
    FLOATNUMBER     shift and go to state 35
    TRUE            shift and go to state 36
    FALSE           shift and go to state 37

    exp                            shift and go to state 86
    stmt                           shift and go to state 156
    block                          shift and go to state 87
    vardec                         shift and go to state 88
    lvalue                         shift and go to state 95
    relopexp                       shift and go to state 29
    const                          shift and go to state 30
    idlist                         shift and go to state 8
    iddec                          shift and go to state 11

state 156

    (41) elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .

    RCB             reduce using rule 41 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    RETURN          reduce using rule 41 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    WHILE           reduce using rule 41 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    ON              reduce using rule 41 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    FOR             reduce using rule 41 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    IF              reduce using rule 41 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    PRINT           reduce using rule 41 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    ID              reduce using rule 41 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    LRB             reduce using rule 41 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    SUB             reduce using rule 41 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    NOT             reduce using rule 41 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    LCB             reduce using rule 41 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 41 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    FLOATNUMBER     reduce using rule 41 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    TRUE            reduce using rule 41 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    FALSE           reduce using rule 41 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    ELSE            reduce using rule 41 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    ELSEIF          reduce using rule 41 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    WHERE           reduce using rule 41 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LRB in state 26 resolved as shift
WARNING: shift/reduce conflict for LRB in state 28 resolved as shift
WARNING: shift/reduce conflict for GT in state 29 resolved as shift
WARNING: shift/reduce conflict for GE in state 29 resolved as shift
WARNING: shift/reduce conflict for LT in state 29 resolved as shift
WARNING: shift/reduce conflict for LE in state 29 resolved as shift
WARNING: shift/reduce conflict for EQ in state 29 resolved as shift
WARNING: shift/reduce conflict for NE in state 29 resolved as shift
WARNING: shift/reduce conflict for AND in state 77 resolved as shift
WARNING: shift/reduce conflict for OR in state 77 resolved as shift
WARNING: shift/reduce conflict for SUM in state 77 resolved as shift
WARNING: shift/reduce conflict for SUB in state 77 resolved as shift
WARNING: shift/reduce conflict for MUL in state 77 resolved as shift
WARNING: shift/reduce conflict for DIV in state 77 resolved as shift
WARNING: shift/reduce conflict for MOD in state 77 resolved as shift
WARNING: shift/reduce conflict for GT in state 77 resolved as shift
WARNING: shift/reduce conflict for GE in state 77 resolved as shift
WARNING: shift/reduce conflict for LT in state 77 resolved as shift
WARNING: shift/reduce conflict for LE in state 77 resolved as shift
WARNING: shift/reduce conflict for EQ in state 77 resolved as shift
WARNING: shift/reduce conflict for NE in state 77 resolved as shift
WARNING: shift/reduce conflict for AND in state 78 resolved as shift
WARNING: shift/reduce conflict for OR in state 78 resolved as shift
WARNING: shift/reduce conflict for SUM in state 78 resolved as shift
WARNING: shift/reduce conflict for SUB in state 78 resolved as shift
WARNING: shift/reduce conflict for MUL in state 78 resolved as shift
WARNING: shift/reduce conflict for DIV in state 78 resolved as shift
WARNING: shift/reduce conflict for MOD in state 78 resolved as shift
WARNING: shift/reduce conflict for GT in state 78 resolved as shift
WARNING: shift/reduce conflict for GE in state 78 resolved as shift
WARNING: shift/reduce conflict for LT in state 78 resolved as shift
WARNING: shift/reduce conflict for LE in state 78 resolved as shift
WARNING: shift/reduce conflict for EQ in state 78 resolved as shift
WARNING: shift/reduce conflict for NE in state 78 resolved as shift
WARNING: shift/reduce conflict for AND in state 81 resolved as shift
WARNING: shift/reduce conflict for OR in state 81 resolved as shift
WARNING: shift/reduce conflict for SUM in state 81 resolved as shift
WARNING: shift/reduce conflict for SUB in state 81 resolved as shift
WARNING: shift/reduce conflict for MUL in state 81 resolved as shift
WARNING: shift/reduce conflict for DIV in state 81 resolved as shift
WARNING: shift/reduce conflict for MOD in state 81 resolved as shift
WARNING: shift/reduce conflict for GT in state 81 resolved as shift
WARNING: shift/reduce conflict for GE in state 81 resolved as shift
WARNING: shift/reduce conflict for LT in state 81 resolved as shift
WARNING: shift/reduce conflict for LE in state 81 resolved as shift
WARNING: shift/reduce conflict for EQ in state 81 resolved as shift
WARNING: shift/reduce conflict for NE in state 81 resolved as shift
WARNING: shift/reduce conflict for LRB in state 92 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 92 resolved as shift
WARNING: shift/reduce conflict for LRB in state 117 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 138 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 138 resolved as shift
