Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ERROR

Grammar

Rule 0     S' -> program
Rule 1     program -> declist MAIN LRB RRB block
Rule 2     declist -> declist dec
Rule 3     declist -> eps
Rule 4     dec -> vardec
Rule 5     dec -> funcdec
Rule 6     vardec -> idlist COLON type SEMICOLON
Rule 7     funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block
Rule 8     funcdec -> FUNCTION ID LRB paramdecs RRB block
Rule 9     type -> INTEGER
Rule 10    type -> FLOAT
Rule 11    type -> BOOLEAN
Rule 12    iddec -> lvalue ASSIGN exp
Rule 13    iddec -> lvalue
Rule 14    idlist -> idlist COMMA iddec
Rule 15    idlist -> iddec
Rule 16    paramdecs -> paramdecslist
Rule 17    paramdecs -> eps
Rule 18    paramdecslist -> paramdec
Rule 19    paramdecslist -> paramdecslist COMMA paramdec
Rule 20    paramdec -> ID LSB RSB COLON type
Rule 21    paramdec -> ID COLON type
Rule 22    block -> LCB stmtlist RCB
Rule 23    stmtlist -> stmtlist stmt
Rule 24    stmtlist -> eps
Rule 25    lvalue -> ID LRB explist RRB
Rule 26    lvalue -> ID
Rule 27    lvalue -> ID LSB exp RSB
Rule 28    case -> WHERE const COLON stmtlist
Rule 29    cases -> cases case
Rule 30    cases -> eps
Rule 31    stmt -> ostmt
Rule 32    stmt -> cstmt
Rule 33    ostmt -> WHILE LRB exp RRB ostmt
Rule 34    ostmt -> FOR LRB ID IN ID RRB ostmt
Rule 35    ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt
Rule 36    ostmt -> IF LRB exp RRB cstmt elseiflist ELSE ostmt
Rule 37    ostmt -> IF LRB exp RRB cstmt
Rule 38    ostmt -> IF LRB exp RRB ostmt
Rule 39    cstmt -> WHILE LRB exp RRB cstmt
Rule 40    cstmt -> FOR LRB ID IN ID RRB cstmt
Rule 41    cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt
Rule 42    cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt
Rule 43    cstmt -> simple
Rule 44    elseiflist -> elseiflist ELSEIF LRB exp RRB cstmt
Rule 45    elseiflist -> eps
Rule 46    simple -> block
Rule 47    simple -> vardec
Rule 48    simple -> ON LRB exp RRB LCB cases RCB SEMICOLON
Rule 49    simple -> RETURN exp SEMICOLON
Rule 50    simple -> exp SEMICOLON
Rule 51    simple -> PRINT LRB ID RRB SEMICOLON
Rule 52    relop -> GT
Rule 53    relop -> GE
Rule 54    relop -> LT
Rule 55    relop -> LE
Rule 56    relop -> EQ
Rule 57    relop -> NE
Rule 58    exp -> exp relop exp
Rule 59    exp -> lvalue
Rule 60    exp -> SUB exp
Rule 61    exp -> NOT exp
Rule 62    exp -> LRB exp RRB
Rule 63    exp -> lvalue ASSIGN exp
Rule 64    exp -> const
Rule 65    exp -> exp operator1 exp
Rule 66    exp -> exp operator2 exp
Rule 67    exp -> exp operator3 exp
Rule 68    operator1 -> MUL
Rule 69    operator1 -> DIV
Rule 70    operator1 -> MOD
Rule 71    operator2 -> SUM
Rule 72    operator2 -> SUB
Rule 73    operator3 -> AND
Rule 74    operator3 -> OR
Rule 75    const -> INTEGERNUMBER
Rule 76    const -> FLOATNUMBER
Rule 77    const -> TRUE
Rule 78    const -> FALSE
Rule 79    explist -> exp
Rule 80    explist -> explist COMMA exp
Rule 81    explist -> eps
Rule 82    eps -> <empty>

Terminals, with rules where they appear

AND                  : 73
ASSIGN               : 12 63
BOOLEAN              : 11
COLON                : 6 7 20 21 28
COMMA                : 14 19 80
DIV                  : 69
ELSE                 : 36 42
ELSEIF               : 44
EQ                   : 56
ERROR                : 
FALSE                : 78
FLOAT                : 10
FLOATNUMBER          : 76
FOR                  : 34 35 40 41
FUNCTION             : 7 8
GE                   : 53
GT                   : 52
ID                   : 7 8 20 21 25 26 27 34 34 40 40 51
IF                   : 36 37 38 42
IN                   : 34 40
INTEGER              : 9
INTEGERNUMBER        : 75
LCB                  : 22 48
LE                   : 55
LRB                  : 1 7 8 25 33 34 35 36 37 38 39 40 41 42 44 48 51 62
LSB                  : 20 27
LT                   : 54
MAIN                 : 1
MOD                  : 70
MUL                  : 68
NE                   : 57
NOT                  : 61
ON                   : 48
OR                   : 74
PRINT                : 51
RCB                  : 22 48
RETURN               : 49
RRB                  : 1 7 8 25 33 34 35 36 37 38 39 40 41 42 44 48 51 62
RSB                  : 20 27
SEMICOLON            : 6 35 35 41 41 48 49 50 51
SUB                  : 60 72
SUM                  : 71
TRUE                 : 77
WHERE                : 28
WHILE                : 33 39
error                : 

Nonterminals, with rules where they appear

block                : 1 7 8 46
case                 : 29
cases                : 29 48
const                : 28 64
cstmt                : 32 36 37 39 40 41 42 42 44
dec                  : 2
declist              : 1 2
elseiflist           : 36 42 44
eps                  : 3 17 24 30 45 81
exp                  : 12 27 33 35 35 35 36 37 38 39 41 41 41 42 44 48 49 50 58 58 60 61 62 63 65 65 66 66 67 67 79 80
explist              : 25 80
funcdec              : 5
iddec                : 14 15
idlist               : 6 14
lvalue               : 12 13 59 63
operator1            : 65
operator2            : 66
operator3            : 67
ostmt                : 31 33 34 35 36 38
paramdec             : 18 19
paramdecs            : 7 8
paramdecslist        : 16 19
program              : 0
relop                : 58
simple               : 43
stmt                 : 23
stmtlist             : 22 23 28
type                 : 6 7 20 21
vardec               : 4 47

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declist MAIN LRB RRB block
    (2) declist -> . declist dec
    (3) declist -> . eps
    (82) eps -> .

    MAIN            reduce using rule 82 (eps -> .)
    FUNCTION        reduce using rule 82 (eps -> .)
    ID              reduce using rule 82 (eps -> .)

    program                        shift and go to state 1
    declist                        shift and go to state 2
    eps                            shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> declist . MAIN LRB RRB block
    (2) declist -> declist . dec
    (4) dec -> . vardec
    (5) dec -> . funcdec
    (6) vardec -> . idlist COLON type SEMICOLON
    (7) funcdec -> . FUNCTION ID LRB paramdecs RRB COLON type block
    (8) funcdec -> . FUNCTION ID LRB paramdecs RRB block
    (14) idlist -> . idlist COMMA iddec
    (15) idlist -> . iddec
    (12) iddec -> . lvalue ASSIGN exp
    (13) iddec -> . lvalue
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB

    MAIN            shift and go to state 4
    FUNCTION        shift and go to state 9
    ID              shift and go to state 10

    dec                            shift and go to state 5
    vardec                         shift and go to state 6
    funcdec                        shift and go to state 7
    idlist                         shift and go to state 8
    iddec                          shift and go to state 11
    lvalue                         shift and go to state 12

state 3

    (3) declist -> eps .

    MAIN            reduce using rule 3 (declist -> eps .)
    FUNCTION        reduce using rule 3 (declist -> eps .)
    ID              reduce using rule 3 (declist -> eps .)


state 4

    (1) program -> declist MAIN . LRB RRB block

    LRB             shift and go to state 13


state 5

    (2) declist -> declist dec .

    MAIN            reduce using rule 2 (declist -> declist dec .)
    FUNCTION        reduce using rule 2 (declist -> declist dec .)
    ID              reduce using rule 2 (declist -> declist dec .)


state 6

    (4) dec -> vardec .

    MAIN            reduce using rule 4 (dec -> vardec .)
    FUNCTION        reduce using rule 4 (dec -> vardec .)
    ID              reduce using rule 4 (dec -> vardec .)


state 7

    (5) dec -> funcdec .

    MAIN            reduce using rule 5 (dec -> funcdec .)
    FUNCTION        reduce using rule 5 (dec -> funcdec .)
    ID              reduce using rule 5 (dec -> funcdec .)


state 8

    (6) vardec -> idlist . COLON type SEMICOLON
    (14) idlist -> idlist . COMMA iddec

    COLON           shift and go to state 14
    COMMA           shift and go to state 15


state 9

    (7) funcdec -> FUNCTION . ID LRB paramdecs RRB COLON type block
    (8) funcdec -> FUNCTION . ID LRB paramdecs RRB block

    ID              shift and go to state 16


state 10

    (25) lvalue -> ID . LRB explist RRB
    (26) lvalue -> ID .
    (27) lvalue -> ID . LSB exp RSB

    LRB             shift and go to state 17
    ASSIGN          reduce using rule 26 (lvalue -> ID .)
    COLON           reduce using rule 26 (lvalue -> ID .)
    COMMA           reduce using rule 26 (lvalue -> ID .)
    GT              reduce using rule 26 (lvalue -> ID .)
    GE              reduce using rule 26 (lvalue -> ID .)
    LT              reduce using rule 26 (lvalue -> ID .)
    LE              reduce using rule 26 (lvalue -> ID .)
    EQ              reduce using rule 26 (lvalue -> ID .)
    NE              reduce using rule 26 (lvalue -> ID .)
    MUL             reduce using rule 26 (lvalue -> ID .)
    DIV             reduce using rule 26 (lvalue -> ID .)
    MOD             reduce using rule 26 (lvalue -> ID .)
    SUM             reduce using rule 26 (lvalue -> ID .)
    SUB             reduce using rule 26 (lvalue -> ID .)
    AND             reduce using rule 26 (lvalue -> ID .)
    OR              reduce using rule 26 (lvalue -> ID .)
    RRB             reduce using rule 26 (lvalue -> ID .)
    RSB             reduce using rule 26 (lvalue -> ID .)
    SEMICOLON       reduce using rule 26 (lvalue -> ID .)
    LSB             shift and go to state 18


state 11

    (15) idlist -> iddec .

    COLON           reduce using rule 15 (idlist -> iddec .)
    COMMA           reduce using rule 15 (idlist -> iddec .)


state 12

    (12) iddec -> lvalue . ASSIGN exp
    (13) iddec -> lvalue .

    ASSIGN          shift and go to state 19
    COLON           reduce using rule 13 (iddec -> lvalue .)
    COMMA           reduce using rule 13 (iddec -> lvalue .)


state 13

    (1) program -> declist MAIN LRB . RRB block

    RRB             shift and go to state 20


state 14

    (6) vardec -> idlist COLON . type SEMICOLON
    (9) type -> . INTEGER
    (10) type -> . FLOAT
    (11) type -> . BOOLEAN

    INTEGER         shift and go to state 22
    FLOAT           shift and go to state 23
    BOOLEAN         shift and go to state 24

    type                           shift and go to state 21

state 15

    (14) idlist -> idlist COMMA . iddec
    (12) iddec -> . lvalue ASSIGN exp
    (13) iddec -> . lvalue
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB

    ID              shift and go to state 10

    iddec                          shift and go to state 25
    lvalue                         shift and go to state 12

state 16

    (7) funcdec -> FUNCTION ID . LRB paramdecs RRB COLON type block
    (8) funcdec -> FUNCTION ID . LRB paramdecs RRB block

    LRB             shift and go to state 26


state 17

    (25) lvalue -> ID LRB . explist RRB
    (79) explist -> . exp
    (80) explist -> . explist COMMA exp
    (81) explist -> . eps
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (82) eps -> .
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE

    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    RRB             reduce using rule 82 (eps -> .)
    COMMA           reduce using rule 82 (eps -> .)
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    explist                        shift and go to state 28
    exp                            shift and go to state 29
    eps                            shift and go to state 30
    lvalue                         shift and go to state 31
    const                          shift and go to state 34

state 18

    (27) lvalue -> ID LSB . exp RSB
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE

    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 39
    lvalue                         shift and go to state 31
    const                          shift and go to state 34

state 19

    (12) iddec -> lvalue ASSIGN . exp
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE

    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    lvalue                         shift and go to state 31
    exp                            shift and go to state 40
    const                          shift and go to state 34

state 20

    (1) program -> declist MAIN LRB RRB . block
    (22) block -> . LCB stmtlist RCB

    LCB             shift and go to state 42

    block                          shift and go to state 41

state 21

    (6) vardec -> idlist COLON type . SEMICOLON

    SEMICOLON       shift and go to state 43


state 22

    (9) type -> INTEGER .

    SEMICOLON       reduce using rule 9 (type -> INTEGER .)
    COMMA           reduce using rule 9 (type -> INTEGER .)
    RRB             reduce using rule 9 (type -> INTEGER .)
    LCB             reduce using rule 9 (type -> INTEGER .)


state 23

    (10) type -> FLOAT .

    SEMICOLON       reduce using rule 10 (type -> FLOAT .)
    COMMA           reduce using rule 10 (type -> FLOAT .)
    RRB             reduce using rule 10 (type -> FLOAT .)
    LCB             reduce using rule 10 (type -> FLOAT .)


state 24

    (11) type -> BOOLEAN .

    SEMICOLON       reduce using rule 11 (type -> BOOLEAN .)
    COMMA           reduce using rule 11 (type -> BOOLEAN .)
    RRB             reduce using rule 11 (type -> BOOLEAN .)
    LCB             reduce using rule 11 (type -> BOOLEAN .)


state 25

    (14) idlist -> idlist COMMA iddec .

    COLON           reduce using rule 14 (idlist -> idlist COMMA iddec .)
    COMMA           reduce using rule 14 (idlist -> idlist COMMA iddec .)


state 26

    (7) funcdec -> FUNCTION ID LRB . paramdecs RRB COLON type block
    (8) funcdec -> FUNCTION ID LRB . paramdecs RRB block
    (16) paramdecs -> . paramdecslist
    (17) paramdecs -> . eps
    (18) paramdecslist -> . paramdec
    (19) paramdecslist -> . paramdecslist COMMA paramdec
    (82) eps -> .
    (20) paramdec -> . ID LSB RSB COLON type
    (21) paramdec -> . ID COLON type

    RRB             reduce using rule 82 (eps -> .)
    ID              shift and go to state 44

    paramdecs                      shift and go to state 45
    paramdecslist                  shift and go to state 46
    eps                            shift and go to state 47
    paramdec                       shift and go to state 48

state 27

    (62) exp -> LRB . exp RRB
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE

    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 49
    lvalue                         shift and go to state 31
    const                          shift and go to state 34

state 28

    (25) lvalue -> ID LRB explist . RRB
    (80) explist -> explist . COMMA exp

    RRB             shift and go to state 50
    COMMA           shift and go to state 51


state 29

    (79) explist -> exp .
    (58) exp -> exp . relop exp
    (65) exp -> exp . operator1 exp
    (66) exp -> exp . operator2 exp
    (67) exp -> exp . operator3 exp
    (52) relop -> . GT
    (53) relop -> . GE
    (54) relop -> . LT
    (55) relop -> . LE
    (56) relop -> . EQ
    (57) relop -> . NE
    (68) operator1 -> . MUL
    (69) operator1 -> . DIV
    (70) operator1 -> . MOD
    (71) operator2 -> . SUM
    (72) operator2 -> . SUB
    (73) operator3 -> . AND
    (74) operator3 -> . OR

    RRB             reduce using rule 79 (explist -> exp .)
    COMMA           reduce using rule 79 (explist -> exp .)
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61
    MUL             shift and go to state 62
    DIV             shift and go to state 63
    MOD             shift and go to state 64
    SUM             shift and go to state 65
    SUB             shift and go to state 66
    AND             shift and go to state 67
    OR              shift and go to state 68

    relop                          shift and go to state 52
    operator1                      shift and go to state 53
    operator2                      shift and go to state 54
    operator3                      shift and go to state 55

state 30

    (81) explist -> eps .

    RRB             reduce using rule 81 (explist -> eps .)
    COMMA           reduce using rule 81 (explist -> eps .)


state 31

    (59) exp -> lvalue .
    (63) exp -> lvalue . ASSIGN exp

    GT              reduce using rule 59 (exp -> lvalue .)
    GE              reduce using rule 59 (exp -> lvalue .)
    LT              reduce using rule 59 (exp -> lvalue .)
    LE              reduce using rule 59 (exp -> lvalue .)
    EQ              reduce using rule 59 (exp -> lvalue .)
    NE              reduce using rule 59 (exp -> lvalue .)
    MUL             reduce using rule 59 (exp -> lvalue .)
    DIV             reduce using rule 59 (exp -> lvalue .)
    MOD             reduce using rule 59 (exp -> lvalue .)
    SUM             reduce using rule 59 (exp -> lvalue .)
    SUB             reduce using rule 59 (exp -> lvalue .)
    AND             reduce using rule 59 (exp -> lvalue .)
    OR              reduce using rule 59 (exp -> lvalue .)
    RRB             reduce using rule 59 (exp -> lvalue .)
    COMMA           reduce using rule 59 (exp -> lvalue .)
    RSB             reduce using rule 59 (exp -> lvalue .)
    COLON           reduce using rule 59 (exp -> lvalue .)
    SEMICOLON       reduce using rule 59 (exp -> lvalue .)
    ASSIGN          shift and go to state 69


state 32

    (60) exp -> SUB . exp
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE

    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 70
    lvalue                         shift and go to state 31
    const                          shift and go to state 34

state 33

    (61) exp -> NOT . exp
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE

    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 71
    lvalue                         shift and go to state 31
    const                          shift and go to state 34

state 34

    (64) exp -> const .

    GT              reduce using rule 64 (exp -> const .)
    GE              reduce using rule 64 (exp -> const .)
    LT              reduce using rule 64 (exp -> const .)
    LE              reduce using rule 64 (exp -> const .)
    EQ              reduce using rule 64 (exp -> const .)
    NE              reduce using rule 64 (exp -> const .)
    MUL             reduce using rule 64 (exp -> const .)
    DIV             reduce using rule 64 (exp -> const .)
    MOD             reduce using rule 64 (exp -> const .)
    SUM             reduce using rule 64 (exp -> const .)
    SUB             reduce using rule 64 (exp -> const .)
    AND             reduce using rule 64 (exp -> const .)
    OR              reduce using rule 64 (exp -> const .)
    RRB             reduce using rule 64 (exp -> const .)
    COMMA           reduce using rule 64 (exp -> const .)
    RSB             reduce using rule 64 (exp -> const .)
    COLON           reduce using rule 64 (exp -> const .)
    SEMICOLON       reduce using rule 64 (exp -> const .)


state 35

    (75) const -> INTEGERNUMBER .

    GT              reduce using rule 75 (const -> INTEGERNUMBER .)
    GE              reduce using rule 75 (const -> INTEGERNUMBER .)
    LT              reduce using rule 75 (const -> INTEGERNUMBER .)
    LE              reduce using rule 75 (const -> INTEGERNUMBER .)
    EQ              reduce using rule 75 (const -> INTEGERNUMBER .)
    NE              reduce using rule 75 (const -> INTEGERNUMBER .)
    MUL             reduce using rule 75 (const -> INTEGERNUMBER .)
    DIV             reduce using rule 75 (const -> INTEGERNUMBER .)
    MOD             reduce using rule 75 (const -> INTEGERNUMBER .)
    SUM             reduce using rule 75 (const -> INTEGERNUMBER .)
    SUB             reduce using rule 75 (const -> INTEGERNUMBER .)
    AND             reduce using rule 75 (const -> INTEGERNUMBER .)
    OR              reduce using rule 75 (const -> INTEGERNUMBER .)
    RRB             reduce using rule 75 (const -> INTEGERNUMBER .)
    COMMA           reduce using rule 75 (const -> INTEGERNUMBER .)
    RSB             reduce using rule 75 (const -> INTEGERNUMBER .)
    COLON           reduce using rule 75 (const -> INTEGERNUMBER .)
    SEMICOLON       reduce using rule 75 (const -> INTEGERNUMBER .)


state 36

    (76) const -> FLOATNUMBER .

    GT              reduce using rule 76 (const -> FLOATNUMBER .)
    GE              reduce using rule 76 (const -> FLOATNUMBER .)
    LT              reduce using rule 76 (const -> FLOATNUMBER .)
    LE              reduce using rule 76 (const -> FLOATNUMBER .)
    EQ              reduce using rule 76 (const -> FLOATNUMBER .)
    NE              reduce using rule 76 (const -> FLOATNUMBER .)
    MUL             reduce using rule 76 (const -> FLOATNUMBER .)
    DIV             reduce using rule 76 (const -> FLOATNUMBER .)
    MOD             reduce using rule 76 (const -> FLOATNUMBER .)
    SUM             reduce using rule 76 (const -> FLOATNUMBER .)
    SUB             reduce using rule 76 (const -> FLOATNUMBER .)
    AND             reduce using rule 76 (const -> FLOATNUMBER .)
    OR              reduce using rule 76 (const -> FLOATNUMBER .)
    RRB             reduce using rule 76 (const -> FLOATNUMBER .)
    COMMA           reduce using rule 76 (const -> FLOATNUMBER .)
    RSB             reduce using rule 76 (const -> FLOATNUMBER .)
    COLON           reduce using rule 76 (const -> FLOATNUMBER .)
    SEMICOLON       reduce using rule 76 (const -> FLOATNUMBER .)


state 37

    (77) const -> TRUE .

    GT              reduce using rule 77 (const -> TRUE .)
    GE              reduce using rule 77 (const -> TRUE .)
    LT              reduce using rule 77 (const -> TRUE .)
    LE              reduce using rule 77 (const -> TRUE .)
    EQ              reduce using rule 77 (const -> TRUE .)
    NE              reduce using rule 77 (const -> TRUE .)
    MUL             reduce using rule 77 (const -> TRUE .)
    DIV             reduce using rule 77 (const -> TRUE .)
    MOD             reduce using rule 77 (const -> TRUE .)
    SUM             reduce using rule 77 (const -> TRUE .)
    SUB             reduce using rule 77 (const -> TRUE .)
    AND             reduce using rule 77 (const -> TRUE .)
    OR              reduce using rule 77 (const -> TRUE .)
    RRB             reduce using rule 77 (const -> TRUE .)
    COMMA           reduce using rule 77 (const -> TRUE .)
    RSB             reduce using rule 77 (const -> TRUE .)
    COLON           reduce using rule 77 (const -> TRUE .)
    SEMICOLON       reduce using rule 77 (const -> TRUE .)


state 38

    (78) const -> FALSE .

    GT              reduce using rule 78 (const -> FALSE .)
    GE              reduce using rule 78 (const -> FALSE .)
    LT              reduce using rule 78 (const -> FALSE .)
    LE              reduce using rule 78 (const -> FALSE .)
    EQ              reduce using rule 78 (const -> FALSE .)
    NE              reduce using rule 78 (const -> FALSE .)
    MUL             reduce using rule 78 (const -> FALSE .)
    DIV             reduce using rule 78 (const -> FALSE .)
    MOD             reduce using rule 78 (const -> FALSE .)
    SUM             reduce using rule 78 (const -> FALSE .)
    SUB             reduce using rule 78 (const -> FALSE .)
    AND             reduce using rule 78 (const -> FALSE .)
    OR              reduce using rule 78 (const -> FALSE .)
    RRB             reduce using rule 78 (const -> FALSE .)
    COMMA           reduce using rule 78 (const -> FALSE .)
    RSB             reduce using rule 78 (const -> FALSE .)
    COLON           reduce using rule 78 (const -> FALSE .)
    SEMICOLON       reduce using rule 78 (const -> FALSE .)


state 39

    (27) lvalue -> ID LSB exp . RSB
    (58) exp -> exp . relop exp
    (65) exp -> exp . operator1 exp
    (66) exp -> exp . operator2 exp
    (67) exp -> exp . operator3 exp
    (52) relop -> . GT
    (53) relop -> . GE
    (54) relop -> . LT
    (55) relop -> . LE
    (56) relop -> . EQ
    (57) relop -> . NE
    (68) operator1 -> . MUL
    (69) operator1 -> . DIV
    (70) operator1 -> . MOD
    (71) operator2 -> . SUM
    (72) operator2 -> . SUB
    (73) operator3 -> . AND
    (74) operator3 -> . OR

    RSB             shift and go to state 72
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61
    MUL             shift and go to state 62
    DIV             shift and go to state 63
    MOD             shift and go to state 64
    SUM             shift and go to state 65
    SUB             shift and go to state 66
    AND             shift and go to state 67
    OR              shift and go to state 68

    relop                          shift and go to state 52
    operator1                      shift and go to state 53
    operator2                      shift and go to state 54
    operator3                      shift and go to state 55

state 40

    (12) iddec -> lvalue ASSIGN exp .
    (58) exp -> exp . relop exp
    (65) exp -> exp . operator1 exp
    (66) exp -> exp . operator2 exp
    (67) exp -> exp . operator3 exp
    (52) relop -> . GT
    (53) relop -> . GE
    (54) relop -> . LT
    (55) relop -> . LE
    (56) relop -> . EQ
    (57) relop -> . NE
    (68) operator1 -> . MUL
    (69) operator1 -> . DIV
    (70) operator1 -> . MOD
    (71) operator2 -> . SUM
    (72) operator2 -> . SUB
    (73) operator3 -> . AND
    (74) operator3 -> . OR

    COLON           reduce using rule 12 (iddec -> lvalue ASSIGN exp .)
    COMMA           reduce using rule 12 (iddec -> lvalue ASSIGN exp .)
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61
    MUL             shift and go to state 62
    DIV             shift and go to state 63
    MOD             shift and go to state 64
    SUM             shift and go to state 65
    SUB             shift and go to state 66
    AND             shift and go to state 67
    OR              shift and go to state 68

    relop                          shift and go to state 52
    operator1                      shift and go to state 53
    operator2                      shift and go to state 54
    operator3                      shift and go to state 55

state 41

    (1) program -> declist MAIN LRB RRB block .

    $end            reduce using rule 1 (program -> declist MAIN LRB RRB block .)


state 42

    (22) block -> LCB . stmtlist RCB
    (23) stmtlist -> . stmtlist stmt
    (24) stmtlist -> . eps
    (82) eps -> .

    RCB             reduce using rule 82 (eps -> .)
    WHILE           reduce using rule 82 (eps -> .)
    FOR             reduce using rule 82 (eps -> .)
    IF              reduce using rule 82 (eps -> .)
    ON              reduce using rule 82 (eps -> .)
    RETURN          reduce using rule 82 (eps -> .)
    PRINT           reduce using rule 82 (eps -> .)
    LCB             reduce using rule 82 (eps -> .)
    SUB             reduce using rule 82 (eps -> .)
    NOT             reduce using rule 82 (eps -> .)
    LRB             reduce using rule 82 (eps -> .)
    ID              reduce using rule 82 (eps -> .)
    INTEGERNUMBER   reduce using rule 82 (eps -> .)
    FLOATNUMBER     reduce using rule 82 (eps -> .)
    TRUE            reduce using rule 82 (eps -> .)
    FALSE           reduce using rule 82 (eps -> .)

    stmtlist                       shift and go to state 73
    eps                            shift and go to state 74

state 43

    (6) vardec -> idlist COLON type SEMICOLON .

    MAIN            reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)
    FUNCTION        reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)
    ID              reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)
    RCB             reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)
    WHILE           reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)
    FOR             reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)
    IF              reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)
    ON              reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)
    RETURN          reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)
    PRINT           reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)
    LCB             reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)
    SUB             reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)
    NOT             reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)
    LRB             reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)
    INTEGERNUMBER   reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)
    FLOATNUMBER     reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)
    TRUE            reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)
    FALSE           reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)
    ELSE            reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)
    ELSEIF          reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)
    WHERE           reduce using rule 6 (vardec -> idlist COLON type SEMICOLON .)


state 44

    (20) paramdec -> ID . LSB RSB COLON type
    (21) paramdec -> ID . COLON type

    LSB             shift and go to state 75
    COLON           shift and go to state 76


state 45

    (7) funcdec -> FUNCTION ID LRB paramdecs . RRB COLON type block
    (8) funcdec -> FUNCTION ID LRB paramdecs . RRB block

    RRB             shift and go to state 77


state 46

    (16) paramdecs -> paramdecslist .
    (19) paramdecslist -> paramdecslist . COMMA paramdec

    RRB             reduce using rule 16 (paramdecs -> paramdecslist .)
    COMMA           shift and go to state 78


state 47

    (17) paramdecs -> eps .

    RRB             reduce using rule 17 (paramdecs -> eps .)


state 48

    (18) paramdecslist -> paramdec .

    COMMA           reduce using rule 18 (paramdecslist -> paramdec .)
    RRB             reduce using rule 18 (paramdecslist -> paramdec .)


state 49

    (62) exp -> LRB exp . RRB
    (58) exp -> exp . relop exp
    (65) exp -> exp . operator1 exp
    (66) exp -> exp . operator2 exp
    (67) exp -> exp . operator3 exp
    (52) relop -> . GT
    (53) relop -> . GE
    (54) relop -> . LT
    (55) relop -> . LE
    (56) relop -> . EQ
    (57) relop -> . NE
    (68) operator1 -> . MUL
    (69) operator1 -> . DIV
    (70) operator1 -> . MOD
    (71) operator2 -> . SUM
    (72) operator2 -> . SUB
    (73) operator3 -> . AND
    (74) operator3 -> . OR

    RRB             shift and go to state 79
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61
    MUL             shift and go to state 62
    DIV             shift and go to state 63
    MOD             shift and go to state 64
    SUM             shift and go to state 65
    SUB             shift and go to state 66
    AND             shift and go to state 67
    OR              shift and go to state 68

    relop                          shift and go to state 52
    operator1                      shift and go to state 53
    operator2                      shift and go to state 54
    operator3                      shift and go to state 55

state 50

    (25) lvalue -> ID LRB explist RRB .

    ASSIGN          reduce using rule 25 (lvalue -> ID LRB explist RRB .)
    COLON           reduce using rule 25 (lvalue -> ID LRB explist RRB .)
    COMMA           reduce using rule 25 (lvalue -> ID LRB explist RRB .)
    GT              reduce using rule 25 (lvalue -> ID LRB explist RRB .)
    GE              reduce using rule 25 (lvalue -> ID LRB explist RRB .)
    LT              reduce using rule 25 (lvalue -> ID LRB explist RRB .)
    LE              reduce using rule 25 (lvalue -> ID LRB explist RRB .)
    EQ              reduce using rule 25 (lvalue -> ID LRB explist RRB .)
    NE              reduce using rule 25 (lvalue -> ID LRB explist RRB .)
    MUL             reduce using rule 25 (lvalue -> ID LRB explist RRB .)
    DIV             reduce using rule 25 (lvalue -> ID LRB explist RRB .)
    MOD             reduce using rule 25 (lvalue -> ID LRB explist RRB .)
    SUM             reduce using rule 25 (lvalue -> ID LRB explist RRB .)
    SUB             reduce using rule 25 (lvalue -> ID LRB explist RRB .)
    AND             reduce using rule 25 (lvalue -> ID LRB explist RRB .)
    OR              reduce using rule 25 (lvalue -> ID LRB explist RRB .)
    RRB             reduce using rule 25 (lvalue -> ID LRB explist RRB .)
    RSB             reduce using rule 25 (lvalue -> ID LRB explist RRB .)
    SEMICOLON       reduce using rule 25 (lvalue -> ID LRB explist RRB .)


state 51

    (80) explist -> explist COMMA . exp
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE

    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 80
    lvalue                         shift and go to state 31
    const                          shift and go to state 34

state 52

    (58) exp -> exp relop . exp
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE

    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 81
    lvalue                         shift and go to state 31
    const                          shift and go to state 34

state 53

    (65) exp -> exp operator1 . exp
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE

    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 82
    lvalue                         shift and go to state 31
    const                          shift and go to state 34

state 54

    (66) exp -> exp operator2 . exp
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE

    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 83
    lvalue                         shift and go to state 31
    const                          shift and go to state 34

state 55

    (67) exp -> exp operator3 . exp
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE

    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 84
    lvalue                         shift and go to state 31
    const                          shift and go to state 34

state 56

    (52) relop -> GT .

    SUB             reduce using rule 52 (relop -> GT .)
    NOT             reduce using rule 52 (relop -> GT .)
    LRB             reduce using rule 52 (relop -> GT .)
    ID              reduce using rule 52 (relop -> GT .)
    INTEGERNUMBER   reduce using rule 52 (relop -> GT .)
    FLOATNUMBER     reduce using rule 52 (relop -> GT .)
    TRUE            reduce using rule 52 (relop -> GT .)
    FALSE           reduce using rule 52 (relop -> GT .)


state 57

    (53) relop -> GE .

    SUB             reduce using rule 53 (relop -> GE .)
    NOT             reduce using rule 53 (relop -> GE .)
    LRB             reduce using rule 53 (relop -> GE .)
    ID              reduce using rule 53 (relop -> GE .)
    INTEGERNUMBER   reduce using rule 53 (relop -> GE .)
    FLOATNUMBER     reduce using rule 53 (relop -> GE .)
    TRUE            reduce using rule 53 (relop -> GE .)
    FALSE           reduce using rule 53 (relop -> GE .)


state 58

    (54) relop -> LT .

    SUB             reduce using rule 54 (relop -> LT .)
    NOT             reduce using rule 54 (relop -> LT .)
    LRB             reduce using rule 54 (relop -> LT .)
    ID              reduce using rule 54 (relop -> LT .)
    INTEGERNUMBER   reduce using rule 54 (relop -> LT .)
    FLOATNUMBER     reduce using rule 54 (relop -> LT .)
    TRUE            reduce using rule 54 (relop -> LT .)
    FALSE           reduce using rule 54 (relop -> LT .)


state 59

    (55) relop -> LE .

    SUB             reduce using rule 55 (relop -> LE .)
    NOT             reduce using rule 55 (relop -> LE .)
    LRB             reduce using rule 55 (relop -> LE .)
    ID              reduce using rule 55 (relop -> LE .)
    INTEGERNUMBER   reduce using rule 55 (relop -> LE .)
    FLOATNUMBER     reduce using rule 55 (relop -> LE .)
    TRUE            reduce using rule 55 (relop -> LE .)
    FALSE           reduce using rule 55 (relop -> LE .)


state 60

    (56) relop -> EQ .

    SUB             reduce using rule 56 (relop -> EQ .)
    NOT             reduce using rule 56 (relop -> EQ .)
    LRB             reduce using rule 56 (relop -> EQ .)
    ID              reduce using rule 56 (relop -> EQ .)
    INTEGERNUMBER   reduce using rule 56 (relop -> EQ .)
    FLOATNUMBER     reduce using rule 56 (relop -> EQ .)
    TRUE            reduce using rule 56 (relop -> EQ .)
    FALSE           reduce using rule 56 (relop -> EQ .)


state 61

    (57) relop -> NE .

    SUB             reduce using rule 57 (relop -> NE .)
    NOT             reduce using rule 57 (relop -> NE .)
    LRB             reduce using rule 57 (relop -> NE .)
    ID              reduce using rule 57 (relop -> NE .)
    INTEGERNUMBER   reduce using rule 57 (relop -> NE .)
    FLOATNUMBER     reduce using rule 57 (relop -> NE .)
    TRUE            reduce using rule 57 (relop -> NE .)
    FALSE           reduce using rule 57 (relop -> NE .)


state 62

    (68) operator1 -> MUL .

    SUB             reduce using rule 68 (operator1 -> MUL .)
    NOT             reduce using rule 68 (operator1 -> MUL .)
    LRB             reduce using rule 68 (operator1 -> MUL .)
    ID              reduce using rule 68 (operator1 -> MUL .)
    INTEGERNUMBER   reduce using rule 68 (operator1 -> MUL .)
    FLOATNUMBER     reduce using rule 68 (operator1 -> MUL .)
    TRUE            reduce using rule 68 (operator1 -> MUL .)
    FALSE           reduce using rule 68 (operator1 -> MUL .)


state 63

    (69) operator1 -> DIV .

    SUB             reduce using rule 69 (operator1 -> DIV .)
    NOT             reduce using rule 69 (operator1 -> DIV .)
    LRB             reduce using rule 69 (operator1 -> DIV .)
    ID              reduce using rule 69 (operator1 -> DIV .)
    INTEGERNUMBER   reduce using rule 69 (operator1 -> DIV .)
    FLOATNUMBER     reduce using rule 69 (operator1 -> DIV .)
    TRUE            reduce using rule 69 (operator1 -> DIV .)
    FALSE           reduce using rule 69 (operator1 -> DIV .)


state 64

    (70) operator1 -> MOD .

    SUB             reduce using rule 70 (operator1 -> MOD .)
    NOT             reduce using rule 70 (operator1 -> MOD .)
    LRB             reduce using rule 70 (operator1 -> MOD .)
    ID              reduce using rule 70 (operator1 -> MOD .)
    INTEGERNUMBER   reduce using rule 70 (operator1 -> MOD .)
    FLOATNUMBER     reduce using rule 70 (operator1 -> MOD .)
    TRUE            reduce using rule 70 (operator1 -> MOD .)
    FALSE           reduce using rule 70 (operator1 -> MOD .)


state 65

    (71) operator2 -> SUM .

    SUB             reduce using rule 71 (operator2 -> SUM .)
    NOT             reduce using rule 71 (operator2 -> SUM .)
    LRB             reduce using rule 71 (operator2 -> SUM .)
    ID              reduce using rule 71 (operator2 -> SUM .)
    INTEGERNUMBER   reduce using rule 71 (operator2 -> SUM .)
    FLOATNUMBER     reduce using rule 71 (operator2 -> SUM .)
    TRUE            reduce using rule 71 (operator2 -> SUM .)
    FALSE           reduce using rule 71 (operator2 -> SUM .)


state 66

    (72) operator2 -> SUB .

    SUB             reduce using rule 72 (operator2 -> SUB .)
    NOT             reduce using rule 72 (operator2 -> SUB .)
    LRB             reduce using rule 72 (operator2 -> SUB .)
    ID              reduce using rule 72 (operator2 -> SUB .)
    INTEGERNUMBER   reduce using rule 72 (operator2 -> SUB .)
    FLOATNUMBER     reduce using rule 72 (operator2 -> SUB .)
    TRUE            reduce using rule 72 (operator2 -> SUB .)
    FALSE           reduce using rule 72 (operator2 -> SUB .)


state 67

    (73) operator3 -> AND .

    SUB             reduce using rule 73 (operator3 -> AND .)
    NOT             reduce using rule 73 (operator3 -> AND .)
    LRB             reduce using rule 73 (operator3 -> AND .)
    ID              reduce using rule 73 (operator3 -> AND .)
    INTEGERNUMBER   reduce using rule 73 (operator3 -> AND .)
    FLOATNUMBER     reduce using rule 73 (operator3 -> AND .)
    TRUE            reduce using rule 73 (operator3 -> AND .)
    FALSE           reduce using rule 73 (operator3 -> AND .)


state 68

    (74) operator3 -> OR .

    SUB             reduce using rule 74 (operator3 -> OR .)
    NOT             reduce using rule 74 (operator3 -> OR .)
    LRB             reduce using rule 74 (operator3 -> OR .)
    ID              reduce using rule 74 (operator3 -> OR .)
    INTEGERNUMBER   reduce using rule 74 (operator3 -> OR .)
    FLOATNUMBER     reduce using rule 74 (operator3 -> OR .)
    TRUE            reduce using rule 74 (operator3 -> OR .)
    FALSE           reduce using rule 74 (operator3 -> OR .)


state 69

    (63) exp -> lvalue ASSIGN . exp
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE

    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    lvalue                         shift and go to state 31
    exp                            shift and go to state 85
    const                          shift and go to state 34

state 70

    (60) exp -> SUB exp .
    (58) exp -> exp . relop exp
    (65) exp -> exp . operator1 exp
    (66) exp -> exp . operator2 exp
    (67) exp -> exp . operator3 exp
    (52) relop -> . GT
    (53) relop -> . GE
    (54) relop -> . LT
    (55) relop -> . LE
    (56) relop -> . EQ
    (57) relop -> . NE
    (68) operator1 -> . MUL
    (69) operator1 -> . DIV
    (70) operator1 -> . MOD
    (71) operator2 -> . SUM
    (72) operator2 -> . SUB
    (73) operator3 -> . AND
    (74) operator3 -> . OR

    SUM             reduce using rule 60 (exp -> SUB exp .)
    SUB             reduce using rule 60 (exp -> SUB exp .)
    AND             reduce using rule 60 (exp -> SUB exp .)
    OR              reduce using rule 60 (exp -> SUB exp .)
    RRB             reduce using rule 60 (exp -> SUB exp .)
    COMMA           reduce using rule 60 (exp -> SUB exp .)
    RSB             reduce using rule 60 (exp -> SUB exp .)
    COLON           reduce using rule 60 (exp -> SUB exp .)
    SEMICOLON       reduce using rule 60 (exp -> SUB exp .)
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61
    MUL             shift and go to state 62
    DIV             shift and go to state 63
    MOD             shift and go to state 64

  ! GT              [ reduce using rule 60 (exp -> SUB exp .) ]
  ! GE              [ reduce using rule 60 (exp -> SUB exp .) ]
  ! LT              [ reduce using rule 60 (exp -> SUB exp .) ]
  ! LE              [ reduce using rule 60 (exp -> SUB exp .) ]
  ! EQ              [ reduce using rule 60 (exp -> SUB exp .) ]
  ! NE              [ reduce using rule 60 (exp -> SUB exp .) ]
  ! MUL             [ reduce using rule 60 (exp -> SUB exp .) ]
  ! DIV             [ reduce using rule 60 (exp -> SUB exp .) ]
  ! MOD             [ reduce using rule 60 (exp -> SUB exp .) ]
  ! SUM             [ shift and go to state 65 ]
  ! SUB             [ shift and go to state 66 ]
  ! AND             [ shift and go to state 67 ]
  ! OR              [ shift and go to state 68 ]

    relop                          shift and go to state 52
    operator1                      shift and go to state 53
    operator2                      shift and go to state 54
    operator3                      shift and go to state 55

state 71

    (61) exp -> NOT exp .
    (58) exp -> exp . relop exp
    (65) exp -> exp . operator1 exp
    (66) exp -> exp . operator2 exp
    (67) exp -> exp . operator3 exp
    (52) relop -> . GT
    (53) relop -> . GE
    (54) relop -> . LT
    (55) relop -> . LE
    (56) relop -> . EQ
    (57) relop -> . NE
    (68) operator1 -> . MUL
    (69) operator1 -> . DIV
    (70) operator1 -> . MOD
    (71) operator2 -> . SUM
    (72) operator2 -> . SUB
    (73) operator3 -> . AND
    (74) operator3 -> . OR

    AND             reduce using rule 61 (exp -> NOT exp .)
    OR              reduce using rule 61 (exp -> NOT exp .)
    RRB             reduce using rule 61 (exp -> NOT exp .)
    COMMA           reduce using rule 61 (exp -> NOT exp .)
    RSB             reduce using rule 61 (exp -> NOT exp .)
    COLON           reduce using rule 61 (exp -> NOT exp .)
    SEMICOLON       reduce using rule 61 (exp -> NOT exp .)
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61
    MUL             shift and go to state 62
    DIV             shift and go to state 63
    MOD             shift and go to state 64
    SUM             shift and go to state 65
    SUB             shift and go to state 66

  ! GT              [ reduce using rule 61 (exp -> NOT exp .) ]
  ! GE              [ reduce using rule 61 (exp -> NOT exp .) ]
  ! LT              [ reduce using rule 61 (exp -> NOT exp .) ]
  ! LE              [ reduce using rule 61 (exp -> NOT exp .) ]
  ! EQ              [ reduce using rule 61 (exp -> NOT exp .) ]
  ! NE              [ reduce using rule 61 (exp -> NOT exp .) ]
  ! MUL             [ reduce using rule 61 (exp -> NOT exp .) ]
  ! DIV             [ reduce using rule 61 (exp -> NOT exp .) ]
  ! MOD             [ reduce using rule 61 (exp -> NOT exp .) ]
  ! SUM             [ reduce using rule 61 (exp -> NOT exp .) ]
  ! SUB             [ reduce using rule 61 (exp -> NOT exp .) ]
  ! AND             [ shift and go to state 67 ]
  ! OR              [ shift and go to state 68 ]

    relop                          shift and go to state 52
    operator1                      shift and go to state 53
    operator2                      shift and go to state 54
    operator3                      shift and go to state 55

state 72

    (27) lvalue -> ID LSB exp RSB .

    ASSIGN          reduce using rule 27 (lvalue -> ID LSB exp RSB .)
    COLON           reduce using rule 27 (lvalue -> ID LSB exp RSB .)
    COMMA           reduce using rule 27 (lvalue -> ID LSB exp RSB .)
    GT              reduce using rule 27 (lvalue -> ID LSB exp RSB .)
    GE              reduce using rule 27 (lvalue -> ID LSB exp RSB .)
    LT              reduce using rule 27 (lvalue -> ID LSB exp RSB .)
    LE              reduce using rule 27 (lvalue -> ID LSB exp RSB .)
    EQ              reduce using rule 27 (lvalue -> ID LSB exp RSB .)
    NE              reduce using rule 27 (lvalue -> ID LSB exp RSB .)
    MUL             reduce using rule 27 (lvalue -> ID LSB exp RSB .)
    DIV             reduce using rule 27 (lvalue -> ID LSB exp RSB .)
    MOD             reduce using rule 27 (lvalue -> ID LSB exp RSB .)
    SUM             reduce using rule 27 (lvalue -> ID LSB exp RSB .)
    SUB             reduce using rule 27 (lvalue -> ID LSB exp RSB .)
    AND             reduce using rule 27 (lvalue -> ID LSB exp RSB .)
    OR              reduce using rule 27 (lvalue -> ID LSB exp RSB .)
    RRB             reduce using rule 27 (lvalue -> ID LSB exp RSB .)
    RSB             reduce using rule 27 (lvalue -> ID LSB exp RSB .)
    SEMICOLON       reduce using rule 27 (lvalue -> ID LSB exp RSB .)


state 73

    (22) block -> LCB stmtlist . RCB
    (23) stmtlist -> stmtlist . stmt
    (31) stmt -> . ostmt
    (32) stmt -> . cstmt
    (33) ostmt -> . WHILE LRB exp RRB ostmt
    (34) ostmt -> . FOR LRB ID IN ID RRB ostmt
    (35) ostmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt
    (36) ostmt -> . IF LRB exp RRB cstmt elseiflist ELSE ostmt
    (37) ostmt -> . IF LRB exp RRB cstmt
    (38) ostmt -> . IF LRB exp RRB ostmt
    (39) cstmt -> . WHILE LRB exp RRB cstmt
    (40) cstmt -> . FOR LRB ID IN ID RRB cstmt
    (41) cstmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt
    (42) cstmt -> . IF LRB exp RRB cstmt elseiflist ELSE cstmt
    (43) cstmt -> . simple
    (46) simple -> . block
    (47) simple -> . vardec
    (48) simple -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (49) simple -> . RETURN exp SEMICOLON
    (50) simple -> . exp SEMICOLON
    (51) simple -> . PRINT LRB ID RRB SEMICOLON
    (22) block -> . LCB stmtlist RCB
    (6) vardec -> . idlist COLON type SEMICOLON
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (14) idlist -> . idlist COMMA iddec
    (15) idlist -> . iddec
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE
    (12) iddec -> . lvalue ASSIGN exp
    (13) iddec -> . lvalue

    RCB             shift and go to state 86
    WHILE           shift and go to state 90
    FOR             shift and go to state 92
    IF              shift and go to state 93
    ON              shift and go to state 97
    RETURN          shift and go to state 98
    PRINT           shift and go to state 99
    LCB             shift and go to state 42
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    stmt                           shift and go to state 87
    ostmt                          shift and go to state 88
    cstmt                          shift and go to state 89
    exp                            shift and go to state 91
    simple                         shift and go to state 94
    block                          shift and go to state 95
    vardec                         shift and go to state 96
    idlist                         shift and go to state 8
    lvalue                         shift and go to state 100
    const                          shift and go to state 34
    iddec                          shift and go to state 11

state 74

    (24) stmtlist -> eps .

    RCB             reduce using rule 24 (stmtlist -> eps .)
    WHILE           reduce using rule 24 (stmtlist -> eps .)
    FOR             reduce using rule 24 (stmtlist -> eps .)
    IF              reduce using rule 24 (stmtlist -> eps .)
    ON              reduce using rule 24 (stmtlist -> eps .)
    RETURN          reduce using rule 24 (stmtlist -> eps .)
    PRINT           reduce using rule 24 (stmtlist -> eps .)
    LCB             reduce using rule 24 (stmtlist -> eps .)
    SUB             reduce using rule 24 (stmtlist -> eps .)
    NOT             reduce using rule 24 (stmtlist -> eps .)
    LRB             reduce using rule 24 (stmtlist -> eps .)
    ID              reduce using rule 24 (stmtlist -> eps .)
    INTEGERNUMBER   reduce using rule 24 (stmtlist -> eps .)
    FLOATNUMBER     reduce using rule 24 (stmtlist -> eps .)
    TRUE            reduce using rule 24 (stmtlist -> eps .)
    FALSE           reduce using rule 24 (stmtlist -> eps .)
    WHERE           reduce using rule 24 (stmtlist -> eps .)


state 75

    (20) paramdec -> ID LSB . RSB COLON type

    RSB             shift and go to state 101


state 76

    (21) paramdec -> ID COLON . type
    (9) type -> . INTEGER
    (10) type -> . FLOAT
    (11) type -> . BOOLEAN

    INTEGER         shift and go to state 22
    FLOAT           shift and go to state 23
    BOOLEAN         shift and go to state 24

    type                           shift and go to state 102

state 77

    (7) funcdec -> FUNCTION ID LRB paramdecs RRB . COLON type block
    (8) funcdec -> FUNCTION ID LRB paramdecs RRB . block
    (22) block -> . LCB stmtlist RCB

    COLON           shift and go to state 103
    LCB             shift and go to state 42

    block                          shift and go to state 104

state 78

    (19) paramdecslist -> paramdecslist COMMA . paramdec
    (20) paramdec -> . ID LSB RSB COLON type
    (21) paramdec -> . ID COLON type

    ID              shift and go to state 44

    paramdec                       shift and go to state 105

state 79

    (62) exp -> LRB exp RRB .

    GT              reduce using rule 62 (exp -> LRB exp RRB .)
    GE              reduce using rule 62 (exp -> LRB exp RRB .)
    LT              reduce using rule 62 (exp -> LRB exp RRB .)
    LE              reduce using rule 62 (exp -> LRB exp RRB .)
    EQ              reduce using rule 62 (exp -> LRB exp RRB .)
    NE              reduce using rule 62 (exp -> LRB exp RRB .)
    MUL             reduce using rule 62 (exp -> LRB exp RRB .)
    DIV             reduce using rule 62 (exp -> LRB exp RRB .)
    MOD             reduce using rule 62 (exp -> LRB exp RRB .)
    SUM             reduce using rule 62 (exp -> LRB exp RRB .)
    SUB             reduce using rule 62 (exp -> LRB exp RRB .)
    AND             reduce using rule 62 (exp -> LRB exp RRB .)
    OR              reduce using rule 62 (exp -> LRB exp RRB .)
    RRB             reduce using rule 62 (exp -> LRB exp RRB .)
    COMMA           reduce using rule 62 (exp -> LRB exp RRB .)
    RSB             reduce using rule 62 (exp -> LRB exp RRB .)
    COLON           reduce using rule 62 (exp -> LRB exp RRB .)
    SEMICOLON       reduce using rule 62 (exp -> LRB exp RRB .)


state 80

    (80) explist -> explist COMMA exp .
    (58) exp -> exp . relop exp
    (65) exp -> exp . operator1 exp
    (66) exp -> exp . operator2 exp
    (67) exp -> exp . operator3 exp
    (52) relop -> . GT
    (53) relop -> . GE
    (54) relop -> . LT
    (55) relop -> . LE
    (56) relop -> . EQ
    (57) relop -> . NE
    (68) operator1 -> . MUL
    (69) operator1 -> . DIV
    (70) operator1 -> . MOD
    (71) operator2 -> . SUM
    (72) operator2 -> . SUB
    (73) operator3 -> . AND
    (74) operator3 -> . OR

    RRB             reduce using rule 80 (explist -> explist COMMA exp .)
    COMMA           reduce using rule 80 (explist -> explist COMMA exp .)
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61
    MUL             shift and go to state 62
    DIV             shift and go to state 63
    MOD             shift and go to state 64
    SUM             shift and go to state 65
    SUB             shift and go to state 66
    AND             shift and go to state 67
    OR              shift and go to state 68

    relop                          shift and go to state 52
    operator1                      shift and go to state 53
    operator2                      shift and go to state 54
    operator3                      shift and go to state 55

state 81

    (58) exp -> exp relop exp .
    (58) exp -> exp . relop exp
    (65) exp -> exp . operator1 exp
    (66) exp -> exp . operator2 exp
    (67) exp -> exp . operator3 exp
    (52) relop -> . GT
    (53) relop -> . GE
    (54) relop -> . LT
    (55) relop -> . LE
    (56) relop -> . EQ
    (57) relop -> . NE
    (68) operator1 -> . MUL
    (69) operator1 -> . DIV
    (70) operator1 -> . MOD
    (71) operator2 -> . SUM
    (72) operator2 -> . SUB
    (73) operator3 -> . AND
    (74) operator3 -> . OR

    MUL             reduce using rule 58 (exp -> exp relop exp .)
    DIV             reduce using rule 58 (exp -> exp relop exp .)
    MOD             reduce using rule 58 (exp -> exp relop exp .)
    SUM             reduce using rule 58 (exp -> exp relop exp .)
    SUB             reduce using rule 58 (exp -> exp relop exp .)
    AND             reduce using rule 58 (exp -> exp relop exp .)
    OR              reduce using rule 58 (exp -> exp relop exp .)
    RRB             reduce using rule 58 (exp -> exp relop exp .)
    COMMA           reduce using rule 58 (exp -> exp relop exp .)
    RSB             reduce using rule 58 (exp -> exp relop exp .)
    COLON           reduce using rule 58 (exp -> exp relop exp .)
    SEMICOLON       reduce using rule 58 (exp -> exp relop exp .)
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

  ! GT              [ reduce using rule 58 (exp -> exp relop exp .) ]
  ! GE              [ reduce using rule 58 (exp -> exp relop exp .) ]
  ! LT              [ reduce using rule 58 (exp -> exp relop exp .) ]
  ! LE              [ reduce using rule 58 (exp -> exp relop exp .) ]
  ! EQ              [ reduce using rule 58 (exp -> exp relop exp .) ]
  ! NE              [ reduce using rule 58 (exp -> exp relop exp .) ]
  ! MUL             [ shift and go to state 62 ]
  ! DIV             [ shift and go to state 63 ]
  ! MOD             [ shift and go to state 64 ]
  ! SUM             [ shift and go to state 65 ]
  ! SUB             [ shift and go to state 66 ]
  ! AND             [ shift and go to state 67 ]
  ! OR              [ shift and go to state 68 ]

    relop                          shift and go to state 52
    operator1                      shift and go to state 53
    operator2                      shift and go to state 54
    operator3                      shift and go to state 55

state 82

    (65) exp -> exp operator1 exp .
    (58) exp -> exp . relop exp
    (65) exp -> exp . operator1 exp
    (66) exp -> exp . operator2 exp
    (67) exp -> exp . operator3 exp
    (52) relop -> . GT
    (53) relop -> . GE
    (54) relop -> . LT
    (55) relop -> . LE
    (56) relop -> . EQ
    (57) relop -> . NE
    (68) operator1 -> . MUL
    (69) operator1 -> . DIV
    (70) operator1 -> . MOD
    (71) operator2 -> . SUM
    (72) operator2 -> . SUB
    (73) operator3 -> . AND
    (74) operator3 -> . OR

    MUL             reduce using rule 65 (exp -> exp operator1 exp .)
    DIV             reduce using rule 65 (exp -> exp operator1 exp .)
    MOD             reduce using rule 65 (exp -> exp operator1 exp .)
    SUM             reduce using rule 65 (exp -> exp operator1 exp .)
    SUB             reduce using rule 65 (exp -> exp operator1 exp .)
    AND             reduce using rule 65 (exp -> exp operator1 exp .)
    OR              reduce using rule 65 (exp -> exp operator1 exp .)
    RRB             reduce using rule 65 (exp -> exp operator1 exp .)
    COMMA           reduce using rule 65 (exp -> exp operator1 exp .)
    RSB             reduce using rule 65 (exp -> exp operator1 exp .)
    COLON           reduce using rule 65 (exp -> exp operator1 exp .)
    SEMICOLON       reduce using rule 65 (exp -> exp operator1 exp .)
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61

  ! GT              [ reduce using rule 65 (exp -> exp operator1 exp .) ]
  ! GE              [ reduce using rule 65 (exp -> exp operator1 exp .) ]
  ! LT              [ reduce using rule 65 (exp -> exp operator1 exp .) ]
  ! LE              [ reduce using rule 65 (exp -> exp operator1 exp .) ]
  ! EQ              [ reduce using rule 65 (exp -> exp operator1 exp .) ]
  ! NE              [ reduce using rule 65 (exp -> exp operator1 exp .) ]
  ! MUL             [ shift and go to state 62 ]
  ! DIV             [ shift and go to state 63 ]
  ! MOD             [ shift and go to state 64 ]
  ! SUM             [ shift and go to state 65 ]
  ! SUB             [ shift and go to state 66 ]
  ! AND             [ shift and go to state 67 ]
  ! OR              [ shift and go to state 68 ]

    operator1                      shift and go to state 53
    relop                          shift and go to state 52
    operator2                      shift and go to state 54
    operator3                      shift and go to state 55

state 83

    (66) exp -> exp operator2 exp .
    (58) exp -> exp . relop exp
    (65) exp -> exp . operator1 exp
    (66) exp -> exp . operator2 exp
    (67) exp -> exp . operator3 exp
    (52) relop -> . GT
    (53) relop -> . GE
    (54) relop -> . LT
    (55) relop -> . LE
    (56) relop -> . EQ
    (57) relop -> . NE
    (68) operator1 -> . MUL
    (69) operator1 -> . DIV
    (70) operator1 -> . MOD
    (71) operator2 -> . SUM
    (72) operator2 -> . SUB
    (73) operator3 -> . AND
    (74) operator3 -> . OR

    SUM             reduce using rule 66 (exp -> exp operator2 exp .)
    SUB             reduce using rule 66 (exp -> exp operator2 exp .)
    AND             reduce using rule 66 (exp -> exp operator2 exp .)
    OR              reduce using rule 66 (exp -> exp operator2 exp .)
    RRB             reduce using rule 66 (exp -> exp operator2 exp .)
    COMMA           reduce using rule 66 (exp -> exp operator2 exp .)
    RSB             reduce using rule 66 (exp -> exp operator2 exp .)
    COLON           reduce using rule 66 (exp -> exp operator2 exp .)
    SEMICOLON       reduce using rule 66 (exp -> exp operator2 exp .)
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61
    MUL             shift and go to state 62
    DIV             shift and go to state 63
    MOD             shift and go to state 64

  ! GT              [ reduce using rule 66 (exp -> exp operator2 exp .) ]
  ! GE              [ reduce using rule 66 (exp -> exp operator2 exp .) ]
  ! LT              [ reduce using rule 66 (exp -> exp operator2 exp .) ]
  ! LE              [ reduce using rule 66 (exp -> exp operator2 exp .) ]
  ! EQ              [ reduce using rule 66 (exp -> exp operator2 exp .) ]
  ! NE              [ reduce using rule 66 (exp -> exp operator2 exp .) ]
  ! MUL             [ reduce using rule 66 (exp -> exp operator2 exp .) ]
  ! DIV             [ reduce using rule 66 (exp -> exp operator2 exp .) ]
  ! MOD             [ reduce using rule 66 (exp -> exp operator2 exp .) ]
  ! SUM             [ shift and go to state 65 ]
  ! SUB             [ shift and go to state 66 ]
  ! AND             [ shift and go to state 67 ]
  ! OR              [ shift and go to state 68 ]

    operator2                      shift and go to state 54
    relop                          shift and go to state 52
    operator1                      shift and go to state 53
    operator3                      shift and go to state 55

state 84

    (67) exp -> exp operator3 exp .
    (58) exp -> exp . relop exp
    (65) exp -> exp . operator1 exp
    (66) exp -> exp . operator2 exp
    (67) exp -> exp . operator3 exp
    (52) relop -> . GT
    (53) relop -> . GE
    (54) relop -> . LT
    (55) relop -> . LE
    (56) relop -> . EQ
    (57) relop -> . NE
    (68) operator1 -> . MUL
    (69) operator1 -> . DIV
    (70) operator1 -> . MOD
    (71) operator2 -> . SUM
    (72) operator2 -> . SUB
    (73) operator3 -> . AND
    (74) operator3 -> . OR

    AND             reduce using rule 67 (exp -> exp operator3 exp .)
    OR              reduce using rule 67 (exp -> exp operator3 exp .)
    RRB             reduce using rule 67 (exp -> exp operator3 exp .)
    COMMA           reduce using rule 67 (exp -> exp operator3 exp .)
    RSB             reduce using rule 67 (exp -> exp operator3 exp .)
    COLON           reduce using rule 67 (exp -> exp operator3 exp .)
    SEMICOLON       reduce using rule 67 (exp -> exp operator3 exp .)
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61
    MUL             shift and go to state 62
    DIV             shift and go to state 63
    MOD             shift and go to state 64
    SUM             shift and go to state 65
    SUB             shift and go to state 66

  ! GT              [ reduce using rule 67 (exp -> exp operator3 exp .) ]
  ! GE              [ reduce using rule 67 (exp -> exp operator3 exp .) ]
  ! LT              [ reduce using rule 67 (exp -> exp operator3 exp .) ]
  ! LE              [ reduce using rule 67 (exp -> exp operator3 exp .) ]
  ! EQ              [ reduce using rule 67 (exp -> exp operator3 exp .) ]
  ! NE              [ reduce using rule 67 (exp -> exp operator3 exp .) ]
  ! MUL             [ reduce using rule 67 (exp -> exp operator3 exp .) ]
  ! DIV             [ reduce using rule 67 (exp -> exp operator3 exp .) ]
  ! MOD             [ reduce using rule 67 (exp -> exp operator3 exp .) ]
  ! SUM             [ reduce using rule 67 (exp -> exp operator3 exp .) ]
  ! SUB             [ reduce using rule 67 (exp -> exp operator3 exp .) ]
  ! AND             [ shift and go to state 67 ]
  ! OR              [ shift and go to state 68 ]

    operator3                      shift and go to state 55
    relop                          shift and go to state 52
    operator1                      shift and go to state 53
    operator2                      shift and go to state 54

state 85

    (63) exp -> lvalue ASSIGN exp .
    (58) exp -> exp . relop exp
    (65) exp -> exp . operator1 exp
    (66) exp -> exp . operator2 exp
    (67) exp -> exp . operator3 exp
    (52) relop -> . GT
    (53) relop -> . GE
    (54) relop -> . LT
    (55) relop -> . LE
    (56) relop -> . EQ
    (57) relop -> . NE
    (68) operator1 -> . MUL
    (69) operator1 -> . DIV
    (70) operator1 -> . MOD
    (71) operator2 -> . SUM
    (72) operator2 -> . SUB
    (73) operator3 -> . AND
    (74) operator3 -> . OR

    RRB             reduce using rule 63 (exp -> lvalue ASSIGN exp .)
    COMMA           reduce using rule 63 (exp -> lvalue ASSIGN exp .)
    RSB             reduce using rule 63 (exp -> lvalue ASSIGN exp .)
    COLON           reduce using rule 63 (exp -> lvalue ASSIGN exp .)
    SEMICOLON       reduce using rule 63 (exp -> lvalue ASSIGN exp .)
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61
    MUL             shift and go to state 62
    DIV             shift and go to state 63
    MOD             shift and go to state 64
    SUM             shift and go to state 65
    SUB             shift and go to state 66
    AND             shift and go to state 67
    OR              shift and go to state 68

  ! GT              [ reduce using rule 63 (exp -> lvalue ASSIGN exp .) ]
  ! GE              [ reduce using rule 63 (exp -> lvalue ASSIGN exp .) ]
  ! LT              [ reduce using rule 63 (exp -> lvalue ASSIGN exp .) ]
  ! LE              [ reduce using rule 63 (exp -> lvalue ASSIGN exp .) ]
  ! EQ              [ reduce using rule 63 (exp -> lvalue ASSIGN exp .) ]
  ! NE              [ reduce using rule 63 (exp -> lvalue ASSIGN exp .) ]
  ! MUL             [ reduce using rule 63 (exp -> lvalue ASSIGN exp .) ]
  ! DIV             [ reduce using rule 63 (exp -> lvalue ASSIGN exp .) ]
  ! MOD             [ reduce using rule 63 (exp -> lvalue ASSIGN exp .) ]
  ! SUM             [ reduce using rule 63 (exp -> lvalue ASSIGN exp .) ]
  ! SUB             [ reduce using rule 63 (exp -> lvalue ASSIGN exp .) ]
  ! AND             [ reduce using rule 63 (exp -> lvalue ASSIGN exp .) ]
  ! OR              [ reduce using rule 63 (exp -> lvalue ASSIGN exp .) ]

    relop                          shift and go to state 52
    operator1                      shift and go to state 53
    operator2                      shift and go to state 54
    operator3                      shift and go to state 55

state 86

    (22) block -> LCB stmtlist RCB .

    $end            reduce using rule 22 (block -> LCB stmtlist RCB .)
    RCB             reduce using rule 22 (block -> LCB stmtlist RCB .)
    WHILE           reduce using rule 22 (block -> LCB stmtlist RCB .)
    FOR             reduce using rule 22 (block -> LCB stmtlist RCB .)
    IF              reduce using rule 22 (block -> LCB stmtlist RCB .)
    ON              reduce using rule 22 (block -> LCB stmtlist RCB .)
    RETURN          reduce using rule 22 (block -> LCB stmtlist RCB .)
    PRINT           reduce using rule 22 (block -> LCB stmtlist RCB .)
    LCB             reduce using rule 22 (block -> LCB stmtlist RCB .)
    SUB             reduce using rule 22 (block -> LCB stmtlist RCB .)
    NOT             reduce using rule 22 (block -> LCB stmtlist RCB .)
    LRB             reduce using rule 22 (block -> LCB stmtlist RCB .)
    ID              reduce using rule 22 (block -> LCB stmtlist RCB .)
    INTEGERNUMBER   reduce using rule 22 (block -> LCB stmtlist RCB .)
    FLOATNUMBER     reduce using rule 22 (block -> LCB stmtlist RCB .)
    TRUE            reduce using rule 22 (block -> LCB stmtlist RCB .)
    FALSE           reduce using rule 22 (block -> LCB stmtlist RCB .)
    MAIN            reduce using rule 22 (block -> LCB stmtlist RCB .)
    FUNCTION        reduce using rule 22 (block -> LCB stmtlist RCB .)
    ELSE            reduce using rule 22 (block -> LCB stmtlist RCB .)
    ELSEIF          reduce using rule 22 (block -> LCB stmtlist RCB .)
    WHERE           reduce using rule 22 (block -> LCB stmtlist RCB .)


state 87

    (23) stmtlist -> stmtlist stmt .

    RCB             reduce using rule 23 (stmtlist -> stmtlist stmt .)
    WHILE           reduce using rule 23 (stmtlist -> stmtlist stmt .)
    FOR             reduce using rule 23 (stmtlist -> stmtlist stmt .)
    IF              reduce using rule 23 (stmtlist -> stmtlist stmt .)
    ON              reduce using rule 23 (stmtlist -> stmtlist stmt .)
    RETURN          reduce using rule 23 (stmtlist -> stmtlist stmt .)
    PRINT           reduce using rule 23 (stmtlist -> stmtlist stmt .)
    LCB             reduce using rule 23 (stmtlist -> stmtlist stmt .)
    SUB             reduce using rule 23 (stmtlist -> stmtlist stmt .)
    NOT             reduce using rule 23 (stmtlist -> stmtlist stmt .)
    LRB             reduce using rule 23 (stmtlist -> stmtlist stmt .)
    ID              reduce using rule 23 (stmtlist -> stmtlist stmt .)
    INTEGERNUMBER   reduce using rule 23 (stmtlist -> stmtlist stmt .)
    FLOATNUMBER     reduce using rule 23 (stmtlist -> stmtlist stmt .)
    TRUE            reduce using rule 23 (stmtlist -> stmtlist stmt .)
    FALSE           reduce using rule 23 (stmtlist -> stmtlist stmt .)
    WHERE           reduce using rule 23 (stmtlist -> stmtlist stmt .)


state 88

    (31) stmt -> ostmt .

    RCB             reduce using rule 31 (stmt -> ostmt .)
    WHILE           reduce using rule 31 (stmt -> ostmt .)
    FOR             reduce using rule 31 (stmt -> ostmt .)
    IF              reduce using rule 31 (stmt -> ostmt .)
    ON              reduce using rule 31 (stmt -> ostmt .)
    RETURN          reduce using rule 31 (stmt -> ostmt .)
    PRINT           reduce using rule 31 (stmt -> ostmt .)
    LCB             reduce using rule 31 (stmt -> ostmt .)
    SUB             reduce using rule 31 (stmt -> ostmt .)
    NOT             reduce using rule 31 (stmt -> ostmt .)
    LRB             reduce using rule 31 (stmt -> ostmt .)
    ID              reduce using rule 31 (stmt -> ostmt .)
    INTEGERNUMBER   reduce using rule 31 (stmt -> ostmt .)
    FLOATNUMBER     reduce using rule 31 (stmt -> ostmt .)
    TRUE            reduce using rule 31 (stmt -> ostmt .)
    FALSE           reduce using rule 31 (stmt -> ostmt .)
    WHERE           reduce using rule 31 (stmt -> ostmt .)


state 89

    (32) stmt -> cstmt .

    RCB             reduce using rule 32 (stmt -> cstmt .)
    WHILE           reduce using rule 32 (stmt -> cstmt .)
    FOR             reduce using rule 32 (stmt -> cstmt .)
    IF              reduce using rule 32 (stmt -> cstmt .)
    ON              reduce using rule 32 (stmt -> cstmt .)
    RETURN          reduce using rule 32 (stmt -> cstmt .)
    PRINT           reduce using rule 32 (stmt -> cstmt .)
    LCB             reduce using rule 32 (stmt -> cstmt .)
    SUB             reduce using rule 32 (stmt -> cstmt .)
    NOT             reduce using rule 32 (stmt -> cstmt .)
    LRB             reduce using rule 32 (stmt -> cstmt .)
    ID              reduce using rule 32 (stmt -> cstmt .)
    INTEGERNUMBER   reduce using rule 32 (stmt -> cstmt .)
    FLOATNUMBER     reduce using rule 32 (stmt -> cstmt .)
    TRUE            reduce using rule 32 (stmt -> cstmt .)
    FALSE           reduce using rule 32 (stmt -> cstmt .)
    WHERE           reduce using rule 32 (stmt -> cstmt .)


state 90

    (33) ostmt -> WHILE . LRB exp RRB ostmt
    (39) cstmt -> WHILE . LRB exp RRB cstmt

    LRB             shift and go to state 106


state 91

    (50) simple -> exp . SEMICOLON
    (58) exp -> exp . relop exp
    (65) exp -> exp . operator1 exp
    (66) exp -> exp . operator2 exp
    (67) exp -> exp . operator3 exp
    (52) relop -> . GT
    (53) relop -> . GE
    (54) relop -> . LT
    (55) relop -> . LE
    (56) relop -> . EQ
    (57) relop -> . NE
    (68) operator1 -> . MUL
    (69) operator1 -> . DIV
    (70) operator1 -> . MOD
    (71) operator2 -> . SUM
    (72) operator2 -> . SUB
    (73) operator3 -> . AND
    (74) operator3 -> . OR

    SEMICOLON       shift and go to state 107
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61
    MUL             shift and go to state 62
    DIV             shift and go to state 63
    MOD             shift and go to state 64
    SUM             shift and go to state 65
    SUB             shift and go to state 66
    AND             shift and go to state 67
    OR              shift and go to state 68

    relop                          shift and go to state 52
    operator1                      shift and go to state 53
    operator2                      shift and go to state 54
    operator3                      shift and go to state 55

state 92

    (34) ostmt -> FOR . LRB ID IN ID RRB ostmt
    (35) ostmt -> FOR . LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt
    (40) cstmt -> FOR . LRB ID IN ID RRB cstmt
    (41) cstmt -> FOR . LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt

    LRB             shift and go to state 108


state 93

    (36) ostmt -> IF . LRB exp RRB cstmt elseiflist ELSE ostmt
    (37) ostmt -> IF . LRB exp RRB cstmt
    (38) ostmt -> IF . LRB exp RRB ostmt
    (42) cstmt -> IF . LRB exp RRB cstmt elseiflist ELSE cstmt

    LRB             shift and go to state 109


state 94

    (43) cstmt -> simple .

    RCB             reduce using rule 43 (cstmt -> simple .)
    WHILE           reduce using rule 43 (cstmt -> simple .)
    FOR             reduce using rule 43 (cstmt -> simple .)
    IF              reduce using rule 43 (cstmt -> simple .)
    ON              reduce using rule 43 (cstmt -> simple .)
    RETURN          reduce using rule 43 (cstmt -> simple .)
    PRINT           reduce using rule 43 (cstmt -> simple .)
    LCB             reduce using rule 43 (cstmt -> simple .)
    SUB             reduce using rule 43 (cstmt -> simple .)
    NOT             reduce using rule 43 (cstmt -> simple .)
    LRB             reduce using rule 43 (cstmt -> simple .)
    ID              reduce using rule 43 (cstmt -> simple .)
    INTEGERNUMBER   reduce using rule 43 (cstmt -> simple .)
    FLOATNUMBER     reduce using rule 43 (cstmt -> simple .)
    TRUE            reduce using rule 43 (cstmt -> simple .)
    FALSE           reduce using rule 43 (cstmt -> simple .)
    ELSE            reduce using rule 43 (cstmt -> simple .)
    ELSEIF          reduce using rule 43 (cstmt -> simple .)
    WHERE           reduce using rule 43 (cstmt -> simple .)


state 95

    (46) simple -> block .

    RCB             reduce using rule 46 (simple -> block .)
    WHILE           reduce using rule 46 (simple -> block .)
    FOR             reduce using rule 46 (simple -> block .)
    IF              reduce using rule 46 (simple -> block .)
    ON              reduce using rule 46 (simple -> block .)
    RETURN          reduce using rule 46 (simple -> block .)
    PRINT           reduce using rule 46 (simple -> block .)
    LCB             reduce using rule 46 (simple -> block .)
    SUB             reduce using rule 46 (simple -> block .)
    NOT             reduce using rule 46 (simple -> block .)
    LRB             reduce using rule 46 (simple -> block .)
    ID              reduce using rule 46 (simple -> block .)
    INTEGERNUMBER   reduce using rule 46 (simple -> block .)
    FLOATNUMBER     reduce using rule 46 (simple -> block .)
    TRUE            reduce using rule 46 (simple -> block .)
    FALSE           reduce using rule 46 (simple -> block .)
    ELSE            reduce using rule 46 (simple -> block .)
    ELSEIF          reduce using rule 46 (simple -> block .)
    WHERE           reduce using rule 46 (simple -> block .)


state 96

    (47) simple -> vardec .

    RCB             reduce using rule 47 (simple -> vardec .)
    WHILE           reduce using rule 47 (simple -> vardec .)
    FOR             reduce using rule 47 (simple -> vardec .)
    IF              reduce using rule 47 (simple -> vardec .)
    ON              reduce using rule 47 (simple -> vardec .)
    RETURN          reduce using rule 47 (simple -> vardec .)
    PRINT           reduce using rule 47 (simple -> vardec .)
    LCB             reduce using rule 47 (simple -> vardec .)
    SUB             reduce using rule 47 (simple -> vardec .)
    NOT             reduce using rule 47 (simple -> vardec .)
    LRB             reduce using rule 47 (simple -> vardec .)
    ID              reduce using rule 47 (simple -> vardec .)
    INTEGERNUMBER   reduce using rule 47 (simple -> vardec .)
    FLOATNUMBER     reduce using rule 47 (simple -> vardec .)
    TRUE            reduce using rule 47 (simple -> vardec .)
    FALSE           reduce using rule 47 (simple -> vardec .)
    ELSE            reduce using rule 47 (simple -> vardec .)
    ELSEIF          reduce using rule 47 (simple -> vardec .)
    WHERE           reduce using rule 47 (simple -> vardec .)


state 97

    (48) simple -> ON . LRB exp RRB LCB cases RCB SEMICOLON

    LRB             shift and go to state 110


state 98

    (49) simple -> RETURN . exp SEMICOLON
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE

    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 111
    lvalue                         shift and go to state 31
    const                          shift and go to state 34

state 99

    (51) simple -> PRINT . LRB ID RRB SEMICOLON

    LRB             shift and go to state 112


state 100

    (59) exp -> lvalue .
    (63) exp -> lvalue . ASSIGN exp
    (12) iddec -> lvalue . ASSIGN exp
    (13) iddec -> lvalue .

    SEMICOLON       reduce using rule 59 (exp -> lvalue .)
    GT              reduce using rule 59 (exp -> lvalue .)
    GE              reduce using rule 59 (exp -> lvalue .)
    LT              reduce using rule 59 (exp -> lvalue .)
    LE              reduce using rule 59 (exp -> lvalue .)
    EQ              reduce using rule 59 (exp -> lvalue .)
    NE              reduce using rule 59 (exp -> lvalue .)
    MUL             reduce using rule 59 (exp -> lvalue .)
    DIV             reduce using rule 59 (exp -> lvalue .)
    MOD             reduce using rule 59 (exp -> lvalue .)
    SUM             reduce using rule 59 (exp -> lvalue .)
    SUB             reduce using rule 59 (exp -> lvalue .)
    AND             reduce using rule 59 (exp -> lvalue .)
    OR              reduce using rule 59 (exp -> lvalue .)
    ASSIGN          shift and go to state 113
    COLON           reduce using rule 13 (iddec -> lvalue .)
    COMMA           reduce using rule 13 (iddec -> lvalue .)


state 101

    (20) paramdec -> ID LSB RSB . COLON type

    COLON           shift and go to state 114


state 102

    (21) paramdec -> ID COLON type .

    COMMA           reduce using rule 21 (paramdec -> ID COLON type .)
    RRB             reduce using rule 21 (paramdec -> ID COLON type .)


state 103

    (7) funcdec -> FUNCTION ID LRB paramdecs RRB COLON . type block
    (9) type -> . INTEGER
    (10) type -> . FLOAT
    (11) type -> . BOOLEAN

    INTEGER         shift and go to state 22
    FLOAT           shift and go to state 23
    BOOLEAN         shift and go to state 24

    type                           shift and go to state 115

state 104

    (8) funcdec -> FUNCTION ID LRB paramdecs RRB block .

    MAIN            reduce using rule 8 (funcdec -> FUNCTION ID LRB paramdecs RRB block .)
    FUNCTION        reduce using rule 8 (funcdec -> FUNCTION ID LRB paramdecs RRB block .)
    ID              reduce using rule 8 (funcdec -> FUNCTION ID LRB paramdecs RRB block .)


state 105

    (19) paramdecslist -> paramdecslist COMMA paramdec .

    COMMA           reduce using rule 19 (paramdecslist -> paramdecslist COMMA paramdec .)
    RRB             reduce using rule 19 (paramdecslist -> paramdecslist COMMA paramdec .)


state 106

    (33) ostmt -> WHILE LRB . exp RRB ostmt
    (39) cstmt -> WHILE LRB . exp RRB cstmt
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE

    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 116
    lvalue                         shift and go to state 31
    const                          shift and go to state 34

state 107

    (50) simple -> exp SEMICOLON .

    RCB             reduce using rule 50 (simple -> exp SEMICOLON .)
    WHILE           reduce using rule 50 (simple -> exp SEMICOLON .)
    FOR             reduce using rule 50 (simple -> exp SEMICOLON .)
    IF              reduce using rule 50 (simple -> exp SEMICOLON .)
    ON              reduce using rule 50 (simple -> exp SEMICOLON .)
    RETURN          reduce using rule 50 (simple -> exp SEMICOLON .)
    PRINT           reduce using rule 50 (simple -> exp SEMICOLON .)
    LCB             reduce using rule 50 (simple -> exp SEMICOLON .)
    SUB             reduce using rule 50 (simple -> exp SEMICOLON .)
    NOT             reduce using rule 50 (simple -> exp SEMICOLON .)
    LRB             reduce using rule 50 (simple -> exp SEMICOLON .)
    ID              reduce using rule 50 (simple -> exp SEMICOLON .)
    INTEGERNUMBER   reduce using rule 50 (simple -> exp SEMICOLON .)
    FLOATNUMBER     reduce using rule 50 (simple -> exp SEMICOLON .)
    TRUE            reduce using rule 50 (simple -> exp SEMICOLON .)
    FALSE           reduce using rule 50 (simple -> exp SEMICOLON .)
    ELSE            reduce using rule 50 (simple -> exp SEMICOLON .)
    ELSEIF          reduce using rule 50 (simple -> exp SEMICOLON .)
    WHERE           reduce using rule 50 (simple -> exp SEMICOLON .)


state 108

    (34) ostmt -> FOR LRB . ID IN ID RRB ostmt
    (35) ostmt -> FOR LRB . exp SEMICOLON exp SEMICOLON exp RRB ostmt
    (40) cstmt -> FOR LRB . ID IN ID RRB cstmt
    (41) cstmt -> FOR LRB . exp SEMICOLON exp SEMICOLON exp RRB cstmt
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE

    ID              shift and go to state 117
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 118
    lvalue                         shift and go to state 31
    const                          shift and go to state 34

state 109

    (36) ostmt -> IF LRB . exp RRB cstmt elseiflist ELSE ostmt
    (37) ostmt -> IF LRB . exp RRB cstmt
    (38) ostmt -> IF LRB . exp RRB ostmt
    (42) cstmt -> IF LRB . exp RRB cstmt elseiflist ELSE cstmt
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE

    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 119
    lvalue                         shift and go to state 31
    const                          shift and go to state 34

state 110

    (48) simple -> ON LRB . exp RRB LCB cases RCB SEMICOLON
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE

    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 120
    lvalue                         shift and go to state 31
    const                          shift and go to state 34

state 111

    (49) simple -> RETURN exp . SEMICOLON
    (58) exp -> exp . relop exp
    (65) exp -> exp . operator1 exp
    (66) exp -> exp . operator2 exp
    (67) exp -> exp . operator3 exp
    (52) relop -> . GT
    (53) relop -> . GE
    (54) relop -> . LT
    (55) relop -> . LE
    (56) relop -> . EQ
    (57) relop -> . NE
    (68) operator1 -> . MUL
    (69) operator1 -> . DIV
    (70) operator1 -> . MOD
    (71) operator2 -> . SUM
    (72) operator2 -> . SUB
    (73) operator3 -> . AND
    (74) operator3 -> . OR

    SEMICOLON       shift and go to state 121
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61
    MUL             shift and go to state 62
    DIV             shift and go to state 63
    MOD             shift and go to state 64
    SUM             shift and go to state 65
    SUB             shift and go to state 66
    AND             shift and go to state 67
    OR              shift and go to state 68

    relop                          shift and go to state 52
    operator1                      shift and go to state 53
    operator2                      shift and go to state 54
    operator3                      shift and go to state 55

state 112

    (51) simple -> PRINT LRB . ID RRB SEMICOLON

    ID              shift and go to state 122


state 113

    (63) exp -> lvalue ASSIGN . exp
    (12) iddec -> lvalue ASSIGN . exp
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE

    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    lvalue                         shift and go to state 31
    exp                            shift and go to state 123
    const                          shift and go to state 34

state 114

    (20) paramdec -> ID LSB RSB COLON . type
    (9) type -> . INTEGER
    (10) type -> . FLOAT
    (11) type -> . BOOLEAN

    INTEGER         shift and go to state 22
    FLOAT           shift and go to state 23
    BOOLEAN         shift and go to state 24

    type                           shift and go to state 124

state 115

    (7) funcdec -> FUNCTION ID LRB paramdecs RRB COLON type . block
    (22) block -> . LCB stmtlist RCB

    LCB             shift and go to state 42

    block                          shift and go to state 125

state 116

    (33) ostmt -> WHILE LRB exp . RRB ostmt
    (39) cstmt -> WHILE LRB exp . RRB cstmt
    (58) exp -> exp . relop exp
    (65) exp -> exp . operator1 exp
    (66) exp -> exp . operator2 exp
    (67) exp -> exp . operator3 exp
    (52) relop -> . GT
    (53) relop -> . GE
    (54) relop -> . LT
    (55) relop -> . LE
    (56) relop -> . EQ
    (57) relop -> . NE
    (68) operator1 -> . MUL
    (69) operator1 -> . DIV
    (70) operator1 -> . MOD
    (71) operator2 -> . SUM
    (72) operator2 -> . SUB
    (73) operator3 -> . AND
    (74) operator3 -> . OR

    RRB             shift and go to state 126
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61
    MUL             shift and go to state 62
    DIV             shift and go to state 63
    MOD             shift and go to state 64
    SUM             shift and go to state 65
    SUB             shift and go to state 66
    AND             shift and go to state 67
    OR              shift and go to state 68

    relop                          shift and go to state 52
    operator1                      shift and go to state 53
    operator2                      shift and go to state 54
    operator3                      shift and go to state 55

state 117

    (34) ostmt -> FOR LRB ID . IN ID RRB ostmt
    (40) cstmt -> FOR LRB ID . IN ID RRB cstmt
    (25) lvalue -> ID . LRB explist RRB
    (26) lvalue -> ID .
    (27) lvalue -> ID . LSB exp RSB

    IN              shift and go to state 127
    LRB             shift and go to state 17
    ASSIGN          reduce using rule 26 (lvalue -> ID .)
    SEMICOLON       reduce using rule 26 (lvalue -> ID .)
    GT              reduce using rule 26 (lvalue -> ID .)
    GE              reduce using rule 26 (lvalue -> ID .)
    LT              reduce using rule 26 (lvalue -> ID .)
    LE              reduce using rule 26 (lvalue -> ID .)
    EQ              reduce using rule 26 (lvalue -> ID .)
    NE              reduce using rule 26 (lvalue -> ID .)
    MUL             reduce using rule 26 (lvalue -> ID .)
    DIV             reduce using rule 26 (lvalue -> ID .)
    MOD             reduce using rule 26 (lvalue -> ID .)
    SUM             reduce using rule 26 (lvalue -> ID .)
    SUB             reduce using rule 26 (lvalue -> ID .)
    AND             reduce using rule 26 (lvalue -> ID .)
    OR              reduce using rule 26 (lvalue -> ID .)
    LSB             shift and go to state 18


state 118

    (35) ostmt -> FOR LRB exp . SEMICOLON exp SEMICOLON exp RRB ostmt
    (41) cstmt -> FOR LRB exp . SEMICOLON exp SEMICOLON exp RRB cstmt
    (58) exp -> exp . relop exp
    (65) exp -> exp . operator1 exp
    (66) exp -> exp . operator2 exp
    (67) exp -> exp . operator3 exp
    (52) relop -> . GT
    (53) relop -> . GE
    (54) relop -> . LT
    (55) relop -> . LE
    (56) relop -> . EQ
    (57) relop -> . NE
    (68) operator1 -> . MUL
    (69) operator1 -> . DIV
    (70) operator1 -> . MOD
    (71) operator2 -> . SUM
    (72) operator2 -> . SUB
    (73) operator3 -> . AND
    (74) operator3 -> . OR

    SEMICOLON       shift and go to state 128
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61
    MUL             shift and go to state 62
    DIV             shift and go to state 63
    MOD             shift and go to state 64
    SUM             shift and go to state 65
    SUB             shift and go to state 66
    AND             shift and go to state 67
    OR              shift and go to state 68

    relop                          shift and go to state 52
    operator1                      shift and go to state 53
    operator2                      shift and go to state 54
    operator3                      shift and go to state 55

state 119

    (36) ostmt -> IF LRB exp . RRB cstmt elseiflist ELSE ostmt
    (37) ostmt -> IF LRB exp . RRB cstmt
    (38) ostmt -> IF LRB exp . RRB ostmt
    (42) cstmt -> IF LRB exp . RRB cstmt elseiflist ELSE cstmt
    (58) exp -> exp . relop exp
    (65) exp -> exp . operator1 exp
    (66) exp -> exp . operator2 exp
    (67) exp -> exp . operator3 exp
    (52) relop -> . GT
    (53) relop -> . GE
    (54) relop -> . LT
    (55) relop -> . LE
    (56) relop -> . EQ
    (57) relop -> . NE
    (68) operator1 -> . MUL
    (69) operator1 -> . DIV
    (70) operator1 -> . MOD
    (71) operator2 -> . SUM
    (72) operator2 -> . SUB
    (73) operator3 -> . AND
    (74) operator3 -> . OR

    RRB             shift and go to state 129
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61
    MUL             shift and go to state 62
    DIV             shift and go to state 63
    MOD             shift and go to state 64
    SUM             shift and go to state 65
    SUB             shift and go to state 66
    AND             shift and go to state 67
    OR              shift and go to state 68

    relop                          shift and go to state 52
    operator1                      shift and go to state 53
    operator2                      shift and go to state 54
    operator3                      shift and go to state 55

state 120

    (48) simple -> ON LRB exp . RRB LCB cases RCB SEMICOLON
    (58) exp -> exp . relop exp
    (65) exp -> exp . operator1 exp
    (66) exp -> exp . operator2 exp
    (67) exp -> exp . operator3 exp
    (52) relop -> . GT
    (53) relop -> . GE
    (54) relop -> . LT
    (55) relop -> . LE
    (56) relop -> . EQ
    (57) relop -> . NE
    (68) operator1 -> . MUL
    (69) operator1 -> . DIV
    (70) operator1 -> . MOD
    (71) operator2 -> . SUM
    (72) operator2 -> . SUB
    (73) operator3 -> . AND
    (74) operator3 -> . OR

    RRB             shift and go to state 130
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61
    MUL             shift and go to state 62
    DIV             shift and go to state 63
    MOD             shift and go to state 64
    SUM             shift and go to state 65
    SUB             shift and go to state 66
    AND             shift and go to state 67
    OR              shift and go to state 68

    relop                          shift and go to state 52
    operator1                      shift and go to state 53
    operator2                      shift and go to state 54
    operator3                      shift and go to state 55

state 121

    (49) simple -> RETURN exp SEMICOLON .

    RCB             reduce using rule 49 (simple -> RETURN exp SEMICOLON .)
    WHILE           reduce using rule 49 (simple -> RETURN exp SEMICOLON .)
    FOR             reduce using rule 49 (simple -> RETURN exp SEMICOLON .)
    IF              reduce using rule 49 (simple -> RETURN exp SEMICOLON .)
    ON              reduce using rule 49 (simple -> RETURN exp SEMICOLON .)
    RETURN          reduce using rule 49 (simple -> RETURN exp SEMICOLON .)
    PRINT           reduce using rule 49 (simple -> RETURN exp SEMICOLON .)
    LCB             reduce using rule 49 (simple -> RETURN exp SEMICOLON .)
    SUB             reduce using rule 49 (simple -> RETURN exp SEMICOLON .)
    NOT             reduce using rule 49 (simple -> RETURN exp SEMICOLON .)
    LRB             reduce using rule 49 (simple -> RETURN exp SEMICOLON .)
    ID              reduce using rule 49 (simple -> RETURN exp SEMICOLON .)
    INTEGERNUMBER   reduce using rule 49 (simple -> RETURN exp SEMICOLON .)
    FLOATNUMBER     reduce using rule 49 (simple -> RETURN exp SEMICOLON .)
    TRUE            reduce using rule 49 (simple -> RETURN exp SEMICOLON .)
    FALSE           reduce using rule 49 (simple -> RETURN exp SEMICOLON .)
    ELSE            reduce using rule 49 (simple -> RETURN exp SEMICOLON .)
    ELSEIF          reduce using rule 49 (simple -> RETURN exp SEMICOLON .)
    WHERE           reduce using rule 49 (simple -> RETURN exp SEMICOLON .)


state 122

    (51) simple -> PRINT LRB ID . RRB SEMICOLON

    RRB             shift and go to state 131


state 123

    (63) exp -> lvalue ASSIGN exp .
    (12) iddec -> lvalue ASSIGN exp .
    (58) exp -> exp . relop exp
    (65) exp -> exp . operator1 exp
    (66) exp -> exp . operator2 exp
    (67) exp -> exp . operator3 exp
    (52) relop -> . GT
    (53) relop -> . GE
    (54) relop -> . LT
    (55) relop -> . LE
    (56) relop -> . EQ
    (57) relop -> . NE
    (68) operator1 -> . MUL
    (69) operator1 -> . DIV
    (70) operator1 -> . MOD
    (71) operator2 -> . SUM
    (72) operator2 -> . SUB
    (73) operator3 -> . AND
    (74) operator3 -> . OR

    SEMICOLON       reduce using rule 63 (exp -> lvalue ASSIGN exp .)
    COLON           reduce using rule 12 (iddec -> lvalue ASSIGN exp .)
    COMMA           reduce using rule 12 (iddec -> lvalue ASSIGN exp .)
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61
    MUL             shift and go to state 62
    DIV             shift and go to state 63
    MOD             shift and go to state 64
    SUM             shift and go to state 65
    SUB             shift and go to state 66
    AND             shift and go to state 67
    OR              shift and go to state 68

  ! GT              [ reduce using rule 63 (exp -> lvalue ASSIGN exp .) ]
  ! GE              [ reduce using rule 63 (exp -> lvalue ASSIGN exp .) ]
  ! LT              [ reduce using rule 63 (exp -> lvalue ASSIGN exp .) ]
  ! LE              [ reduce using rule 63 (exp -> lvalue ASSIGN exp .) ]
  ! EQ              [ reduce using rule 63 (exp -> lvalue ASSIGN exp .) ]
  ! NE              [ reduce using rule 63 (exp -> lvalue ASSIGN exp .) ]
  ! MUL             [ reduce using rule 63 (exp -> lvalue ASSIGN exp .) ]
  ! DIV             [ reduce using rule 63 (exp -> lvalue ASSIGN exp .) ]
  ! MOD             [ reduce using rule 63 (exp -> lvalue ASSIGN exp .) ]
  ! SUM             [ reduce using rule 63 (exp -> lvalue ASSIGN exp .) ]
  ! SUB             [ reduce using rule 63 (exp -> lvalue ASSIGN exp .) ]
  ! AND             [ reduce using rule 63 (exp -> lvalue ASSIGN exp .) ]
  ! OR              [ reduce using rule 63 (exp -> lvalue ASSIGN exp .) ]

    relop                          shift and go to state 52
    operator1                      shift and go to state 53
    operator2                      shift and go to state 54
    operator3                      shift and go to state 55

state 124

    (20) paramdec -> ID LSB RSB COLON type .

    COMMA           reduce using rule 20 (paramdec -> ID LSB RSB COLON type .)
    RRB             reduce using rule 20 (paramdec -> ID LSB RSB COLON type .)


state 125

    (7) funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .

    MAIN            reduce using rule 7 (funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .)
    FUNCTION        reduce using rule 7 (funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .)
    ID              reduce using rule 7 (funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .)


state 126

    (33) ostmt -> WHILE LRB exp RRB . ostmt
    (39) cstmt -> WHILE LRB exp RRB . cstmt
    (33) ostmt -> . WHILE LRB exp RRB ostmt
    (34) ostmt -> . FOR LRB ID IN ID RRB ostmt
    (35) ostmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt
    (36) ostmt -> . IF LRB exp RRB cstmt elseiflist ELSE ostmt
    (37) ostmt -> . IF LRB exp RRB cstmt
    (38) ostmt -> . IF LRB exp RRB ostmt
    (39) cstmt -> . WHILE LRB exp RRB cstmt
    (40) cstmt -> . FOR LRB ID IN ID RRB cstmt
    (41) cstmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt
    (42) cstmt -> . IF LRB exp RRB cstmt elseiflist ELSE cstmt
    (43) cstmt -> . simple
    (46) simple -> . block
    (47) simple -> . vardec
    (48) simple -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (49) simple -> . RETURN exp SEMICOLON
    (50) simple -> . exp SEMICOLON
    (51) simple -> . PRINT LRB ID RRB SEMICOLON
    (22) block -> . LCB stmtlist RCB
    (6) vardec -> . idlist COLON type SEMICOLON
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (14) idlist -> . idlist COMMA iddec
    (15) idlist -> . iddec
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE
    (12) iddec -> . lvalue ASSIGN exp
    (13) iddec -> . lvalue

    WHILE           shift and go to state 90
    FOR             shift and go to state 92
    IF              shift and go to state 93
    ON              shift and go to state 97
    RETURN          shift and go to state 98
    PRINT           shift and go to state 99
    LCB             shift and go to state 42
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 91
    ostmt                          shift and go to state 132
    cstmt                          shift and go to state 133
    simple                         shift and go to state 94
    block                          shift and go to state 95
    vardec                         shift and go to state 96
    idlist                         shift and go to state 8
    lvalue                         shift and go to state 100
    const                          shift and go to state 34
    iddec                          shift and go to state 11

state 127

    (34) ostmt -> FOR LRB ID IN . ID RRB ostmt
    (40) cstmt -> FOR LRB ID IN . ID RRB cstmt

    ID              shift and go to state 134


state 128

    (35) ostmt -> FOR LRB exp SEMICOLON . exp SEMICOLON exp RRB ostmt
    (41) cstmt -> FOR LRB exp SEMICOLON . exp SEMICOLON exp RRB cstmt
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE

    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 135
    lvalue                         shift and go to state 31
    const                          shift and go to state 34

state 129

    (36) ostmt -> IF LRB exp RRB . cstmt elseiflist ELSE ostmt
    (37) ostmt -> IF LRB exp RRB . cstmt
    (38) ostmt -> IF LRB exp RRB . ostmt
    (42) cstmt -> IF LRB exp RRB . cstmt elseiflist ELSE cstmt
    (39) cstmt -> . WHILE LRB exp RRB cstmt
    (40) cstmt -> . FOR LRB ID IN ID RRB cstmt
    (41) cstmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt
    (42) cstmt -> . IF LRB exp RRB cstmt elseiflist ELSE cstmt
    (43) cstmt -> . simple
    (33) ostmt -> . WHILE LRB exp RRB ostmt
    (34) ostmt -> . FOR LRB ID IN ID RRB ostmt
    (35) ostmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt
    (36) ostmt -> . IF LRB exp RRB cstmt elseiflist ELSE ostmt
    (37) ostmt -> . IF LRB exp RRB cstmt
    (38) ostmt -> . IF LRB exp RRB ostmt
    (46) simple -> . block
    (47) simple -> . vardec
    (48) simple -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (49) simple -> . RETURN exp SEMICOLON
    (50) simple -> . exp SEMICOLON
    (51) simple -> . PRINT LRB ID RRB SEMICOLON
    (22) block -> . LCB stmtlist RCB
    (6) vardec -> . idlist COLON type SEMICOLON
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (14) idlist -> . idlist COMMA iddec
    (15) idlist -> . iddec
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE
    (12) iddec -> . lvalue ASSIGN exp
    (13) iddec -> . lvalue

    WHILE           shift and go to state 139
    FOR             shift and go to state 140
    IF              shift and go to state 136
    ON              shift and go to state 97
    RETURN          shift and go to state 98
    PRINT           shift and go to state 99
    LCB             shift and go to state 42
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 91
    cstmt                          shift and go to state 137
    ostmt                          shift and go to state 138
    simple                         shift and go to state 94
    block                          shift and go to state 95
    vardec                         shift and go to state 96
    idlist                         shift and go to state 8
    lvalue                         shift and go to state 100
    const                          shift and go to state 34
    iddec                          shift and go to state 11

state 130

    (48) simple -> ON LRB exp RRB . LCB cases RCB SEMICOLON

    LCB             shift and go to state 141


state 131

    (51) simple -> PRINT LRB ID RRB . SEMICOLON

    SEMICOLON       shift and go to state 142


state 132

    (33) ostmt -> WHILE LRB exp RRB ostmt .

    RCB             reduce using rule 33 (ostmt -> WHILE LRB exp RRB ostmt .)
    WHILE           reduce using rule 33 (ostmt -> WHILE LRB exp RRB ostmt .)
    FOR             reduce using rule 33 (ostmt -> WHILE LRB exp RRB ostmt .)
    IF              reduce using rule 33 (ostmt -> WHILE LRB exp RRB ostmt .)
    ON              reduce using rule 33 (ostmt -> WHILE LRB exp RRB ostmt .)
    RETURN          reduce using rule 33 (ostmt -> WHILE LRB exp RRB ostmt .)
    PRINT           reduce using rule 33 (ostmt -> WHILE LRB exp RRB ostmt .)
    LCB             reduce using rule 33 (ostmt -> WHILE LRB exp RRB ostmt .)
    SUB             reduce using rule 33 (ostmt -> WHILE LRB exp RRB ostmt .)
    NOT             reduce using rule 33 (ostmt -> WHILE LRB exp RRB ostmt .)
    LRB             reduce using rule 33 (ostmt -> WHILE LRB exp RRB ostmt .)
    ID              reduce using rule 33 (ostmt -> WHILE LRB exp RRB ostmt .)
    INTEGERNUMBER   reduce using rule 33 (ostmt -> WHILE LRB exp RRB ostmt .)
    FLOATNUMBER     reduce using rule 33 (ostmt -> WHILE LRB exp RRB ostmt .)
    TRUE            reduce using rule 33 (ostmt -> WHILE LRB exp RRB ostmt .)
    FALSE           reduce using rule 33 (ostmt -> WHILE LRB exp RRB ostmt .)
    WHERE           reduce using rule 33 (ostmt -> WHILE LRB exp RRB ostmt .)


state 133

    (39) cstmt -> WHILE LRB exp RRB cstmt .

    RCB             reduce using rule 39 (cstmt -> WHILE LRB exp RRB cstmt .)
    WHILE           reduce using rule 39 (cstmt -> WHILE LRB exp RRB cstmt .)
    FOR             reduce using rule 39 (cstmt -> WHILE LRB exp RRB cstmt .)
    IF              reduce using rule 39 (cstmt -> WHILE LRB exp RRB cstmt .)
    ON              reduce using rule 39 (cstmt -> WHILE LRB exp RRB cstmt .)
    RETURN          reduce using rule 39 (cstmt -> WHILE LRB exp RRB cstmt .)
    PRINT           reduce using rule 39 (cstmt -> WHILE LRB exp RRB cstmt .)
    LCB             reduce using rule 39 (cstmt -> WHILE LRB exp RRB cstmt .)
    SUB             reduce using rule 39 (cstmt -> WHILE LRB exp RRB cstmt .)
    NOT             reduce using rule 39 (cstmt -> WHILE LRB exp RRB cstmt .)
    LRB             reduce using rule 39 (cstmt -> WHILE LRB exp RRB cstmt .)
    ID              reduce using rule 39 (cstmt -> WHILE LRB exp RRB cstmt .)
    INTEGERNUMBER   reduce using rule 39 (cstmt -> WHILE LRB exp RRB cstmt .)
    FLOATNUMBER     reduce using rule 39 (cstmt -> WHILE LRB exp RRB cstmt .)
    TRUE            reduce using rule 39 (cstmt -> WHILE LRB exp RRB cstmt .)
    FALSE           reduce using rule 39 (cstmt -> WHILE LRB exp RRB cstmt .)
    ELSE            reduce using rule 39 (cstmt -> WHILE LRB exp RRB cstmt .)
    ELSEIF          reduce using rule 39 (cstmt -> WHILE LRB exp RRB cstmt .)
    WHERE           reduce using rule 39 (cstmt -> WHILE LRB exp RRB cstmt .)


state 134

    (34) ostmt -> FOR LRB ID IN ID . RRB ostmt
    (40) cstmt -> FOR LRB ID IN ID . RRB cstmt

    RRB             shift and go to state 143


state 135

    (35) ostmt -> FOR LRB exp SEMICOLON exp . SEMICOLON exp RRB ostmt
    (41) cstmt -> FOR LRB exp SEMICOLON exp . SEMICOLON exp RRB cstmt
    (58) exp -> exp . relop exp
    (65) exp -> exp . operator1 exp
    (66) exp -> exp . operator2 exp
    (67) exp -> exp . operator3 exp
    (52) relop -> . GT
    (53) relop -> . GE
    (54) relop -> . LT
    (55) relop -> . LE
    (56) relop -> . EQ
    (57) relop -> . NE
    (68) operator1 -> . MUL
    (69) operator1 -> . DIV
    (70) operator1 -> . MOD
    (71) operator2 -> . SUM
    (72) operator2 -> . SUB
    (73) operator3 -> . AND
    (74) operator3 -> . OR

    SEMICOLON       shift and go to state 144
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61
    MUL             shift and go to state 62
    DIV             shift and go to state 63
    MOD             shift and go to state 64
    SUM             shift and go to state 65
    SUB             shift and go to state 66
    AND             shift and go to state 67
    OR              shift and go to state 68

    relop                          shift and go to state 52
    operator1                      shift and go to state 53
    operator2                      shift and go to state 54
    operator3                      shift and go to state 55

state 136

    (42) cstmt -> IF . LRB exp RRB cstmt elseiflist ELSE cstmt
    (36) ostmt -> IF . LRB exp RRB cstmt elseiflist ELSE ostmt
    (37) ostmt -> IF . LRB exp RRB cstmt
    (38) ostmt -> IF . LRB exp RRB ostmt

    LRB             shift and go to state 145


state 137

    (36) ostmt -> IF LRB exp RRB cstmt . elseiflist ELSE ostmt
    (37) ostmt -> IF LRB exp RRB cstmt .
    (42) cstmt -> IF LRB exp RRB cstmt . elseiflist ELSE cstmt
    (44) elseiflist -> . elseiflist ELSEIF LRB exp RRB cstmt
    (45) elseiflist -> . eps
    (82) eps -> .

    RCB             reduce using rule 37 (ostmt -> IF LRB exp RRB cstmt .)
    WHILE           reduce using rule 37 (ostmt -> IF LRB exp RRB cstmt .)
    FOR             reduce using rule 37 (ostmt -> IF LRB exp RRB cstmt .)
    IF              reduce using rule 37 (ostmt -> IF LRB exp RRB cstmt .)
    ON              reduce using rule 37 (ostmt -> IF LRB exp RRB cstmt .)
    RETURN          reduce using rule 37 (ostmt -> IF LRB exp RRB cstmt .)
    PRINT           reduce using rule 37 (ostmt -> IF LRB exp RRB cstmt .)
    LCB             reduce using rule 37 (ostmt -> IF LRB exp RRB cstmt .)
    SUB             reduce using rule 37 (ostmt -> IF LRB exp RRB cstmt .)
    NOT             reduce using rule 37 (ostmt -> IF LRB exp RRB cstmt .)
    LRB             reduce using rule 37 (ostmt -> IF LRB exp RRB cstmt .)
    ID              reduce using rule 37 (ostmt -> IF LRB exp RRB cstmt .)
    INTEGERNUMBER   reduce using rule 37 (ostmt -> IF LRB exp RRB cstmt .)
    FLOATNUMBER     reduce using rule 37 (ostmt -> IF LRB exp RRB cstmt .)
    TRUE            reduce using rule 37 (ostmt -> IF LRB exp RRB cstmt .)
    FALSE           reduce using rule 37 (ostmt -> IF LRB exp RRB cstmt .)
    WHERE           reduce using rule 37 (ostmt -> IF LRB exp RRB cstmt .)
    ELSE            reduce using rule 82 (eps -> .)
    ELSEIF          reduce using rule 82 (eps -> .)

    elseiflist                     shift and go to state 146
    eps                            shift and go to state 147

state 138

    (38) ostmt -> IF LRB exp RRB ostmt .

    RCB             reduce using rule 38 (ostmt -> IF LRB exp RRB ostmt .)
    WHILE           reduce using rule 38 (ostmt -> IF LRB exp RRB ostmt .)
    FOR             reduce using rule 38 (ostmt -> IF LRB exp RRB ostmt .)
    IF              reduce using rule 38 (ostmt -> IF LRB exp RRB ostmt .)
    ON              reduce using rule 38 (ostmt -> IF LRB exp RRB ostmt .)
    RETURN          reduce using rule 38 (ostmt -> IF LRB exp RRB ostmt .)
    PRINT           reduce using rule 38 (ostmt -> IF LRB exp RRB ostmt .)
    LCB             reduce using rule 38 (ostmt -> IF LRB exp RRB ostmt .)
    SUB             reduce using rule 38 (ostmt -> IF LRB exp RRB ostmt .)
    NOT             reduce using rule 38 (ostmt -> IF LRB exp RRB ostmt .)
    LRB             reduce using rule 38 (ostmt -> IF LRB exp RRB ostmt .)
    ID              reduce using rule 38 (ostmt -> IF LRB exp RRB ostmt .)
    INTEGERNUMBER   reduce using rule 38 (ostmt -> IF LRB exp RRB ostmt .)
    FLOATNUMBER     reduce using rule 38 (ostmt -> IF LRB exp RRB ostmt .)
    TRUE            reduce using rule 38 (ostmt -> IF LRB exp RRB ostmt .)
    FALSE           reduce using rule 38 (ostmt -> IF LRB exp RRB ostmt .)
    WHERE           reduce using rule 38 (ostmt -> IF LRB exp RRB ostmt .)


state 139

    (39) cstmt -> WHILE . LRB exp RRB cstmt
    (33) ostmt -> WHILE . LRB exp RRB ostmt

    LRB             shift and go to state 148


state 140

    (40) cstmt -> FOR . LRB ID IN ID RRB cstmt
    (41) cstmt -> FOR . LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt
    (34) ostmt -> FOR . LRB ID IN ID RRB ostmt
    (35) ostmt -> FOR . LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt

    LRB             shift and go to state 149


state 141

    (48) simple -> ON LRB exp RRB LCB . cases RCB SEMICOLON
    (29) cases -> . cases case
    (30) cases -> . eps
    (82) eps -> .

    RCB             reduce using rule 82 (eps -> .)
    WHERE           reduce using rule 82 (eps -> .)

    cases                          shift and go to state 150
    eps                            shift and go to state 151

state 142

    (51) simple -> PRINT LRB ID RRB SEMICOLON .

    RCB             reduce using rule 51 (simple -> PRINT LRB ID RRB SEMICOLON .)
    WHILE           reduce using rule 51 (simple -> PRINT LRB ID RRB SEMICOLON .)
    FOR             reduce using rule 51 (simple -> PRINT LRB ID RRB SEMICOLON .)
    IF              reduce using rule 51 (simple -> PRINT LRB ID RRB SEMICOLON .)
    ON              reduce using rule 51 (simple -> PRINT LRB ID RRB SEMICOLON .)
    RETURN          reduce using rule 51 (simple -> PRINT LRB ID RRB SEMICOLON .)
    PRINT           reduce using rule 51 (simple -> PRINT LRB ID RRB SEMICOLON .)
    LCB             reduce using rule 51 (simple -> PRINT LRB ID RRB SEMICOLON .)
    SUB             reduce using rule 51 (simple -> PRINT LRB ID RRB SEMICOLON .)
    NOT             reduce using rule 51 (simple -> PRINT LRB ID RRB SEMICOLON .)
    LRB             reduce using rule 51 (simple -> PRINT LRB ID RRB SEMICOLON .)
    ID              reduce using rule 51 (simple -> PRINT LRB ID RRB SEMICOLON .)
    INTEGERNUMBER   reduce using rule 51 (simple -> PRINT LRB ID RRB SEMICOLON .)
    FLOATNUMBER     reduce using rule 51 (simple -> PRINT LRB ID RRB SEMICOLON .)
    TRUE            reduce using rule 51 (simple -> PRINT LRB ID RRB SEMICOLON .)
    FALSE           reduce using rule 51 (simple -> PRINT LRB ID RRB SEMICOLON .)
    ELSE            reduce using rule 51 (simple -> PRINT LRB ID RRB SEMICOLON .)
    ELSEIF          reduce using rule 51 (simple -> PRINT LRB ID RRB SEMICOLON .)
    WHERE           reduce using rule 51 (simple -> PRINT LRB ID RRB SEMICOLON .)


state 143

    (34) ostmt -> FOR LRB ID IN ID RRB . ostmt
    (40) cstmt -> FOR LRB ID IN ID RRB . cstmt
    (33) ostmt -> . WHILE LRB exp RRB ostmt
    (34) ostmt -> . FOR LRB ID IN ID RRB ostmt
    (35) ostmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt
    (36) ostmt -> . IF LRB exp RRB cstmt elseiflist ELSE ostmt
    (37) ostmt -> . IF LRB exp RRB cstmt
    (38) ostmt -> . IF LRB exp RRB ostmt
    (39) cstmt -> . WHILE LRB exp RRB cstmt
    (40) cstmt -> . FOR LRB ID IN ID RRB cstmt
    (41) cstmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt
    (42) cstmt -> . IF LRB exp RRB cstmt elseiflist ELSE cstmt
    (43) cstmt -> . simple
    (46) simple -> . block
    (47) simple -> . vardec
    (48) simple -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (49) simple -> . RETURN exp SEMICOLON
    (50) simple -> . exp SEMICOLON
    (51) simple -> . PRINT LRB ID RRB SEMICOLON
    (22) block -> . LCB stmtlist RCB
    (6) vardec -> . idlist COLON type SEMICOLON
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (14) idlist -> . idlist COMMA iddec
    (15) idlist -> . iddec
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE
    (12) iddec -> . lvalue ASSIGN exp
    (13) iddec -> . lvalue

    WHILE           shift and go to state 90
    FOR             shift and go to state 92
    IF              shift and go to state 93
    ON              shift and go to state 97
    RETURN          shift and go to state 98
    PRINT           shift and go to state 99
    LCB             shift and go to state 42
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    ostmt                          shift and go to state 152
    cstmt                          shift and go to state 153
    exp                            shift and go to state 91
    simple                         shift and go to state 94
    block                          shift and go to state 95
    vardec                         shift and go to state 96
    idlist                         shift and go to state 8
    lvalue                         shift and go to state 100
    const                          shift and go to state 34
    iddec                          shift and go to state 11

state 144

    (35) ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON . exp RRB ostmt
    (41) cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON . exp RRB cstmt
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE

    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 154
    lvalue                         shift and go to state 31
    const                          shift and go to state 34

state 145

    (42) cstmt -> IF LRB . exp RRB cstmt elseiflist ELSE cstmt
    (36) ostmt -> IF LRB . exp RRB cstmt elseiflist ELSE ostmt
    (37) ostmt -> IF LRB . exp RRB cstmt
    (38) ostmt -> IF LRB . exp RRB ostmt
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE

    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 155
    lvalue                         shift and go to state 31
    const                          shift and go to state 34

state 146

    (36) ostmt -> IF LRB exp RRB cstmt elseiflist . ELSE ostmt
    (42) cstmt -> IF LRB exp RRB cstmt elseiflist . ELSE cstmt
    (44) elseiflist -> elseiflist . ELSEIF LRB exp RRB cstmt

    ELSE            shift and go to state 156
    ELSEIF          shift and go to state 157


state 147

    (45) elseiflist -> eps .

    ELSE            reduce using rule 45 (elseiflist -> eps .)
    ELSEIF          reduce using rule 45 (elseiflist -> eps .)


state 148

    (39) cstmt -> WHILE LRB . exp RRB cstmt
    (33) ostmt -> WHILE LRB . exp RRB ostmt
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE

    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 158
    lvalue                         shift and go to state 31
    const                          shift and go to state 34

state 149

    (40) cstmt -> FOR LRB . ID IN ID RRB cstmt
    (41) cstmt -> FOR LRB . exp SEMICOLON exp SEMICOLON exp RRB cstmt
    (34) ostmt -> FOR LRB . ID IN ID RRB ostmt
    (35) ostmt -> FOR LRB . exp SEMICOLON exp SEMICOLON exp RRB ostmt
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE

    ID              shift and go to state 159
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 160
    lvalue                         shift and go to state 31
    const                          shift and go to state 34

state 150

    (48) simple -> ON LRB exp RRB LCB cases . RCB SEMICOLON
    (29) cases -> cases . case
    (28) case -> . WHERE const COLON stmtlist

    RCB             shift and go to state 161
    WHERE           shift and go to state 163

    case                           shift and go to state 162

state 151

    (30) cases -> eps .

    RCB             reduce using rule 30 (cases -> eps .)
    WHERE           reduce using rule 30 (cases -> eps .)


state 152

    (34) ostmt -> FOR LRB ID IN ID RRB ostmt .

    RCB             reduce using rule 34 (ostmt -> FOR LRB ID IN ID RRB ostmt .)
    WHILE           reduce using rule 34 (ostmt -> FOR LRB ID IN ID RRB ostmt .)
    FOR             reduce using rule 34 (ostmt -> FOR LRB ID IN ID RRB ostmt .)
    IF              reduce using rule 34 (ostmt -> FOR LRB ID IN ID RRB ostmt .)
    ON              reduce using rule 34 (ostmt -> FOR LRB ID IN ID RRB ostmt .)
    RETURN          reduce using rule 34 (ostmt -> FOR LRB ID IN ID RRB ostmt .)
    PRINT           reduce using rule 34 (ostmt -> FOR LRB ID IN ID RRB ostmt .)
    LCB             reduce using rule 34 (ostmt -> FOR LRB ID IN ID RRB ostmt .)
    SUB             reduce using rule 34 (ostmt -> FOR LRB ID IN ID RRB ostmt .)
    NOT             reduce using rule 34 (ostmt -> FOR LRB ID IN ID RRB ostmt .)
    LRB             reduce using rule 34 (ostmt -> FOR LRB ID IN ID RRB ostmt .)
    ID              reduce using rule 34 (ostmt -> FOR LRB ID IN ID RRB ostmt .)
    INTEGERNUMBER   reduce using rule 34 (ostmt -> FOR LRB ID IN ID RRB ostmt .)
    FLOATNUMBER     reduce using rule 34 (ostmt -> FOR LRB ID IN ID RRB ostmt .)
    TRUE            reduce using rule 34 (ostmt -> FOR LRB ID IN ID RRB ostmt .)
    FALSE           reduce using rule 34 (ostmt -> FOR LRB ID IN ID RRB ostmt .)
    WHERE           reduce using rule 34 (ostmt -> FOR LRB ID IN ID RRB ostmt .)


state 153

    (40) cstmt -> FOR LRB ID IN ID RRB cstmt .

    RCB             reduce using rule 40 (cstmt -> FOR LRB ID IN ID RRB cstmt .)
    WHILE           reduce using rule 40 (cstmt -> FOR LRB ID IN ID RRB cstmt .)
    FOR             reduce using rule 40 (cstmt -> FOR LRB ID IN ID RRB cstmt .)
    IF              reduce using rule 40 (cstmt -> FOR LRB ID IN ID RRB cstmt .)
    ON              reduce using rule 40 (cstmt -> FOR LRB ID IN ID RRB cstmt .)
    RETURN          reduce using rule 40 (cstmt -> FOR LRB ID IN ID RRB cstmt .)
    PRINT           reduce using rule 40 (cstmt -> FOR LRB ID IN ID RRB cstmt .)
    LCB             reduce using rule 40 (cstmt -> FOR LRB ID IN ID RRB cstmt .)
    SUB             reduce using rule 40 (cstmt -> FOR LRB ID IN ID RRB cstmt .)
    NOT             reduce using rule 40 (cstmt -> FOR LRB ID IN ID RRB cstmt .)
    LRB             reduce using rule 40 (cstmt -> FOR LRB ID IN ID RRB cstmt .)
    ID              reduce using rule 40 (cstmt -> FOR LRB ID IN ID RRB cstmt .)
    INTEGERNUMBER   reduce using rule 40 (cstmt -> FOR LRB ID IN ID RRB cstmt .)
    FLOATNUMBER     reduce using rule 40 (cstmt -> FOR LRB ID IN ID RRB cstmt .)
    TRUE            reduce using rule 40 (cstmt -> FOR LRB ID IN ID RRB cstmt .)
    FALSE           reduce using rule 40 (cstmt -> FOR LRB ID IN ID RRB cstmt .)
    ELSE            reduce using rule 40 (cstmt -> FOR LRB ID IN ID RRB cstmt .)
    ELSEIF          reduce using rule 40 (cstmt -> FOR LRB ID IN ID RRB cstmt .)
    WHERE           reduce using rule 40 (cstmt -> FOR LRB ID IN ID RRB cstmt .)


state 154

    (35) ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp . RRB ostmt
    (41) cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp . RRB cstmt
    (58) exp -> exp . relop exp
    (65) exp -> exp . operator1 exp
    (66) exp -> exp . operator2 exp
    (67) exp -> exp . operator3 exp
    (52) relop -> . GT
    (53) relop -> . GE
    (54) relop -> . LT
    (55) relop -> . LE
    (56) relop -> . EQ
    (57) relop -> . NE
    (68) operator1 -> . MUL
    (69) operator1 -> . DIV
    (70) operator1 -> . MOD
    (71) operator2 -> . SUM
    (72) operator2 -> . SUB
    (73) operator3 -> . AND
    (74) operator3 -> . OR

    RRB             shift and go to state 164
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61
    MUL             shift and go to state 62
    DIV             shift and go to state 63
    MOD             shift and go to state 64
    SUM             shift and go to state 65
    SUB             shift and go to state 66
    AND             shift and go to state 67
    OR              shift and go to state 68

    relop                          shift and go to state 52
    operator1                      shift and go to state 53
    operator2                      shift and go to state 54
    operator3                      shift and go to state 55

state 155

    (42) cstmt -> IF LRB exp . RRB cstmt elseiflist ELSE cstmt
    (36) ostmt -> IF LRB exp . RRB cstmt elseiflist ELSE ostmt
    (37) ostmt -> IF LRB exp . RRB cstmt
    (38) ostmt -> IF LRB exp . RRB ostmt
    (58) exp -> exp . relop exp
    (65) exp -> exp . operator1 exp
    (66) exp -> exp . operator2 exp
    (67) exp -> exp . operator3 exp
    (52) relop -> . GT
    (53) relop -> . GE
    (54) relop -> . LT
    (55) relop -> . LE
    (56) relop -> . EQ
    (57) relop -> . NE
    (68) operator1 -> . MUL
    (69) operator1 -> . DIV
    (70) operator1 -> . MOD
    (71) operator2 -> . SUM
    (72) operator2 -> . SUB
    (73) operator3 -> . AND
    (74) operator3 -> . OR

    RRB             shift and go to state 165
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61
    MUL             shift and go to state 62
    DIV             shift and go to state 63
    MOD             shift and go to state 64
    SUM             shift and go to state 65
    SUB             shift and go to state 66
    AND             shift and go to state 67
    OR              shift and go to state 68

    relop                          shift and go to state 52
    operator1                      shift and go to state 53
    operator2                      shift and go to state 54
    operator3                      shift and go to state 55

state 156

    (36) ostmt -> IF LRB exp RRB cstmt elseiflist ELSE . ostmt
    (42) cstmt -> IF LRB exp RRB cstmt elseiflist ELSE . cstmt
    (33) ostmt -> . WHILE LRB exp RRB ostmt
    (34) ostmt -> . FOR LRB ID IN ID RRB ostmt
    (35) ostmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt
    (36) ostmt -> . IF LRB exp RRB cstmt elseiflist ELSE ostmt
    (37) ostmt -> . IF LRB exp RRB cstmt
    (38) ostmt -> . IF LRB exp RRB ostmt
    (39) cstmt -> . WHILE LRB exp RRB cstmt
    (40) cstmt -> . FOR LRB ID IN ID RRB cstmt
    (41) cstmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt
    (42) cstmt -> . IF LRB exp RRB cstmt elseiflist ELSE cstmt
    (43) cstmt -> . simple
    (46) simple -> . block
    (47) simple -> . vardec
    (48) simple -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (49) simple -> . RETURN exp SEMICOLON
    (50) simple -> . exp SEMICOLON
    (51) simple -> . PRINT LRB ID RRB SEMICOLON
    (22) block -> . LCB stmtlist RCB
    (6) vardec -> . idlist COLON type SEMICOLON
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (14) idlist -> . idlist COMMA iddec
    (15) idlist -> . iddec
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE
    (12) iddec -> . lvalue ASSIGN exp
    (13) iddec -> . lvalue

    WHILE           shift and go to state 90
    FOR             shift and go to state 92
    IF              shift and go to state 93
    ON              shift and go to state 97
    RETURN          shift and go to state 98
    PRINT           shift and go to state 99
    LCB             shift and go to state 42
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 91
    cstmt                          shift and go to state 166
    ostmt                          shift and go to state 167
    simple                         shift and go to state 94
    block                          shift and go to state 95
    vardec                         shift and go to state 96
    idlist                         shift and go to state 8
    lvalue                         shift and go to state 100
    const                          shift and go to state 34
    iddec                          shift and go to state 11

state 157

    (44) elseiflist -> elseiflist ELSEIF . LRB exp RRB cstmt

    LRB             shift and go to state 168


state 158

    (39) cstmt -> WHILE LRB exp . RRB cstmt
    (33) ostmt -> WHILE LRB exp . RRB ostmt
    (58) exp -> exp . relop exp
    (65) exp -> exp . operator1 exp
    (66) exp -> exp . operator2 exp
    (67) exp -> exp . operator3 exp
    (52) relop -> . GT
    (53) relop -> . GE
    (54) relop -> . LT
    (55) relop -> . LE
    (56) relop -> . EQ
    (57) relop -> . NE
    (68) operator1 -> . MUL
    (69) operator1 -> . DIV
    (70) operator1 -> . MOD
    (71) operator2 -> . SUM
    (72) operator2 -> . SUB
    (73) operator3 -> . AND
    (74) operator3 -> . OR

    RRB             shift and go to state 169
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61
    MUL             shift and go to state 62
    DIV             shift and go to state 63
    MOD             shift and go to state 64
    SUM             shift and go to state 65
    SUB             shift and go to state 66
    AND             shift and go to state 67
    OR              shift and go to state 68

    relop                          shift and go to state 52
    operator1                      shift and go to state 53
    operator2                      shift and go to state 54
    operator3                      shift and go to state 55

state 159

    (40) cstmt -> FOR LRB ID . IN ID RRB cstmt
    (34) ostmt -> FOR LRB ID . IN ID RRB ostmt
    (25) lvalue -> ID . LRB explist RRB
    (26) lvalue -> ID .
    (27) lvalue -> ID . LSB exp RSB

    IN              shift and go to state 170
    LRB             shift and go to state 17
    ASSIGN          reduce using rule 26 (lvalue -> ID .)
    SEMICOLON       reduce using rule 26 (lvalue -> ID .)
    GT              reduce using rule 26 (lvalue -> ID .)
    GE              reduce using rule 26 (lvalue -> ID .)
    LT              reduce using rule 26 (lvalue -> ID .)
    LE              reduce using rule 26 (lvalue -> ID .)
    EQ              reduce using rule 26 (lvalue -> ID .)
    NE              reduce using rule 26 (lvalue -> ID .)
    MUL             reduce using rule 26 (lvalue -> ID .)
    DIV             reduce using rule 26 (lvalue -> ID .)
    MOD             reduce using rule 26 (lvalue -> ID .)
    SUM             reduce using rule 26 (lvalue -> ID .)
    SUB             reduce using rule 26 (lvalue -> ID .)
    AND             reduce using rule 26 (lvalue -> ID .)
    OR              reduce using rule 26 (lvalue -> ID .)
    LSB             shift and go to state 18


state 160

    (41) cstmt -> FOR LRB exp . SEMICOLON exp SEMICOLON exp RRB cstmt
    (35) ostmt -> FOR LRB exp . SEMICOLON exp SEMICOLON exp RRB ostmt
    (58) exp -> exp . relop exp
    (65) exp -> exp . operator1 exp
    (66) exp -> exp . operator2 exp
    (67) exp -> exp . operator3 exp
    (52) relop -> . GT
    (53) relop -> . GE
    (54) relop -> . LT
    (55) relop -> . LE
    (56) relop -> . EQ
    (57) relop -> . NE
    (68) operator1 -> . MUL
    (69) operator1 -> . DIV
    (70) operator1 -> . MOD
    (71) operator2 -> . SUM
    (72) operator2 -> . SUB
    (73) operator3 -> . AND
    (74) operator3 -> . OR

    SEMICOLON       shift and go to state 171
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61
    MUL             shift and go to state 62
    DIV             shift and go to state 63
    MOD             shift and go to state 64
    SUM             shift and go to state 65
    SUB             shift and go to state 66
    AND             shift and go to state 67
    OR              shift and go to state 68

    relop                          shift and go to state 52
    operator1                      shift and go to state 53
    operator2                      shift and go to state 54
    operator3                      shift and go to state 55

state 161

    (48) simple -> ON LRB exp RRB LCB cases RCB . SEMICOLON

    SEMICOLON       shift and go to state 172


state 162

    (29) cases -> cases case .

    RCB             reduce using rule 29 (cases -> cases case .)
    WHERE           reduce using rule 29 (cases -> cases case .)


state 163

    (28) case -> WHERE . const COLON stmtlist
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE

    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    const                          shift and go to state 173

state 164

    (35) ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB . ostmt
    (41) cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB . cstmt
    (33) ostmt -> . WHILE LRB exp RRB ostmt
    (34) ostmt -> . FOR LRB ID IN ID RRB ostmt
    (35) ostmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt
    (36) ostmt -> . IF LRB exp RRB cstmt elseiflist ELSE ostmt
    (37) ostmt -> . IF LRB exp RRB cstmt
    (38) ostmt -> . IF LRB exp RRB ostmt
    (39) cstmt -> . WHILE LRB exp RRB cstmt
    (40) cstmt -> . FOR LRB ID IN ID RRB cstmt
    (41) cstmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt
    (42) cstmt -> . IF LRB exp RRB cstmt elseiflist ELSE cstmt
    (43) cstmt -> . simple
    (46) simple -> . block
    (47) simple -> . vardec
    (48) simple -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (49) simple -> . RETURN exp SEMICOLON
    (50) simple -> . exp SEMICOLON
    (51) simple -> . PRINT LRB ID RRB SEMICOLON
    (22) block -> . LCB stmtlist RCB
    (6) vardec -> . idlist COLON type SEMICOLON
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (14) idlist -> . idlist COMMA iddec
    (15) idlist -> . iddec
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE
    (12) iddec -> . lvalue ASSIGN exp
    (13) iddec -> . lvalue

    WHILE           shift and go to state 90
    FOR             shift and go to state 92
    IF              shift and go to state 93
    ON              shift and go to state 97
    RETURN          shift and go to state 98
    PRINT           shift and go to state 99
    LCB             shift and go to state 42
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 91
    ostmt                          shift and go to state 174
    cstmt                          shift and go to state 175
    simple                         shift and go to state 94
    block                          shift and go to state 95
    vardec                         shift and go to state 96
    idlist                         shift and go to state 8
    lvalue                         shift and go to state 100
    const                          shift and go to state 34
    iddec                          shift and go to state 11

state 165

    (42) cstmt -> IF LRB exp RRB . cstmt elseiflist ELSE cstmt
    (36) ostmt -> IF LRB exp RRB . cstmt elseiflist ELSE ostmt
    (37) ostmt -> IF LRB exp RRB . cstmt
    (38) ostmt -> IF LRB exp RRB . ostmt
    (39) cstmt -> . WHILE LRB exp RRB cstmt
    (40) cstmt -> . FOR LRB ID IN ID RRB cstmt
    (41) cstmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt
    (42) cstmt -> . IF LRB exp RRB cstmt elseiflist ELSE cstmt
    (43) cstmt -> . simple
    (33) ostmt -> . WHILE LRB exp RRB ostmt
    (34) ostmt -> . FOR LRB ID IN ID RRB ostmt
    (35) ostmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt
    (36) ostmt -> . IF LRB exp RRB cstmt elseiflist ELSE ostmt
    (37) ostmt -> . IF LRB exp RRB cstmt
    (38) ostmt -> . IF LRB exp RRB ostmt
    (46) simple -> . block
    (47) simple -> . vardec
    (48) simple -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (49) simple -> . RETURN exp SEMICOLON
    (50) simple -> . exp SEMICOLON
    (51) simple -> . PRINT LRB ID RRB SEMICOLON
    (22) block -> . LCB stmtlist RCB
    (6) vardec -> . idlist COLON type SEMICOLON
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (14) idlist -> . idlist COMMA iddec
    (15) idlist -> . iddec
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE
    (12) iddec -> . lvalue ASSIGN exp
    (13) iddec -> . lvalue

    WHILE           shift and go to state 139
    FOR             shift and go to state 140
    IF              shift and go to state 136
    ON              shift and go to state 97
    RETURN          shift and go to state 98
    PRINT           shift and go to state 99
    LCB             shift and go to state 42
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 91
    cstmt                          shift and go to state 176
    ostmt                          shift and go to state 138
    simple                         shift and go to state 94
    block                          shift and go to state 95
    vardec                         shift and go to state 96
    idlist                         shift and go to state 8
    lvalue                         shift and go to state 100
    const                          shift and go to state 34
    iddec                          shift and go to state 11

state 166

    (42) cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt .

    RCB             reduce using rule 42 (cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt .)
    WHILE           reduce using rule 42 (cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt .)
    FOR             reduce using rule 42 (cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt .)
    IF              reduce using rule 42 (cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt .)
    ON              reduce using rule 42 (cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt .)
    RETURN          reduce using rule 42 (cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt .)
    PRINT           reduce using rule 42 (cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt .)
    LCB             reduce using rule 42 (cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt .)
    SUB             reduce using rule 42 (cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt .)
    NOT             reduce using rule 42 (cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt .)
    LRB             reduce using rule 42 (cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt .)
    ID              reduce using rule 42 (cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt .)
    INTEGERNUMBER   reduce using rule 42 (cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt .)
    FLOATNUMBER     reduce using rule 42 (cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt .)
    TRUE            reduce using rule 42 (cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt .)
    FALSE           reduce using rule 42 (cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt .)
    ELSE            reduce using rule 42 (cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt .)
    ELSEIF          reduce using rule 42 (cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt .)
    WHERE           reduce using rule 42 (cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt .)


state 167

    (36) ostmt -> IF LRB exp RRB cstmt elseiflist ELSE ostmt .

    RCB             reduce using rule 36 (ostmt -> IF LRB exp RRB cstmt elseiflist ELSE ostmt .)
    WHILE           reduce using rule 36 (ostmt -> IF LRB exp RRB cstmt elseiflist ELSE ostmt .)
    FOR             reduce using rule 36 (ostmt -> IF LRB exp RRB cstmt elseiflist ELSE ostmt .)
    IF              reduce using rule 36 (ostmt -> IF LRB exp RRB cstmt elseiflist ELSE ostmt .)
    ON              reduce using rule 36 (ostmt -> IF LRB exp RRB cstmt elseiflist ELSE ostmt .)
    RETURN          reduce using rule 36 (ostmt -> IF LRB exp RRB cstmt elseiflist ELSE ostmt .)
    PRINT           reduce using rule 36 (ostmt -> IF LRB exp RRB cstmt elseiflist ELSE ostmt .)
    LCB             reduce using rule 36 (ostmt -> IF LRB exp RRB cstmt elseiflist ELSE ostmt .)
    SUB             reduce using rule 36 (ostmt -> IF LRB exp RRB cstmt elseiflist ELSE ostmt .)
    NOT             reduce using rule 36 (ostmt -> IF LRB exp RRB cstmt elseiflist ELSE ostmt .)
    LRB             reduce using rule 36 (ostmt -> IF LRB exp RRB cstmt elseiflist ELSE ostmt .)
    ID              reduce using rule 36 (ostmt -> IF LRB exp RRB cstmt elseiflist ELSE ostmt .)
    INTEGERNUMBER   reduce using rule 36 (ostmt -> IF LRB exp RRB cstmt elseiflist ELSE ostmt .)
    FLOATNUMBER     reduce using rule 36 (ostmt -> IF LRB exp RRB cstmt elseiflist ELSE ostmt .)
    TRUE            reduce using rule 36 (ostmt -> IF LRB exp RRB cstmt elseiflist ELSE ostmt .)
    FALSE           reduce using rule 36 (ostmt -> IF LRB exp RRB cstmt elseiflist ELSE ostmt .)
    WHERE           reduce using rule 36 (ostmt -> IF LRB exp RRB cstmt elseiflist ELSE ostmt .)


state 168

    (44) elseiflist -> elseiflist ELSEIF LRB . exp RRB cstmt
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE

    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 177
    lvalue                         shift and go to state 31
    const                          shift and go to state 34

state 169

    (39) cstmt -> WHILE LRB exp RRB . cstmt
    (33) ostmt -> WHILE LRB exp RRB . ostmt
    (39) cstmt -> . WHILE LRB exp RRB cstmt
    (40) cstmt -> . FOR LRB ID IN ID RRB cstmt
    (41) cstmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt
    (42) cstmt -> . IF LRB exp RRB cstmt elseiflist ELSE cstmt
    (43) cstmt -> . simple
    (33) ostmt -> . WHILE LRB exp RRB ostmt
    (34) ostmt -> . FOR LRB ID IN ID RRB ostmt
    (35) ostmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt
    (36) ostmt -> . IF LRB exp RRB cstmt elseiflist ELSE ostmt
    (37) ostmt -> . IF LRB exp RRB cstmt
    (38) ostmt -> . IF LRB exp RRB ostmt
    (46) simple -> . block
    (47) simple -> . vardec
    (48) simple -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (49) simple -> . RETURN exp SEMICOLON
    (50) simple -> . exp SEMICOLON
    (51) simple -> . PRINT LRB ID RRB SEMICOLON
    (22) block -> . LCB stmtlist RCB
    (6) vardec -> . idlist COLON type SEMICOLON
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (14) idlist -> . idlist COMMA iddec
    (15) idlist -> . iddec
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE
    (12) iddec -> . lvalue ASSIGN exp
    (13) iddec -> . lvalue

    WHILE           shift and go to state 139
    FOR             shift and go to state 140
    IF              shift and go to state 136
    ON              shift and go to state 97
    RETURN          shift and go to state 98
    PRINT           shift and go to state 99
    LCB             shift and go to state 42
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 91
    cstmt                          shift and go to state 133
    ostmt                          shift and go to state 132
    simple                         shift and go to state 94
    block                          shift and go to state 95
    vardec                         shift and go to state 96
    idlist                         shift and go to state 8
    lvalue                         shift and go to state 100
    const                          shift and go to state 34
    iddec                          shift and go to state 11

state 170

    (40) cstmt -> FOR LRB ID IN . ID RRB cstmt
    (34) ostmt -> FOR LRB ID IN . ID RRB ostmt

    ID              shift and go to state 178


state 171

    (41) cstmt -> FOR LRB exp SEMICOLON . exp SEMICOLON exp RRB cstmt
    (35) ostmt -> FOR LRB exp SEMICOLON . exp SEMICOLON exp RRB ostmt
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE

    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 179
    lvalue                         shift and go to state 31
    const                          shift and go to state 34

state 172

    (48) simple -> ON LRB exp RRB LCB cases RCB SEMICOLON .

    RCB             reduce using rule 48 (simple -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    WHILE           reduce using rule 48 (simple -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    FOR             reduce using rule 48 (simple -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    IF              reduce using rule 48 (simple -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ON              reduce using rule 48 (simple -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    RETURN          reduce using rule 48 (simple -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    PRINT           reduce using rule 48 (simple -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    LCB             reduce using rule 48 (simple -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    SUB             reduce using rule 48 (simple -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    NOT             reduce using rule 48 (simple -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    LRB             reduce using rule 48 (simple -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ID              reduce using rule 48 (simple -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    INTEGERNUMBER   reduce using rule 48 (simple -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    FLOATNUMBER     reduce using rule 48 (simple -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    TRUE            reduce using rule 48 (simple -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    FALSE           reduce using rule 48 (simple -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ELSE            reduce using rule 48 (simple -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ELSEIF          reduce using rule 48 (simple -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    WHERE           reduce using rule 48 (simple -> ON LRB exp RRB LCB cases RCB SEMICOLON .)


state 173

    (28) case -> WHERE const . COLON stmtlist

    COLON           shift and go to state 180


state 174

    (35) ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt .

    RCB             reduce using rule 35 (ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt .)
    WHILE           reduce using rule 35 (ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt .)
    FOR             reduce using rule 35 (ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt .)
    IF              reduce using rule 35 (ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt .)
    ON              reduce using rule 35 (ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt .)
    RETURN          reduce using rule 35 (ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt .)
    PRINT           reduce using rule 35 (ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt .)
    LCB             reduce using rule 35 (ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt .)
    SUB             reduce using rule 35 (ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt .)
    NOT             reduce using rule 35 (ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt .)
    LRB             reduce using rule 35 (ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt .)
    ID              reduce using rule 35 (ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt .)
    INTEGERNUMBER   reduce using rule 35 (ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt .)
    FLOATNUMBER     reduce using rule 35 (ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt .)
    TRUE            reduce using rule 35 (ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt .)
    FALSE           reduce using rule 35 (ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt .)
    WHERE           reduce using rule 35 (ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt .)


state 175

    (41) cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt .

    RCB             reduce using rule 41 (cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt .)
    WHILE           reduce using rule 41 (cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt .)
    FOR             reduce using rule 41 (cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt .)
    IF              reduce using rule 41 (cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt .)
    ON              reduce using rule 41 (cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt .)
    RETURN          reduce using rule 41 (cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt .)
    PRINT           reduce using rule 41 (cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt .)
    LCB             reduce using rule 41 (cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt .)
    SUB             reduce using rule 41 (cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt .)
    NOT             reduce using rule 41 (cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt .)
    LRB             reduce using rule 41 (cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt .)
    ID              reduce using rule 41 (cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt .)
    INTEGERNUMBER   reduce using rule 41 (cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt .)
    FLOATNUMBER     reduce using rule 41 (cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt .)
    TRUE            reduce using rule 41 (cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt .)
    FALSE           reduce using rule 41 (cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt .)
    ELSE            reduce using rule 41 (cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt .)
    ELSEIF          reduce using rule 41 (cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt .)
    WHERE           reduce using rule 41 (cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt .)


state 176

    (42) cstmt -> IF LRB exp RRB cstmt . elseiflist ELSE cstmt
    (36) ostmt -> IF LRB exp RRB cstmt . elseiflist ELSE ostmt
    (37) ostmt -> IF LRB exp RRB cstmt .
    (44) elseiflist -> . elseiflist ELSEIF LRB exp RRB cstmt
    (45) elseiflist -> . eps
    (82) eps -> .

    RCB             reduce using rule 37 (ostmt -> IF LRB exp RRB cstmt .)
    WHILE           reduce using rule 37 (ostmt -> IF LRB exp RRB cstmt .)
    FOR             reduce using rule 37 (ostmt -> IF LRB exp RRB cstmt .)
    IF              reduce using rule 37 (ostmt -> IF LRB exp RRB cstmt .)
    ON              reduce using rule 37 (ostmt -> IF LRB exp RRB cstmt .)
    RETURN          reduce using rule 37 (ostmt -> IF LRB exp RRB cstmt .)
    PRINT           reduce using rule 37 (ostmt -> IF LRB exp RRB cstmt .)
    LCB             reduce using rule 37 (ostmt -> IF LRB exp RRB cstmt .)
    SUB             reduce using rule 37 (ostmt -> IF LRB exp RRB cstmt .)
    NOT             reduce using rule 37 (ostmt -> IF LRB exp RRB cstmt .)
    LRB             reduce using rule 37 (ostmt -> IF LRB exp RRB cstmt .)
    ID              reduce using rule 37 (ostmt -> IF LRB exp RRB cstmt .)
    INTEGERNUMBER   reduce using rule 37 (ostmt -> IF LRB exp RRB cstmt .)
    FLOATNUMBER     reduce using rule 37 (ostmt -> IF LRB exp RRB cstmt .)
    TRUE            reduce using rule 37 (ostmt -> IF LRB exp RRB cstmt .)
    FALSE           reduce using rule 37 (ostmt -> IF LRB exp RRB cstmt .)
    WHERE           reduce using rule 37 (ostmt -> IF LRB exp RRB cstmt .)
    ELSE            reduce using rule 82 (eps -> .)
    ELSEIF          reduce using rule 82 (eps -> .)

    elseiflist                     shift and go to state 181
    eps                            shift and go to state 147

state 177

    (44) elseiflist -> elseiflist ELSEIF LRB exp . RRB cstmt
    (58) exp -> exp . relop exp
    (65) exp -> exp . operator1 exp
    (66) exp -> exp . operator2 exp
    (67) exp -> exp . operator3 exp
    (52) relop -> . GT
    (53) relop -> . GE
    (54) relop -> . LT
    (55) relop -> . LE
    (56) relop -> . EQ
    (57) relop -> . NE
    (68) operator1 -> . MUL
    (69) operator1 -> . DIV
    (70) operator1 -> . MOD
    (71) operator2 -> . SUM
    (72) operator2 -> . SUB
    (73) operator3 -> . AND
    (74) operator3 -> . OR

    RRB             shift and go to state 182
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61
    MUL             shift and go to state 62
    DIV             shift and go to state 63
    MOD             shift and go to state 64
    SUM             shift and go to state 65
    SUB             shift and go to state 66
    AND             shift and go to state 67
    OR              shift and go to state 68

    relop                          shift and go to state 52
    operator1                      shift and go to state 53
    operator2                      shift and go to state 54
    operator3                      shift and go to state 55

state 178

    (40) cstmt -> FOR LRB ID IN ID . RRB cstmt
    (34) ostmt -> FOR LRB ID IN ID . RRB ostmt

    RRB             shift and go to state 183


state 179

    (41) cstmt -> FOR LRB exp SEMICOLON exp . SEMICOLON exp RRB cstmt
    (35) ostmt -> FOR LRB exp SEMICOLON exp . SEMICOLON exp RRB ostmt
    (58) exp -> exp . relop exp
    (65) exp -> exp . operator1 exp
    (66) exp -> exp . operator2 exp
    (67) exp -> exp . operator3 exp
    (52) relop -> . GT
    (53) relop -> . GE
    (54) relop -> . LT
    (55) relop -> . LE
    (56) relop -> . EQ
    (57) relop -> . NE
    (68) operator1 -> . MUL
    (69) operator1 -> . DIV
    (70) operator1 -> . MOD
    (71) operator2 -> . SUM
    (72) operator2 -> . SUB
    (73) operator3 -> . AND
    (74) operator3 -> . OR

    SEMICOLON       shift and go to state 184
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61
    MUL             shift and go to state 62
    DIV             shift and go to state 63
    MOD             shift and go to state 64
    SUM             shift and go to state 65
    SUB             shift and go to state 66
    AND             shift and go to state 67
    OR              shift and go to state 68

    relop                          shift and go to state 52
    operator1                      shift and go to state 53
    operator2                      shift and go to state 54
    operator3                      shift and go to state 55

state 180

    (28) case -> WHERE const COLON . stmtlist
    (23) stmtlist -> . stmtlist stmt
    (24) stmtlist -> . eps
    (82) eps -> .

    WHILE           reduce using rule 82 (eps -> .)
    FOR             reduce using rule 82 (eps -> .)
    IF              reduce using rule 82 (eps -> .)
    ON              reduce using rule 82 (eps -> .)
    RETURN          reduce using rule 82 (eps -> .)
    PRINT           reduce using rule 82 (eps -> .)
    LCB             reduce using rule 82 (eps -> .)
    SUB             reduce using rule 82 (eps -> .)
    NOT             reduce using rule 82 (eps -> .)
    LRB             reduce using rule 82 (eps -> .)
    ID              reduce using rule 82 (eps -> .)
    INTEGERNUMBER   reduce using rule 82 (eps -> .)
    FLOATNUMBER     reduce using rule 82 (eps -> .)
    TRUE            reduce using rule 82 (eps -> .)
    FALSE           reduce using rule 82 (eps -> .)
    RCB             reduce using rule 82 (eps -> .)
    WHERE           reduce using rule 82 (eps -> .)

    stmtlist                       shift and go to state 185
    eps                            shift and go to state 74

state 181

    (42) cstmt -> IF LRB exp RRB cstmt elseiflist . ELSE cstmt
    (36) ostmt -> IF LRB exp RRB cstmt elseiflist . ELSE ostmt
    (44) elseiflist -> elseiflist . ELSEIF LRB exp RRB cstmt

    ELSE            shift and go to state 186
    ELSEIF          shift and go to state 157


state 182

    (44) elseiflist -> elseiflist ELSEIF LRB exp RRB . cstmt
    (39) cstmt -> . WHILE LRB exp RRB cstmt
    (40) cstmt -> . FOR LRB ID IN ID RRB cstmt
    (41) cstmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt
    (42) cstmt -> . IF LRB exp RRB cstmt elseiflist ELSE cstmt
    (43) cstmt -> . simple
    (46) simple -> . block
    (47) simple -> . vardec
    (48) simple -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (49) simple -> . RETURN exp SEMICOLON
    (50) simple -> . exp SEMICOLON
    (51) simple -> . PRINT LRB ID RRB SEMICOLON
    (22) block -> . LCB stmtlist RCB
    (6) vardec -> . idlist COLON type SEMICOLON
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (14) idlist -> . idlist COMMA iddec
    (15) idlist -> . iddec
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE
    (12) iddec -> . lvalue ASSIGN exp
    (13) iddec -> . lvalue

    WHILE           shift and go to state 188
    FOR             shift and go to state 189
    IF              shift and go to state 190
    ON              shift and go to state 97
    RETURN          shift and go to state 98
    PRINT           shift and go to state 99
    LCB             shift and go to state 42
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 91
    cstmt                          shift and go to state 187
    simple                         shift and go to state 94
    block                          shift and go to state 95
    vardec                         shift and go to state 96
    idlist                         shift and go to state 8
    lvalue                         shift and go to state 100
    const                          shift and go to state 34
    iddec                          shift and go to state 11

state 183

    (40) cstmt -> FOR LRB ID IN ID RRB . cstmt
    (34) ostmt -> FOR LRB ID IN ID RRB . ostmt
    (39) cstmt -> . WHILE LRB exp RRB cstmt
    (40) cstmt -> . FOR LRB ID IN ID RRB cstmt
    (41) cstmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt
    (42) cstmt -> . IF LRB exp RRB cstmt elseiflist ELSE cstmt
    (43) cstmt -> . simple
    (33) ostmt -> . WHILE LRB exp RRB ostmt
    (34) ostmt -> . FOR LRB ID IN ID RRB ostmt
    (35) ostmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt
    (36) ostmt -> . IF LRB exp RRB cstmt elseiflist ELSE ostmt
    (37) ostmt -> . IF LRB exp RRB cstmt
    (38) ostmt -> . IF LRB exp RRB ostmt
    (46) simple -> . block
    (47) simple -> . vardec
    (48) simple -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (49) simple -> . RETURN exp SEMICOLON
    (50) simple -> . exp SEMICOLON
    (51) simple -> . PRINT LRB ID RRB SEMICOLON
    (22) block -> . LCB stmtlist RCB
    (6) vardec -> . idlist COLON type SEMICOLON
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (14) idlist -> . idlist COMMA iddec
    (15) idlist -> . iddec
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE
    (12) iddec -> . lvalue ASSIGN exp
    (13) iddec -> . lvalue

    WHILE           shift and go to state 139
    FOR             shift and go to state 140
    IF              shift and go to state 136
    ON              shift and go to state 97
    RETURN          shift and go to state 98
    PRINT           shift and go to state 99
    LCB             shift and go to state 42
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    cstmt                          shift and go to state 153
    ostmt                          shift and go to state 152
    exp                            shift and go to state 91
    simple                         shift and go to state 94
    block                          shift and go to state 95
    vardec                         shift and go to state 96
    idlist                         shift and go to state 8
    lvalue                         shift and go to state 100
    const                          shift and go to state 34
    iddec                          shift and go to state 11

state 184

    (41) cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON . exp RRB cstmt
    (35) ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON . exp RRB ostmt
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE

    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 191
    lvalue                         shift and go to state 31
    const                          shift and go to state 34

state 185

    (28) case -> WHERE const COLON stmtlist .
    (23) stmtlist -> stmtlist . stmt
    (31) stmt -> . ostmt
    (32) stmt -> . cstmt
    (33) ostmt -> . WHILE LRB exp RRB ostmt
    (34) ostmt -> . FOR LRB ID IN ID RRB ostmt
    (35) ostmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt
    (36) ostmt -> . IF LRB exp RRB cstmt elseiflist ELSE ostmt
    (37) ostmt -> . IF LRB exp RRB cstmt
    (38) ostmt -> . IF LRB exp RRB ostmt
    (39) cstmt -> . WHILE LRB exp RRB cstmt
    (40) cstmt -> . FOR LRB ID IN ID RRB cstmt
    (41) cstmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt
    (42) cstmt -> . IF LRB exp RRB cstmt elseiflist ELSE cstmt
    (43) cstmt -> . simple
    (46) simple -> . block
    (47) simple -> . vardec
    (48) simple -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (49) simple -> . RETURN exp SEMICOLON
    (50) simple -> . exp SEMICOLON
    (51) simple -> . PRINT LRB ID RRB SEMICOLON
    (22) block -> . LCB stmtlist RCB
    (6) vardec -> . idlist COLON type SEMICOLON
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (14) idlist -> . idlist COMMA iddec
    (15) idlist -> . iddec
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE
    (12) iddec -> . lvalue ASSIGN exp
    (13) iddec -> . lvalue

    RCB             reduce using rule 28 (case -> WHERE const COLON stmtlist .)
    WHERE           reduce using rule 28 (case -> WHERE const COLON stmtlist .)
    WHILE           shift and go to state 90
    FOR             shift and go to state 92
    IF              shift and go to state 93
    ON              shift and go to state 97
    RETURN          shift and go to state 98
    PRINT           shift and go to state 99
    LCB             shift and go to state 42
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    const                          shift and go to state 34
    stmt                           shift and go to state 87
    ostmt                          shift and go to state 88
    cstmt                          shift and go to state 89
    exp                            shift and go to state 91
    simple                         shift and go to state 94
    block                          shift and go to state 95
    vardec                         shift and go to state 96
    idlist                         shift and go to state 8
    lvalue                         shift and go to state 100
    iddec                          shift and go to state 11

state 186

    (42) cstmt -> IF LRB exp RRB cstmt elseiflist ELSE . cstmt
    (36) ostmt -> IF LRB exp RRB cstmt elseiflist ELSE . ostmt
    (39) cstmt -> . WHILE LRB exp RRB cstmt
    (40) cstmt -> . FOR LRB ID IN ID RRB cstmt
    (41) cstmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt
    (42) cstmt -> . IF LRB exp RRB cstmt elseiflist ELSE cstmt
    (43) cstmt -> . simple
    (33) ostmt -> . WHILE LRB exp RRB ostmt
    (34) ostmt -> . FOR LRB ID IN ID RRB ostmt
    (35) ostmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt
    (36) ostmt -> . IF LRB exp RRB cstmt elseiflist ELSE ostmt
    (37) ostmt -> . IF LRB exp RRB cstmt
    (38) ostmt -> . IF LRB exp RRB ostmt
    (46) simple -> . block
    (47) simple -> . vardec
    (48) simple -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (49) simple -> . RETURN exp SEMICOLON
    (50) simple -> . exp SEMICOLON
    (51) simple -> . PRINT LRB ID RRB SEMICOLON
    (22) block -> . LCB stmtlist RCB
    (6) vardec -> . idlist COLON type SEMICOLON
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (14) idlist -> . idlist COMMA iddec
    (15) idlist -> . iddec
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE
    (12) iddec -> . lvalue ASSIGN exp
    (13) iddec -> . lvalue

    WHILE           shift and go to state 139
    FOR             shift and go to state 140
    IF              shift and go to state 136
    ON              shift and go to state 97
    RETURN          shift and go to state 98
    PRINT           shift and go to state 99
    LCB             shift and go to state 42
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 91
    cstmt                          shift and go to state 166
    ostmt                          shift and go to state 167
    simple                         shift and go to state 94
    block                          shift and go to state 95
    vardec                         shift and go to state 96
    idlist                         shift and go to state 8
    lvalue                         shift and go to state 100
    const                          shift and go to state 34
    iddec                          shift and go to state 11

state 187

    (44) elseiflist -> elseiflist ELSEIF LRB exp RRB cstmt .

    ELSE            reduce using rule 44 (elseiflist -> elseiflist ELSEIF LRB exp RRB cstmt .)
    ELSEIF          reduce using rule 44 (elseiflist -> elseiflist ELSEIF LRB exp RRB cstmt .)


state 188

    (39) cstmt -> WHILE . LRB exp RRB cstmt

    LRB             shift and go to state 192


state 189

    (40) cstmt -> FOR . LRB ID IN ID RRB cstmt
    (41) cstmt -> FOR . LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt

    LRB             shift and go to state 193


state 190

    (42) cstmt -> IF . LRB exp RRB cstmt elseiflist ELSE cstmt

    LRB             shift and go to state 194


state 191

    (41) cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp . RRB cstmt
    (35) ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp . RRB ostmt
    (58) exp -> exp . relop exp
    (65) exp -> exp . operator1 exp
    (66) exp -> exp . operator2 exp
    (67) exp -> exp . operator3 exp
    (52) relop -> . GT
    (53) relop -> . GE
    (54) relop -> . LT
    (55) relop -> . LE
    (56) relop -> . EQ
    (57) relop -> . NE
    (68) operator1 -> . MUL
    (69) operator1 -> . DIV
    (70) operator1 -> . MOD
    (71) operator2 -> . SUM
    (72) operator2 -> . SUB
    (73) operator3 -> . AND
    (74) operator3 -> . OR

    RRB             shift and go to state 195
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61
    MUL             shift and go to state 62
    DIV             shift and go to state 63
    MOD             shift and go to state 64
    SUM             shift and go to state 65
    SUB             shift and go to state 66
    AND             shift and go to state 67
    OR              shift and go to state 68

    relop                          shift and go to state 52
    operator1                      shift and go to state 53
    operator2                      shift and go to state 54
    operator3                      shift and go to state 55

state 192

    (39) cstmt -> WHILE LRB . exp RRB cstmt
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE

    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 196
    lvalue                         shift and go to state 31
    const                          shift and go to state 34

state 193

    (40) cstmt -> FOR LRB . ID IN ID RRB cstmt
    (41) cstmt -> FOR LRB . exp SEMICOLON exp SEMICOLON exp RRB cstmt
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE

    ID              shift and go to state 197
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 198
    lvalue                         shift and go to state 31
    const                          shift and go to state 34

state 194

    (42) cstmt -> IF LRB . exp RRB cstmt elseiflist ELSE cstmt
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE

    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 199
    lvalue                         shift and go to state 31
    const                          shift and go to state 34

state 195

    (41) cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB . cstmt
    (35) ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB . ostmt
    (39) cstmt -> . WHILE LRB exp RRB cstmt
    (40) cstmt -> . FOR LRB ID IN ID RRB cstmt
    (41) cstmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt
    (42) cstmt -> . IF LRB exp RRB cstmt elseiflist ELSE cstmt
    (43) cstmt -> . simple
    (33) ostmt -> . WHILE LRB exp RRB ostmt
    (34) ostmt -> . FOR LRB ID IN ID RRB ostmt
    (35) ostmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt
    (36) ostmt -> . IF LRB exp RRB cstmt elseiflist ELSE ostmt
    (37) ostmt -> . IF LRB exp RRB cstmt
    (38) ostmt -> . IF LRB exp RRB ostmt
    (46) simple -> . block
    (47) simple -> . vardec
    (48) simple -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (49) simple -> . RETURN exp SEMICOLON
    (50) simple -> . exp SEMICOLON
    (51) simple -> . PRINT LRB ID RRB SEMICOLON
    (22) block -> . LCB stmtlist RCB
    (6) vardec -> . idlist COLON type SEMICOLON
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (14) idlist -> . idlist COMMA iddec
    (15) idlist -> . iddec
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE
    (12) iddec -> . lvalue ASSIGN exp
    (13) iddec -> . lvalue

    WHILE           shift and go to state 139
    FOR             shift and go to state 140
    IF              shift and go to state 136
    ON              shift and go to state 97
    RETURN          shift and go to state 98
    PRINT           shift and go to state 99
    LCB             shift and go to state 42
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 91
    cstmt                          shift and go to state 175
    ostmt                          shift and go to state 174
    simple                         shift and go to state 94
    block                          shift and go to state 95
    vardec                         shift and go to state 96
    idlist                         shift and go to state 8
    lvalue                         shift and go to state 100
    const                          shift and go to state 34
    iddec                          shift and go to state 11

state 196

    (39) cstmt -> WHILE LRB exp . RRB cstmt
    (58) exp -> exp . relop exp
    (65) exp -> exp . operator1 exp
    (66) exp -> exp . operator2 exp
    (67) exp -> exp . operator3 exp
    (52) relop -> . GT
    (53) relop -> . GE
    (54) relop -> . LT
    (55) relop -> . LE
    (56) relop -> . EQ
    (57) relop -> . NE
    (68) operator1 -> . MUL
    (69) operator1 -> . DIV
    (70) operator1 -> . MOD
    (71) operator2 -> . SUM
    (72) operator2 -> . SUB
    (73) operator3 -> . AND
    (74) operator3 -> . OR

    RRB             shift and go to state 200
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61
    MUL             shift and go to state 62
    DIV             shift and go to state 63
    MOD             shift and go to state 64
    SUM             shift and go to state 65
    SUB             shift and go to state 66
    AND             shift and go to state 67
    OR              shift and go to state 68

    relop                          shift and go to state 52
    operator1                      shift and go to state 53
    operator2                      shift and go to state 54
    operator3                      shift and go to state 55

state 197

    (40) cstmt -> FOR LRB ID . IN ID RRB cstmt
    (25) lvalue -> ID . LRB explist RRB
    (26) lvalue -> ID .
    (27) lvalue -> ID . LSB exp RSB

    IN              shift and go to state 201
    LRB             shift and go to state 17
    ASSIGN          reduce using rule 26 (lvalue -> ID .)
    SEMICOLON       reduce using rule 26 (lvalue -> ID .)
    GT              reduce using rule 26 (lvalue -> ID .)
    GE              reduce using rule 26 (lvalue -> ID .)
    LT              reduce using rule 26 (lvalue -> ID .)
    LE              reduce using rule 26 (lvalue -> ID .)
    EQ              reduce using rule 26 (lvalue -> ID .)
    NE              reduce using rule 26 (lvalue -> ID .)
    MUL             reduce using rule 26 (lvalue -> ID .)
    DIV             reduce using rule 26 (lvalue -> ID .)
    MOD             reduce using rule 26 (lvalue -> ID .)
    SUM             reduce using rule 26 (lvalue -> ID .)
    SUB             reduce using rule 26 (lvalue -> ID .)
    AND             reduce using rule 26 (lvalue -> ID .)
    OR              reduce using rule 26 (lvalue -> ID .)
    LSB             shift and go to state 18


state 198

    (41) cstmt -> FOR LRB exp . SEMICOLON exp SEMICOLON exp RRB cstmt
    (58) exp -> exp . relop exp
    (65) exp -> exp . operator1 exp
    (66) exp -> exp . operator2 exp
    (67) exp -> exp . operator3 exp
    (52) relop -> . GT
    (53) relop -> . GE
    (54) relop -> . LT
    (55) relop -> . LE
    (56) relop -> . EQ
    (57) relop -> . NE
    (68) operator1 -> . MUL
    (69) operator1 -> . DIV
    (70) operator1 -> . MOD
    (71) operator2 -> . SUM
    (72) operator2 -> . SUB
    (73) operator3 -> . AND
    (74) operator3 -> . OR

    SEMICOLON       shift and go to state 202
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61
    MUL             shift and go to state 62
    DIV             shift and go to state 63
    MOD             shift and go to state 64
    SUM             shift and go to state 65
    SUB             shift and go to state 66
    AND             shift and go to state 67
    OR              shift and go to state 68

    relop                          shift and go to state 52
    operator1                      shift and go to state 53
    operator2                      shift and go to state 54
    operator3                      shift and go to state 55

state 199

    (42) cstmt -> IF LRB exp . RRB cstmt elseiflist ELSE cstmt
    (58) exp -> exp . relop exp
    (65) exp -> exp . operator1 exp
    (66) exp -> exp . operator2 exp
    (67) exp -> exp . operator3 exp
    (52) relop -> . GT
    (53) relop -> . GE
    (54) relop -> . LT
    (55) relop -> . LE
    (56) relop -> . EQ
    (57) relop -> . NE
    (68) operator1 -> . MUL
    (69) operator1 -> . DIV
    (70) operator1 -> . MOD
    (71) operator2 -> . SUM
    (72) operator2 -> . SUB
    (73) operator3 -> . AND
    (74) operator3 -> . OR

    RRB             shift and go to state 203
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61
    MUL             shift and go to state 62
    DIV             shift and go to state 63
    MOD             shift and go to state 64
    SUM             shift and go to state 65
    SUB             shift and go to state 66
    AND             shift and go to state 67
    OR              shift and go to state 68

    relop                          shift and go to state 52
    operator1                      shift and go to state 53
    operator2                      shift and go to state 54
    operator3                      shift and go to state 55

state 200

    (39) cstmt -> WHILE LRB exp RRB . cstmt
    (39) cstmt -> . WHILE LRB exp RRB cstmt
    (40) cstmt -> . FOR LRB ID IN ID RRB cstmt
    (41) cstmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt
    (42) cstmt -> . IF LRB exp RRB cstmt elseiflist ELSE cstmt
    (43) cstmt -> . simple
    (46) simple -> . block
    (47) simple -> . vardec
    (48) simple -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (49) simple -> . RETURN exp SEMICOLON
    (50) simple -> . exp SEMICOLON
    (51) simple -> . PRINT LRB ID RRB SEMICOLON
    (22) block -> . LCB stmtlist RCB
    (6) vardec -> . idlist COLON type SEMICOLON
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (14) idlist -> . idlist COMMA iddec
    (15) idlist -> . iddec
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE
    (12) iddec -> . lvalue ASSIGN exp
    (13) iddec -> . lvalue

    WHILE           shift and go to state 188
    FOR             shift and go to state 189
    IF              shift and go to state 190
    ON              shift and go to state 97
    RETURN          shift and go to state 98
    PRINT           shift and go to state 99
    LCB             shift and go to state 42
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 91
    cstmt                          shift and go to state 133
    simple                         shift and go to state 94
    block                          shift and go to state 95
    vardec                         shift and go to state 96
    idlist                         shift and go to state 8
    lvalue                         shift and go to state 100
    const                          shift and go to state 34
    iddec                          shift and go to state 11

state 201

    (40) cstmt -> FOR LRB ID IN . ID RRB cstmt

    ID              shift and go to state 204


state 202

    (41) cstmt -> FOR LRB exp SEMICOLON . exp SEMICOLON exp RRB cstmt
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE

    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 205
    lvalue                         shift and go to state 31
    const                          shift and go to state 34

state 203

    (42) cstmt -> IF LRB exp RRB . cstmt elseiflist ELSE cstmt
    (39) cstmt -> . WHILE LRB exp RRB cstmt
    (40) cstmt -> . FOR LRB ID IN ID RRB cstmt
    (41) cstmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt
    (42) cstmt -> . IF LRB exp RRB cstmt elseiflist ELSE cstmt
    (43) cstmt -> . simple
    (46) simple -> . block
    (47) simple -> . vardec
    (48) simple -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (49) simple -> . RETURN exp SEMICOLON
    (50) simple -> . exp SEMICOLON
    (51) simple -> . PRINT LRB ID RRB SEMICOLON
    (22) block -> . LCB stmtlist RCB
    (6) vardec -> . idlist COLON type SEMICOLON
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (14) idlist -> . idlist COMMA iddec
    (15) idlist -> . iddec
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE
    (12) iddec -> . lvalue ASSIGN exp
    (13) iddec -> . lvalue

    WHILE           shift and go to state 188
    FOR             shift and go to state 189
    IF              shift and go to state 190
    ON              shift and go to state 97
    RETURN          shift and go to state 98
    PRINT           shift and go to state 99
    LCB             shift and go to state 42
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 91
    cstmt                          shift and go to state 206
    simple                         shift and go to state 94
    block                          shift and go to state 95
    vardec                         shift and go to state 96
    idlist                         shift and go to state 8
    lvalue                         shift and go to state 100
    const                          shift and go to state 34
    iddec                          shift and go to state 11

state 204

    (40) cstmt -> FOR LRB ID IN ID . RRB cstmt

    RRB             shift and go to state 207


state 205

    (41) cstmt -> FOR LRB exp SEMICOLON exp . SEMICOLON exp RRB cstmt
    (58) exp -> exp . relop exp
    (65) exp -> exp . operator1 exp
    (66) exp -> exp . operator2 exp
    (67) exp -> exp . operator3 exp
    (52) relop -> . GT
    (53) relop -> . GE
    (54) relop -> . LT
    (55) relop -> . LE
    (56) relop -> . EQ
    (57) relop -> . NE
    (68) operator1 -> . MUL
    (69) operator1 -> . DIV
    (70) operator1 -> . MOD
    (71) operator2 -> . SUM
    (72) operator2 -> . SUB
    (73) operator3 -> . AND
    (74) operator3 -> . OR

    SEMICOLON       shift and go to state 208
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61
    MUL             shift and go to state 62
    DIV             shift and go to state 63
    MOD             shift and go to state 64
    SUM             shift and go to state 65
    SUB             shift and go to state 66
    AND             shift and go to state 67
    OR              shift and go to state 68

    relop                          shift and go to state 52
    operator1                      shift and go to state 53
    operator2                      shift and go to state 54
    operator3                      shift and go to state 55

state 206

    (42) cstmt -> IF LRB exp RRB cstmt . elseiflist ELSE cstmt
    (44) elseiflist -> . elseiflist ELSEIF LRB exp RRB cstmt
    (45) elseiflist -> . eps
    (82) eps -> .

    ELSE            reduce using rule 82 (eps -> .)
    ELSEIF          reduce using rule 82 (eps -> .)

    elseiflist                     shift and go to state 209
    eps                            shift and go to state 147

state 207

    (40) cstmt -> FOR LRB ID IN ID RRB . cstmt
    (39) cstmt -> . WHILE LRB exp RRB cstmt
    (40) cstmt -> . FOR LRB ID IN ID RRB cstmt
    (41) cstmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt
    (42) cstmt -> . IF LRB exp RRB cstmt elseiflist ELSE cstmt
    (43) cstmt -> . simple
    (46) simple -> . block
    (47) simple -> . vardec
    (48) simple -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (49) simple -> . RETURN exp SEMICOLON
    (50) simple -> . exp SEMICOLON
    (51) simple -> . PRINT LRB ID RRB SEMICOLON
    (22) block -> . LCB stmtlist RCB
    (6) vardec -> . idlist COLON type SEMICOLON
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (14) idlist -> . idlist COMMA iddec
    (15) idlist -> . iddec
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE
    (12) iddec -> . lvalue ASSIGN exp
    (13) iddec -> . lvalue

    WHILE           shift and go to state 188
    FOR             shift and go to state 189
    IF              shift and go to state 190
    ON              shift and go to state 97
    RETURN          shift and go to state 98
    PRINT           shift and go to state 99
    LCB             shift and go to state 42
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    cstmt                          shift and go to state 153
    exp                            shift and go to state 91
    simple                         shift and go to state 94
    block                          shift and go to state 95
    vardec                         shift and go to state 96
    idlist                         shift and go to state 8
    lvalue                         shift and go to state 100
    const                          shift and go to state 34
    iddec                          shift and go to state 11

state 208

    (41) cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON . exp RRB cstmt
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE

    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 210
    lvalue                         shift and go to state 31
    const                          shift and go to state 34

state 209

    (42) cstmt -> IF LRB exp RRB cstmt elseiflist . ELSE cstmt
    (44) elseiflist -> elseiflist . ELSEIF LRB exp RRB cstmt

    ELSE            shift and go to state 211
    ELSEIF          shift and go to state 157


state 210

    (41) cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp . RRB cstmt
    (58) exp -> exp . relop exp
    (65) exp -> exp . operator1 exp
    (66) exp -> exp . operator2 exp
    (67) exp -> exp . operator3 exp
    (52) relop -> . GT
    (53) relop -> . GE
    (54) relop -> . LT
    (55) relop -> . LE
    (56) relop -> . EQ
    (57) relop -> . NE
    (68) operator1 -> . MUL
    (69) operator1 -> . DIV
    (70) operator1 -> . MOD
    (71) operator2 -> . SUM
    (72) operator2 -> . SUB
    (73) operator3 -> . AND
    (74) operator3 -> . OR

    RRB             shift and go to state 212
    GT              shift and go to state 56
    GE              shift and go to state 57
    LT              shift and go to state 58
    LE              shift and go to state 59
    EQ              shift and go to state 60
    NE              shift and go to state 61
    MUL             shift and go to state 62
    DIV             shift and go to state 63
    MOD             shift and go to state 64
    SUM             shift and go to state 65
    SUB             shift and go to state 66
    AND             shift and go to state 67
    OR              shift and go to state 68

    relop                          shift and go to state 52
    operator1                      shift and go to state 53
    operator2                      shift and go to state 54
    operator3                      shift and go to state 55

state 211

    (42) cstmt -> IF LRB exp RRB cstmt elseiflist ELSE . cstmt
    (39) cstmt -> . WHILE LRB exp RRB cstmt
    (40) cstmt -> . FOR LRB ID IN ID RRB cstmt
    (41) cstmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt
    (42) cstmt -> . IF LRB exp RRB cstmt elseiflist ELSE cstmt
    (43) cstmt -> . simple
    (46) simple -> . block
    (47) simple -> . vardec
    (48) simple -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (49) simple -> . RETURN exp SEMICOLON
    (50) simple -> . exp SEMICOLON
    (51) simple -> . PRINT LRB ID RRB SEMICOLON
    (22) block -> . LCB stmtlist RCB
    (6) vardec -> . idlist COLON type SEMICOLON
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (14) idlist -> . idlist COMMA iddec
    (15) idlist -> . iddec
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE
    (12) iddec -> . lvalue ASSIGN exp
    (13) iddec -> . lvalue

    WHILE           shift and go to state 188
    FOR             shift and go to state 189
    IF              shift and go to state 190
    ON              shift and go to state 97
    RETURN          shift and go to state 98
    PRINT           shift and go to state 99
    LCB             shift and go to state 42
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 91
    cstmt                          shift and go to state 166
    simple                         shift and go to state 94
    block                          shift and go to state 95
    vardec                         shift and go to state 96
    idlist                         shift and go to state 8
    lvalue                         shift and go to state 100
    const                          shift and go to state 34
    iddec                          shift and go to state 11

state 212

    (41) cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB . cstmt
    (39) cstmt -> . WHILE LRB exp RRB cstmt
    (40) cstmt -> . FOR LRB ID IN ID RRB cstmt
    (41) cstmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt
    (42) cstmt -> . IF LRB exp RRB cstmt elseiflist ELSE cstmt
    (43) cstmt -> . simple
    (46) simple -> . block
    (47) simple -> . vardec
    (48) simple -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (49) simple -> . RETURN exp SEMICOLON
    (50) simple -> . exp SEMICOLON
    (51) simple -> . PRINT LRB ID RRB SEMICOLON
    (22) block -> . LCB stmtlist RCB
    (6) vardec -> . idlist COLON type SEMICOLON
    (58) exp -> . exp relop exp
    (59) exp -> . lvalue
    (60) exp -> . SUB exp
    (61) exp -> . NOT exp
    (62) exp -> . LRB exp RRB
    (63) exp -> . lvalue ASSIGN exp
    (64) exp -> . const
    (65) exp -> . exp operator1 exp
    (66) exp -> . exp operator2 exp
    (67) exp -> . exp operator3 exp
    (14) idlist -> . idlist COMMA iddec
    (15) idlist -> . iddec
    (25) lvalue -> . ID LRB explist RRB
    (26) lvalue -> . ID
    (27) lvalue -> . ID LSB exp RSB
    (75) const -> . INTEGERNUMBER
    (76) const -> . FLOATNUMBER
    (77) const -> . TRUE
    (78) const -> . FALSE
    (12) iddec -> . lvalue ASSIGN exp
    (13) iddec -> . lvalue

    WHILE           shift and go to state 188
    FOR             shift and go to state 189
    IF              shift and go to state 190
    ON              shift and go to state 97
    RETURN          shift and go to state 98
    PRINT           shift and go to state 99
    LCB             shift and go to state 42
    SUB             shift and go to state 32
    NOT             shift and go to state 33
    LRB             shift and go to state 27
    ID              shift and go to state 10
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 91
    cstmt                          shift and go to state 175
    simple                         shift and go to state 94
    block                          shift and go to state 95
    vardec                         shift and go to state 96
    idlist                         shift and go to state 8
    lvalue                         shift and go to state 100
    const                          shift and go to state 34
    iddec                          shift and go to state 11
