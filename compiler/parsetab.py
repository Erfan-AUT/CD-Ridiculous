
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftANDORleftNOTleftLTLEGTGEEQNErightASSIGNleftSUMSUBleftMULDIVMODAND ASSIGN BOOLEAN COLON COMMA DIV ELSE ELSEIF EQ ERROR FALSE FLOAT FLOATNUMBER FOR FUNCTION GE GT ID IF IN INTEGER INTEGERNUMBER LCB LE LRB LSB LT MAIN MOD MUL NE NOT ON OR PRINT RCB RETURN RRB RSB SEMICOLON SUB SUM TRUE WHERE WHILEprogram : declist MAIN LRB RRB blockdeclist : declist dec\n    | epsdec : vardec\n    | funcdecvardec : idlist COLON type SEMICOLONfuncdec : FUNCTION ID LRB paramdecs RRB COLON type block\n    | FUNCTION ID LRB paramdecs RRB blocktype : INTEGER\n    | FLOAT\n    | BOOLEANiddec : lvalue\n    | ID ASSIGN exp\n    idlist : iddec\n    | idlist COMMA iddec\n    paramdecs : paramdecslist\n    | epsparamdecslist : paramdec\n    | paramdecslist COMMA paramdec\n    paramdec : ID COLON type\n    | ID LSB RSB COLON typeblock : LCB stmtlist RCBstmtlist : stmtlist stmt\n    | epslvalue : ID\n    | ID LSB exp RSBcase : WHERE const COLON stmtlistcases : cases case\n    | eps\n    stmt : ostmt\n    | cstmtostmt : IF LRB exp RRB simple\n    | IF LRB exp RRB ostmt\n    | IF LRB exp RRB cstmt elseiflist ELSE ostmt\n    | FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt\n    | FOR LRB ID IN RRB ostmt\n    | WHILE LRB exp LRB ostmt\n    cstmt : simple\n    | IF LRB exp RRB cstmt elseiflist ELSE cstmt\n    | FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt\n    | FOR LRB ID IN RRB cstmt\n    | WHILE LRB exp LRB cstmt\n    elseiflist : elseiflist ELSEIF LRB exp RRB cstmt\n    | epssimple : RETURN exp SEMICOLON\n    | exp SEMICOLON\n    | block\n    | vardec\n    | ON LRB exp RRB LCB cases RCB SEMICOLON\n    | PRINT LRB ID RRB SEMICOLONrelop : GT\n    | GE\n    | LT\n    | LE\n    | EQ\n    | NEexp : lvalue ASSIGN exp\n    | exp operator exp %prec AND\n    | exp relop exp %prec LT\n    | const\n    | lvalue\n    | ID LRB explist RRB\n    | LRB exp RRB\n    | SUB exp\n    | NOT expoperator : AND\n    | OR\n    | SUM\n    | SUB\n    | MUL\n    | DIV\n    | MODconst : INTEGERNUMBER\n    | FLOATNUMBER\n    | TRUE\n    | FALSEexplist : exp\n    | explist COMMA exp\n    | epseps :'
    
_lr_action_items = {'MAIN':([0,2,3,5,6,7,40,80,99,121,],[-80,4,-3,-2,-4,-5,-6,-22,-8,-7,]),'FUNCTION':([0,2,3,5,6,7,40,80,99,121,],[-80,9,-3,-2,-4,-5,-6,-22,-8,-7,]),'ID':([0,2,3,5,6,7,9,15,17,18,25,30,31,32,39,40,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,67,68,72,80,81,82,83,86,90,91,92,99,102,103,104,105,106,108,109,117,121,122,123,125,128,129,132,133,134,136,139,140,141,144,150,151,152,153,154,157,158,159,160,161,166,167,168,173,174,176,179,181,182,184,],[-80,10,-3,-2,-4,-5,16,10,26,26,41,26,26,26,-80,-6,26,26,26,-66,-67,-68,-69,-70,-71,-72,-51,-52,-53,-54,-55,-56,26,88,-24,41,-22,-23,-30,-31,-38,26,-47,-48,-8,26,26,-46,115,26,26,119,-45,-7,88,26,88,-32,-33,88,-37,-42,-50,26,-36,-41,88,-39,-34,26,88,-49,-35,-40,-80,88,88,26,171,26,88,26,88,88,26,88,88,]),'$end}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declist':([0,],[2,]),'eps':([0,25,39,46,130,135,159,177,],[3,44,68,75,138,143,68,138,]),'dec':([2,],[5,]),'vardec':([2,67,122,125,132,144,153,160,161,173,176,179,182,184,],[6,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'funcdec':([2,],[7,]),'idlist':([2,67,122,125,132,144,153,160,161,173,176,179,182,184,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'iddec':([2,15,67,122,125,132,144,153,160,161,173,176,179,182,184,],[11,24,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'lvalue':([2,15,17,18,30,31,32,46,47,48,62,67,90,102,103,105,106,108,122,123,125,132,139,144,152,153,160,161,166,167,168,173,174,176,179,181,182,184,],[12,12,28,28,28,28,28,28,28,28,28,95,28,28,28,28,28,28,95,28,95,95,28,95,28,95,95,95,28,28,28,95,28,95,95,28,95,95,]),'type':([14,69,98,110,],[20,96,111,120,]),'exp':([17,18,30,31,32,46,47,48,62,67,90,102,103,105,106,108,122,123,125,132,139,144,152,153,160,161,166,167,168,173,174,176,179,181,182,184,],[27,37,63,64,65,74,76,77,78,85,107,112,113,114,116,118,85,131,85,85,146,85,156,85,85,85,169,170,172,85,178,85,85,183,85,85,]),'const':([17,18,30,31,32,46,47,48,62,67,90,102,103,105,106,108,122,123,125,132,139,144,149,152,153,160,161,166,167,168,173,174,176,179,181,182,184,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,155,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'block':([19,67,71,111,122,125,132,144,153,160,161,173,176,179,182,184,],[38,91,99,121,91,91,91,91,91,91,91,91,91,91,91,91,]),'paramdecs':([25,],[42,]),'paramdecslist':([25,],[43,]),'paramdec':([25,72,],[45,100,]),'operator':([27,37,63,64,65,74,76,77,78,85,107,112,113,114,116,118,131,146,156,169,170,172,178,183,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'relop':([27,37,63,64,65,74,76,77,78,85,107,112,113,114,116,118,131,146,156,169,170,172,178,183,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'stmtlist':([39,159,],[67,161,]),'explist':([46,],[73,]),'stmt':([67,161,],[81,81,]),'ostmt':([67,122,125,132,144,153,161,],[82,129,133,140,151,157,82,]),'cstmt':([67,122,125,132,144,153,160,161,173,176,179,182,184,],[83,130,134,141,150,158,162,83,177,134,141,150,158,]),'simple':([67,122,125,132,144,153,160,161,173,176,179,182,184,],[86,128,86,86,86,86,86,86,86,86,86,86,86,]),'elseiflist':([130,177,],[137,180,]),'cases':([135,],[142,]),'case':([142,],[148,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declist MAIN LRB RRB block','program',5,'p_program','parser.py',15),
  ('declist -> declist dec','declist',2,'p_declist','parser.py',20),
  ('declist -> eps','declist',1,'p_declist','parser.py',21),
  ('dec -> vardec','dec',1,'p_dec','parser.py',27),
  ('dec -> funcdec','dec',1,'p_dec','parser.py',28),
  ('vardec -> idlist COLON type SEMICOLON','vardec',4,'p_vardec','parser.py',33),
  ('funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block','funcdec',8,'p_funcdec','parser.py',38),
  ('funcdec -> FUNCTION ID LRB paramdecs RRB block','funcdec',6,'p_funcdec','parser.py',39),
  ('type -> INTEGER','type',1,'p_type','parser.py',44),
  ('type -> FLOAT','type',1,'p_type','parser.py',45),
  ('type -> BOOLEAN','type',1,'p_type','parser.py',46),
  ('iddec -> lvalue','iddec',1,'p_iddec','parser.py',51),
  ('iddec -> ID ASSIGN exp','iddec',3,'p_iddec','parser.py',52),
  ('idlist -> iddec','idlist',1,'p_idlist','parser.py',58),
  ('idlist -> idlist COMMA iddec','idlist',3,'p_idlist','parser.py',59),
  ('paramdecs -> paramdecslist','paramdecs',1,'p_paramdecs','parser.py',65),
  ('paramdecs -> eps','paramdecs',1,'p_paramdecs','parser.py',66),
  ('paramdecslist -> paramdec','paramdecslist',1,'p_paramdecslist','parser.py',71),
  ('paramdecslist -> paramdecslist COMMA paramdec','paramdecslist',3,'p_paramdecslist','parser.py',72),
  ('paramdec -> ID COLON type','paramdec',3,'p_paramdec','parser.py',78),
  ('paramdec -> ID LSB RSB COLON type','paramdec',5,'p_paramdec','parser.py',79),
  ('block -> LCB stmtlist RCB','block',3,'p_block','parser.py',84),
  ('stmtlist -> stmtlist stmt','stmtlist',2,'p_stmtlist','parser.py',89),
  ('stmtlist -> eps','stmtlist',1,'p_stmtlist','parser.py',90),
  ('lvalue -> ID','lvalue',1,'p_lvalue','parser.py',95),
  ('lvalue -> ID LSB exp RSB','lvalue',4,'p_lvalue','parser.py',96),
  ('case -> WHERE const COLON stmtlist','case',4,'p_case','parser.py',101),
  ('cases -> cases case','cases',2,'p_cases','parser.py',106),
  ('cases -> eps','cases',1,'p_cases','parser.py',107),
  ('stmt -> ostmt','stmt',1,'p_stmt','parser.py',113),
  ('stmt -> cstmt','stmt',1,'p_stmt','parser.py',114),
  ('ostmt -> IF LRB exp RRB simple','ostmt',5,'p_ostmt','parser.py',119),
  ('ostmt -> IF LRB exp RRB ostmt','ostmt',5,'p_ostmt','parser.py',120),
  ('ostmt -> IF LRB exp RRB cstmt elseiflist ELSE ostmt','ostmt',8,'p_ostmt','parser.py',121),
  ('ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt','ostmt',9,'p_ostmt','parser.py',122),
  ('ostmt -> FOR LRB ID IN RRB ostmt','ostmt',6,'p_ostmt','parser.py',123),
  ('ostmt -> WHILE LRB exp LRB ostmt','ostmt',5,'p_ostmt','parser.py',124),
  ('cstmt -> simple','cstmt',1,'p_cstmt','parser.py',129),
  ('cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt','cstmt',8,'p_cstmt','parser.py',130),
  ('cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt','cstmt',9,'p_cstmt','parser.py',131),
  ('cstmt -> FOR LRB ID IN RRB cstmt','cstmt',6,'p_cstmt','parser.py',132),
  ('cstmt -> WHILE LRB exp LRB cstmt','cstmt',5,'p_cstmt','parser.py',133),
  ('elseiflist -> elseiflist ELSEIF LRB exp RRB cstmt','elseiflist',6,'p_elseiflist','parser.py',138),
  ('elseiflist -> eps','elseiflist',1,'p_elseiflist','parser.py',139),
  ('simple -> RETURN exp SEMICOLON','simple',3,'p_simple','parser.py',144),
  ('simple -> exp SEMICOLON','simple',2,'p_simple','parser.py',145),
  ('simple -> block','simple',1,'p_simple','parser.py',146),
  ('simple -> vardec','simple',1,'p_simple','parser.py',147),
  ('simple -> ON LRB exp RRB LCB cases RCB SEMICOLON','simple',8,'p_simple','parser.py',148),
  ('simple -> PRINT LRB ID RRB SEMICOLON','simple',5,'p_simple','parser.py',149),
  ('relop -> GT','relop',1,'p_relop','parser.py',154),
  ('relop -> GE','relop',1,'p_relop','parser.py',155),
  ('relop -> LT','relop',1,'p_relop','parser.py',156),
  ('relop -> LE','relop',1,'p_relop','parser.py',157),
  ('relop -> EQ','relop',1,'p_relop','parser.py',158),
  ('relop -> NE','relop',1,'p_relop','parser.py',159),
  ('exp -> lvalue ASSIGN exp','exp',3,'p_exp','parser.py',164),
  ('exp -> exp operator exp','exp',3,'p_exp','parser.py',165),
  ('exp -> exp relop exp','exp',3,'p_exp','parser.py',166),
  ('exp -> const','exp',1,'p_exp','parser.py',167),
  ('exp -> lvalue','exp',1,'p_exp','parser.py',168),
  ('exp -> ID LRB explist RRB','exp',4,'p_exp','parser.py',169),
  ('exp -> LRB exp RRB','exp',3,'p_exp','parser.py',170),
  ('exp -> SUB exp','exp',2,'p_exp','parser.py',171),
  ('exp -> NOT exp','exp',2,'p_exp','parser.py',172),
  ('operator -> AND','operator',1,'p_operator','parser.py',177),
  ('operator -> OR','operator',1,'p_operator','parser.py',178),
  ('operator -> SUM','operator',1,'p_operator','parser.py',179),
  ('operator -> SUB','operator',1,'p_operator','parser.py',180),
  ('operator -> MUL','operator',1,'p_operator','parser.py',181),
  ('operator -> DIV','operator',1,'p_operator','parser.py',182),
  ('operator -> MOD','operator',1,'p_operator','parser.py',183),
  ('const -> INTEGERNUMBER','const',1,'p_const','parser.py',188),
  ('const -> FLOATNUMBER','const',1,'p_const','parser.py',189),
  ('const -> TRUE','const',1,'p_const','parser.py',190),
  ('const -> FALSE','const',1,'p_const','parser.py',191),
  ('explist -> exp','explist',1,'p_explist','parser.py',196),
  ('explist -> explist COMMA exp','explist',3,'p_explist','parser.py',197),
  ('explist -> eps','explist',1,'p_explist','parser.py',198),
  ('eps -> <empty>','eps',0,'p_eps','parser.py',203),
]
