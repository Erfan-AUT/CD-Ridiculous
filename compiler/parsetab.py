
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNleftANDORleftNOTleftLTLEGTGEEQNEleftSUMSUBleftMULDIVMODAND ASSIGN BOOLEAN COLON COMMA DIV ELSE ELSEIF EQ ERROR FALSE FLOAT FLOATNUMBER FOR FUNCTION GE GT ID IF IN INTEGER INTEGERNUMBER LCB LE LRB LSB LT MAIN MOD MUL NE NOT ON OR PRINT RCB RETURN RRB RSB SEMICOLON SUB SUM TRUE WHERE WHILEprogram : declist MAIN LRB RRB blockdeclist : declist decdeclist : epsdec : vardec\n    | funcdecvardec : idlist COLON type SEMICOLONfuncdec : FUNCTION ID LRB paramdecs RRB COLON type block\n    | FUNCTION ID LRB paramdecs RRB blocktype : INTEGER\n    | FLOAT\n    | BOOLEANiddec : lvalue ASSIGN expiddec : lvalueidlist : idlist COMMA iddecidlist : iddecparamdecs : paramdecslist\n    | epsparamdecslist : paramdec\n    | paramdecslist COMMA paramdec\n    paramdec : ID LSB RSB COLON typeparamdec : ID COLON typeblock : LCB stmtlist RCBstmtlist : stmtlist stmt %prec MULstmtlist : epslvalue : ID LRB explist RRBlvalue : IDlvalue : ID LSB exp RSBcase : WHERE const COLON stmtlistcases : cases casecases : epsstmt : ostmt\n    | cstmtostmt : WHILE LRB exp RRB ostmtostmt : FOR LRB ID IN ID RRB ostmtostmt : FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmtostmt : IF LRB exp RRB cstmt elseiflist ELSE ostmtostmt : IF LRB exp RRB cstmt\n    | IF LRB exp RRB ostmtcstmt : WHILE LRB exp RRB cstmt cstmt : FOR LRB ID IN ID RRB cstmtcstmt : FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmtcstmt : IF LRB exp RRB cstmt elseiflist ELSE cstmtcstmt : simpleelseiflist : elseiflist ELSEIF LRB exp RRB cstmtelseiflist : epssimple : block\n    | vardecsimple :  ON LRB exp RRB LCB cases RCB SEMICOLONsimple : RETURN exp SEMICOLONsimple : exp SEMICOLONsimple : PRINT LRB ID RRB SEMICOLONrelop : GT\n    | GE\n    | LT\n    | LE\n    | EQ\n    | NEexp : exp relop exp %prec LTexp : lvalue %prec ORexp : SUB expexp : NOT expexp : LRB exp RRBexp : lvalue ASSIGN expexp : constexp : exp operator1 exp %prec MULexp : exp operator2 exp %prec SUMexp : exp operator3 exp %prec ANDoperator1 : MUL\n    | DIV\n    | MOD\n    operator2 : SUM\n    | SUB\n    operator3 : AND\n    | OR\n    const : INTEGERNUMBER\n    | FLOATNUMBER\n    | TRUE\n    | FALSEexplist : exp\n    | explist COMMA exp\n    | epseps :'
    
_lr_action_items = {'MAIN':([0,2,3,5,6,7,43,86,104,125,],[-82,4,-3,-2,-4,-5,-6,-22,-8,-7,]),'FUNCTION':([0,2,3,5,6,7,43,86,104,125,],[-82,9,-3,-2,-4,-5,-6,-22,-8,-7,]),'ID':([0,2,3,5,6,7,9,15,17,18,19,26,27,32,33,42,43,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,73,74,78,86,87,88,89,94,95,96,98,104,106,107,108,109,110,112,113,121,125,126,127,128,129,132,133,137,138,142,143,144,145,148,149,152,153,156,164,165,166,167,168,169,170,171,172,174,175,176,180,182,183,184,185,186,192,193,194,195,200,201,202,203,207,208,211,212,],[-82,10,-3,-2,-4,-5,16,10,10,10,10,44,10,10,10,-82,-6,10,10,10,10,10,-52,-53,-54,-55,-56,-57,-68,-69,-70,-71,-72,-73,-74,10,10,-24,44,-22,-23,-31,-32,-43,-46,-47,10,-8,10,-50,117,10,10,122,10,-49,-7,10,134,10,10,-33,-39,-37,-38,-51,10,10,10,10,159,-34,-40,10,10,10,-42,-36,10,10,178,10,-48,-35,-41,-37,-82,10,10,10,10,10,10,197,10,10,10,204,10,10,10,10,10,10,]),'$end':([1,41,86,],[0,-1,-22,]),'LRB':([4,10,16,17,18,19,27,32,33,42,43,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,73,74,86,87,88,89,90,92,93,94,95,96,97,98,99,106,107,108,109,110,113,117,121,126,128,129,132,133,136,137,138,139,140,142,143,144,145,148,149,152,153,156,157,159,164,165,166,167,168,169,171,172,174,175,176,180,182,183,184,185,186,188,189,190,192,193,194,195,197,200,202,203,207,208,211,212,],[13,17,26,27,27,27,27,27,27,-82,-6,27,27,27,27,27,-52,-53,-54,-55,-56,-57,-68,-69,-70,-71,-72,-73,-74,27,27,-24,-22,-23,-31,-32,106,108,109,-43,-46,-47,110,27,112,27,-50,27,27,27,27,17,-49,27,27,27,-33,-39,145,-37,-38,148,149,-51,27,27,27,27,27,-34,-40,27,168,17,27,27,-42,-36,27,27,27,-48,-35,-41,-37,-82,27,27,27,27,27,192,193,194,27,27,27,27,17,27,27,27,27,27,27,27,]),'COLON':([8,10,11,12,25,31,34,35,36,37,38,40,44,50,70,71,72,77,79,81,82,83,84,85,100,101,123,173,],[14,-26,-15,-13,-14,-59,-64,-75,-76,-77,-78,-12,76,-25,-60,-61,-27,103,-62,-58,-65,-66,-67,-63,-13,114,-12,180,]),'COMMA':([8,10,11,12,17,22,23,24,25,28,29,30,31,34,35,36,37,38,40,46,48,50,70,71,72,79,80,81,82,83,84,85,100,102,105,123,124,],[15,-26,-15,-13,-82,-9,-10,-11,-14,51,-79,-81,-59,-64,-75,-76,-77,-78,-12,78,-18,-25,-60,-61,-27,-62,-80,-58,-65,-66,-67,-63,-13,-21,-19,-12,-20,]),'ASSIGN':([10,12,31,50,72,100,117,159,197,],[-26,19,69,-25,-27,113,-26,-26,-26,]),'GT':([10,29,31,34,35,36,37,38,39,40,49,50,70,71,72,79,80,81,82,83,84,85,91,100,111,116,117,118,119,120,123,135,154,155,158,159,160,177,179,191,196,197,198,199,205,210,],[-26,56,-59,-64,-75,-76,-77,-78,56,56,56,-25,-60,56,-27,-62,56,-58,-65,-66,56,56,56,-59,56,56,-26,56,56,56,56,56,56,56,56,-26,56,56,56,56,56,-26,56,56,56,56,]),'GE':([10,29,31,34,35,36,37,38,39,40,49,50,70,71,72,79,80,81,82,83,84,85,91,100,111,116,117,118,119,120,123,135,154,155,158,159,160,177,179,191,196,197,198,199,205,210,],[-26,57,-59,-64,-75,-76,-77,-78,57,57,57,-25,-60,57,-27,-62,57,-58,-65,-66,57,57,57,-59,57,57,-26,57,57,57,57,57,57,57,57,-26,57,57,57,57,57,-26,57,57,57,57,]),'LT':([10,29,31,34,35,36,37,38,39,40,49,50,70,71,72,79,80,81,82,83,84,85,91,100,111,116,117,118,119,120,123,135,154,155,158,159,160,177,179,191,196,197,198,199,205,210,],[-26,58,-59,-64,-75,-76,-77,-78,58,58,58,-25,-60,58,-27,-62,58,-58,-65,-66,58,58,58,-59,58,58,-26,58,58,58,58,58,58,58,58,-26,58,58,58,58,58,-26,58,58,58,58,]),'LE':([10,29,31,34,35,36,37,38,39,40,49,50,70,71,72,79,80,81,82,83,84,85,91,100,111,116,117,118,119,120,123,135,154,155,158,159,160,177,179,191,196,197,198,199,205,210,],[-26,59,-59,-64,-75,-76,-77,-78,59,59,59,-25,-60,59,-27,-62,59,-58,-65,-66,59,59,59,-59,59,59,-26,59,59,59,59,59,59,59,59,-26,59,59,59,59,59,-26,59,59,59,59,]),'EQ':([10,29,31,34,35,36,37,38,39,40,49,50,70,71,72,79,80,81,82,83,84,85,91,100,111,116,117,118,119,120,123,135,154,155,158,159,160,177,179,191,196,197,198,199,205,210,],[-26,60,-59,-64,-75,-76,-77,-78,60,60,60,-25,-60,60,-27,-62,60,-58,-65,-66,60,60,60,-59,60,60,-26,60,60,60,60,60,60,60,60,-26,60,60,60,60,60,-26,60,60,60,60,]),'NE':([10,29,31,34,35,36,37,38,39,40,49,50,70,71,72,79,80,81,82,83,84,85,91,100,111,116,117,118,119,120,123,135,154,155,158,159,160,177,179,191,196,197,198,199,205,210,],[-26,61,-59,-64,-75,-76,-77,-78,61,61,61,-25,-60,61,-27,-62,61,-58,-65,-66,61,61,61,-59,61,61,-26,61,61,61,61,61,61,61,61,-26,61,61,61,61,61,-26,61,61,61,61,]),'MUL':([10,29,31,34,35,36,37,38,39,40,49,50,70,71,72,79,80,81,82,83,84,85,91,100,111,116,117,118,119,120,123,135,154,155,158,159,160,177,179,191,196,197,198,199,205,210,],[-26,62,-59,-64,-75,-76,-77,-78,62,62,62,-25,62,62,-27,-62,62,62,-65,62,62,62,62,-59,62,62,-26,62,62,62,62,62,62,62,62,-26,62,62,62,62,62,-26,62,62,62,62,]),'DIV':([10,29,31,34,35,36,37,38,39,40,49,50,70,71,72,79,80,81,82,83,84,85,91,100,111,116,117,118,119,120,123,135,154,155,158,159,160,177,179,191,196,197,198,199,205,210,],[-26,63,-59,-64,-75,-76,-77,-78,63,63,63,-25,63,63,-27,-62,63,63,-65,63,63,63,63,-59,63,63,-26,63,63,63,63,63,63,63,63,-26,63,63,63,63,63,-26,63,63,63,63,]),'MOD':([10,29,31,34,35,36,37,38,39,40,49,50,70,71,72,79,80,81,82,83,84,85,91,100,111,116,117,118,119,120,123,135,154,155,158,159,160,177,179,191,196,197,198,199,205,210,],[-26,64,-59,-64,-75,-76,-77,-78,64,64,64,-25,64,64,-27,-62,64,64,-65,64,64,64,64,-59,64,64,-26,64,64,64,64,64,64,64,64,-26,64,64,64,64,64,-26,64,64,64,64,]),'SUM':([10,29,31,34,35,36,37,38,39,40,49,50,70,71,72,79,80,81,82,83,84,85,91,100,111,116,117,118,119,120,123,135,154,155,158,159,160,177,179,191,196,197,198,199,205,210,],[-26,65,-59,-64,-75,-76,-77,-78,65,65,65,-25,-60,65,-27,-62,65,65,-65,-66,65,65,65,-59,65,65,-26,65,65,65,65,65,65,65,65,-26,65,65,65,65,65,-26,65,65,65,65,]),'SUB':([10,17,18,19,27,29,31,32,33,34,35,36,37,38,39,40,42,43,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,79,80,81,82,83,84,85,86,87,88,89,91,94,95,96,98,100,106,107,108,109,110,111,113,116,117,118,119,120,121,123,126,128,129,132,133,135,137,138,142,143,144,145,148,149,152,153,154,155,156,158,159,160,164,165,166,167,168,169,171,172,174,175,176,177,179,180,182,183,184,185,186,191,192,193,194,195,196,197,198,199,200,202,203,205,207,208,210,211,212,],[-26,32,32,32,32,66,-59,32,32,-64,-75,-76,-77,-78,66,66,-82,-6,66,-25,32,32,32,32,32,-52,-53,-54,-55,-56,-57,-68,-69,-70,-71,-72,-73,-74,32,-60,66,-27,32,-24,-62,66,66,-65,-66,66,66,-22,-23,-31,-32,66,-43,-46,-47,32,-59,32,-50,32,32,32,66,32,66,-26,66,66,66,-49,66,32,32,32,-33,-39,66,-37,-38,-51,32,32,32,32,32,-34,-40,66,66,32,66,-26,66,32,32,-42,-36,32,32,32,-48,-35,-41,-37,66,66,-82,32,32,32,32,32,66,32,32,32,32,66,-26,66,66,32,32,32,66,32,32,66,32,32,]),'AND':([10,29,31,34,35,36,37,38,39,40,49,50,70,71,72,79,80,81,82,83,84,85,91,100,111,116,117,118,119,120,123,135,154,155,158,159,160,177,179,191,196,197,198,199,205,210,],[-26,67,-59,-64,-75,-76,-77,-78,67,67,67,-25,-60,-61,-27,-62,67,-58,-65,-66,-67,67,67,-59,67,67,-26,67,67,67,67,67,67,67,67,-26,67,67,67,67,67,-26,67,67,67,67,]),'OR':([10,29,31,34,35,36,37,38,39,40,49,50,70,71,72,79,80,81,82,83,84,85,91,100,111,116,117,118,119,120,123,135,154,155,158,159,160,177,179,191,196,197,198,199,205,210,],[-26,68,-59,-64,-75,-76,-77,-78,68,68,68,-25,-60,-61,-27,-62,68,-58,-65,-66,-67,68,68,-59,68,68,-26,68,68,68,68,68,68,68,68,-26,68,68,68,68,68,-26,68,68,68,68,]),'RRB':([10,13,17,22,23,24,26,28,29,30,31,34,35,36,37,38,45,46,47,48,49,50,70,71,72,79,80,81,82,83,84,85,102,105,116,119,120,122,124,134,154,155,158,177,178,191,196,199,204,210,],[-26,20,-82,-9,-10,-11,-82,50,-79,-81,-59,-64,-75,-76,-77,-78,77,-16,-17,-18,79,-25,-60,-61,-27,-62,-80,-58,-65,-66,-67,-63,-21,-19,126,129,130,131,-20,143,164,165,169,182,183,195,200,203,207,212,]),'RSB':([10,31,34,35,36,37,38,39,50,70,71,72,75,79,81,82,83,84,85,],[-26,-59,-64,-75,-76,-77,-78,72,-25,-60,-61,-27,101,-62,-58,-65,-66,-67,-63,]),'SEMICOLON':([10,21,22,23,24,31,34,35,36,37,38,50,70,71,72,79,81,82,83,84,85,91,100,111,117,118,123,131,135,159,160,161,179,197,198,205,],[-26,43,-9,-10,-11,-59,-64,-75,-76,-77,-78,-25,-60,-61,-27,-62,-58,-65,-66,-67,-63,107,-59,121,-26,128,-63,142,144,-26,171,172,184,-26,202,208,]),'LSB':([10,44,117,159,197,],[18,75,18,18,18,]),'INTEGER':([14,76,103,114,],[22,22,22,22,]),'FLOAT':([14,76,103,114,],[23,23,23,23,]),'BOOLEAN':([14,76,103,114,],[24,24,24,24,]),'NOT':([17,18,19,27,32,33,42,43,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,73,74,86,87,88,89,94,95,96,98,106,107,108,109,110,113,121,126,128,129,132,133,137,138,142,143,144,145,148,149,152,153,156,164,165,166,167,168,169,171,172,174,175,176,180,182,183,184,185,186,192,193,194,195,200,202,203,207,208,211,212,],[33,33,33,33,33,33,-82,-6,33,33,33,33,33,-52,-53,-54,-55,-56,-57,-68,-69,-70,-71,-72,-73,-74,33,33,-24,-22,-23,-31,-32,-43,-46,-47,33,33,-50,33,33,33,33,-49,33,33,33,-33,-39,-37,-38,-51,33,33,33,33,33,-34,-40,33,33,33,-42,-36,33,33,33,-48,-35,-41,-37,-82,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'INTEGERNUMBER':([17,18,19,27,32,33,42,43,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,73,74,86,87,88,89,94,95,96,98,106,107,108,109,110,113,121,126,128,129,132,133,137,138,142,143,144,145,148,149,152,153,156,163,164,165,166,167,168,169,171,172,174,175,176,180,182,183,184,185,186,192,193,194,195,200,202,203,207,208,211,212,],[35,35,35,35,35,35,-82,-6,35,35,35,35,35,-52,-53,-54,-55,-56,-57,-68,-69,-70,-71,-72,-73,-74,35,35,-24,-22,-23,-31,-32,-43,-46,-47,35,35,-50,35,35,35,35,-49,35,35,35,-33,-39,-37,-38,-51,35,35,35,35,35,-34,-40,35,35,35,35,-42,-36,35,35,35,-48,-35,-41,-37,-82,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'FLOATNUMBER':([17,18,19,27,32,33,42,43,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,73,74,86,87,88,89,94,95,96,98,106,107,108,109,110,113,121,126,128,129,132,133,137,138,142,143,144,145,148,149,152,153,156,163,164,165,166,167,168,169,171,172,174,175,176,180,182,183,184,185,186,192,193,194,195,200,202,203,207,208,211,212,],[36,36,36,36,36,36,-82,-6,36,36,36,36,36,-52,-53,-54,-55,-56,-57,-68,-69,-70,-71,-72,-73,-74,36,36,-24,-22,-23,-31,-32,-43,-46,-47,36,36,-50,36,36,36,36,-49,36,36,36,-33,-39,-37,-38,-51,36,36,36,36,36,-34,-40,36,36,36,36,-42,-36,36,36,36,-48,-35,-41,-37,-82,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'TRUE':([17,18,19,27,32,33,42,43,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,73,74,86,87,88,89,94,95,96,98,106,107,108,109,110,113,121,126,128,129,132,133,137,138,142,143,144,145,148,149,152,153,156,163,164,165,166,167,168,169,171,172,174,175,176,180,182,183,184,185,186,192,193,194,195,200,202,203,207,208,211,212,],[37,37,37,37,37,37,-82,-6,37,37,37,37,37,-52,-53,-54,-55,-56,-57,-68,-69,-70,-71,-72,-73,-74,37,37,-24,-22,-23,-31,-32,-43,-46,-47,37,37,-50,37,37,37,37,-49,37,37,37,-33,-39,-37,-38,-51,37,37,37,37,37,-34,-40,37,37,37,37,-42,-36,37,37,37,-48,-35,-41,-37,-82,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'FALSE':([17,18,19,27,32,33,42,43,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,73,74,86,87,88,89,94,95,96,98,106,107,108,109,110,113,121,126,128,129,132,133,137,138,142,143,144,145,148,149,152,153,156,163,164,165,166,167,168,169,171,172,174,175,176,180,182,183,184,185,186,192,193,194,195,200,202,203,207,208,211,212,],[38,38,38,38,38,38,-82,-6,38,38,38,38,38,-52,-53,-54,-55,-56,-57,-68,-69,-70,-71,-72,-73,-74,38,38,-24,-22,-23,-31,-32,-43,-46,-47,38,38,-50,38,38,38,38,-49,38,38,38,-33,-39,-37,-38,-51,38,38,38,38,38,-34,-40,38,38,38,38,-42,-36,38,38,38,-48,-35,-41,-37,-82,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'LCB':([20,22,23,24,42,43,73,74,77,86,87,88,89,94,95,96,107,115,121,126,129,130,132,133,137,138,142,143,152,153,156,164,165,166,167,169,172,174,175,176,180,182,183,185,186,195,200,203,207,211,212,],[42,-9,-10,-11,-82,-6,42,-24,42,-22,-23,-31,-32,-43,-46,-47,-50,42,-49,42,42,141,-33,-39,-37,-38,-51,42,-34,-40,42,42,42,-42,-36,42,-48,-35,-41,-37,-82,42,42,42,42,42,42,42,42,42,42,]),'RCB':([42,43,73,74,86,87,88,89,94,95,96,107,121,132,133,137,138,141,142,150,151,152,153,162,166,167,172,174,175,176,180,185,],[-82,-6,86,-24,-22,-23,-31,-32,-43,-46,-47,-50,-49,-33,-39,-37,-38,-82,-51,161,-30,-34,-40,-29,-42,-36,-48,-35,-41,-37,-82,-28,]),'WHILE':([42,43,73,74,86,87,88,89,94,95,96,107,121,126,129,132,133,137,138,142,143,152,153,156,164,165,166,167,169,172,174,175,176,180,182,183,185,186,195,200,203,207,211,212,],[-82,-6,90,-24,-22,-23,-31,-32,-43,-46,-47,-50,-49,90,139,-33,-39,-37,-38,-51,90,-34,-40,90,90,139,-42,-36,139,-48,-35,-41,-37,-82,188,139,90,139,139,188,188,188,188,188,]),'FOR':([42,43,73,74,86,87,88,89,94,95,96,107,121,126,129,132,133,137,138,142,143,152,153,156,164,165,166,167,169,172,174,175,176,180,182,183,185,186,195,200,203,207,211,212,],[-82,-6,92,-24,-22,-23,-31,-32,-43,-46,-47,-50,-49,92,140,-33,-39,-37,-38,-51,92,-34,-40,92,92,140,-42,-36,140,-48,-35,-41,-37,-82,189,140,92,140,140,189,189,189,189,189,]),'IF':([42,43,73,74,86,87,88,89,94,95,96,107,121,126,129,132,133,137,138,142,143,152,153,156,164,165,166,167,169,172,174,175,176,180,182,183,185,186,195,200,203,207,211,212,],[-82,-6,93,-24,-22,-23,-31,-32,-43,-46,-47,-50,-49,93,136,-33,-39,-37,-38,-51,93,-34,-40,93,93,136,-42,-36,136,-48,-35,-41,-37,-82,190,136,93,136,136,190,190,190,190,190,]),'ON':([42,43,73,74,86,87,88,89,94,95,96,107,121,126,129,132,133,137,138,142,143,152,153,156,164,165,166,167,169,172,174,175,176,180,182,183,185,186,195,200,203,207,211,212,],[-82,-6,97,-24,-22,-23,-31,-32,-43,-46,-47,-50,-49,97,97,-33,-39,-37,-38,-51,97,-34,-40,97,97,97,-42,-36,97,-48,-35,-41,-37,-82,97,97,97,97,97,97,97,97,97,97,]),'RETURN':([42,43,73,74,86,87,88,89,94,95,96,107,121,126,129,132,133,137,138,142,143,152,153,156,164,165,166,167,169,172,174,175,176,180,182,183,185,186,195,200,203,207,211,212,],[-82,-6,98,-24,-22,-23,-31,-32,-43,-46,-47,-50,-49,98,98,-33,-39,-37,-38,-51,98,-34,-40,98,98,98,-42,-36,98,-48,-35,-41,-37,-82,98,98,98,98,98,98,98,98,98,98,]),'PRINT':([42,43,73,74,86,87,88,89,94,95,96,107,121,126,129,132,133,137,138,142,143,152,153,156,164,165,166,167,169,172,174,175,176,180,182,183,185,186,195,200,203,207,211,212,],[-82,-6,99,-24,-22,-23,-31,-32,-43,-46,-47,-50,-49,99,99,-33,-39,-37,-38,-51,99,-34,-40,99,99,99,-42,-36,99,-48,-35,-41,-37,-82,99,99,99,99,99,99,99,99,99,99,]),'ELSE':([43,86,94,95,96,107,121,133,137,142,146,147,153,166,172,175,176,181,187,206,209,],[-6,-22,-43,-46,-47,-50,-49,-39,-82,-51,156,-45,-40,-42,-48,-41,-82,186,-44,-82,211,]),'ELSEIF':([43,86,94,95,96,107,121,133,137,142,146,147,153,166,172,175,176,181,187,206,209,],[-6,-22,-43,-46,-47,-50,-49,-39,-82,-51,157,-45,-40,-42,-48,-41,-82,157,-44,-82,157,]),'WHERE':([43,74,86,87,88,89,94,95,96,107,121,132,133,137,138,141,142,150,151,152,153,162,166,167,172,174,175,176,180,185,],[-6,-24,-22,-23,-31,-32,-43,-46,-47,-50,-49,-33,-39,-37,-38,-82,-51,163,-30,-34,-40,-29,-42,-36,-48,-35,-41,-37,-82,-28,]),'IN':([117,159,197,],[127,170,201,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declist':([0,],[2,]),'eps':([0,17,26,42,137,141,176,180,206,],[3,30,47,74,147,151,147,74,147,]),'dec':([2,],[5,]),'vardec':([2,73,126,129,143,156,164,165,169,182,183,185,186,195,200,203,207,211,212,],[6,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'funcdec':([2,],[7,]),'idlist':([2,73,126,129,143,156,164,165,169,182,183,185,186,195,200,203,207,211,212,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'iddec':([2,15,73,126,129,143,156,164,165,169,182,183,185,186,195,200,203,207,211,212,],[11,25,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'lvalue':([2,15,17,18,19,27,32,33,51,52,53,54,55,69,73,98,106,108,109,110,113,126,128,129,143,144,145,148,149,156,164,165,168,169,171,182,183,184,185,186,192,193,194,195,200,202,203,207,208,211,212,],[12,12,31,31,31,31,31,31,31,31,31,31,31,31,100,31,31,31,31,31,31,100,31,100,100,31,31,31,31,100,100,100,31,100,31,100,100,31,100,100,31,31,31,100,100,31,100,100,31,100,100,]),'type':([14,76,103,114,],[21,102,115,124,]),'explist':([17,],[28,]),'exp':([17,18,19,27,32,33,51,52,53,54,55,69,73,98,106,108,109,110,113,126,128,129,143,144,145,148,149,156,164,165,168,169,171,182,183,184,185,186,192,193,194,195,200,202,203,207,208,211,212,],[29,39,40,49,70,71,80,81,82,83,84,85,91,111,116,118,119,120,123,91,135,91,91,154,155,158,160,91,91,91,177,91,179,91,91,191,91,91,196,198,199,91,91,205,91,91,210,91,91,]),'const':([17,18,19,27,32,33,51,52,53,54,55,69,73,98,106,108,109,110,113,126,128,129,143,144,145,148,149,156,163,164,165,168,169,171,182,183,184,185,186,192,193,194,195,200,202,203,207,208,211,212,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,173,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'block':([20,73,77,115,126,129,143,156,164,165,169,182,183,185,186,195,200,203,207,211,212,],[41,95,104,125,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'paramdecs':([26,],[45,]),'paramdecslist':([26,],[46,]),'paramdec':([26,78,],[48,105,]),'relop':([29,39,40,49,70,71,80,81,82,83,84,85,91,111,116,118,119,120,123,135,154,155,158,160,177,179,191,196,198,199,205,210,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'operator1':([29,39,40,49,70,71,80,81,82,83,84,85,91,111,116,118,119,120,123,135,154,155,158,160,177,179,191,196,198,199,205,210,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'operator2':([29,39,40,49,70,71,80,81,82,83,84,85,91,111,116,118,119,120,123,135,154,155,158,160,177,179,191,196,198,199,205,210,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'operator3':([29,39,40,49,70,71,80,81,82,83,84,85,91,111,116,118,119,120,123,135,154,155,158,160,177,179,191,196,198,199,205,210,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'stmtlist':([42,180,],[73,185,]),'stmt':([73,185,],[87,87,]),'ostmt':([73,126,129,143,156,164,165,169,183,185,186,195,],[88,132,138,152,167,174,138,132,152,88,167,174,]),'cstmt':([73,126,129,143,156,164,165,169,182,183,185,186,195,200,203,207,211,212,],[89,133,137,153,166,175,176,133,187,153,89,166,175,133,206,153,166,175,]),'simple':([73,126,129,143,156,164,165,169,182,183,185,186,195,200,203,207,211,212,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'elseiflist':([137,176,206,],[146,181,209,]),'cases':([141,],[150,]),'case':([150,],[162,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declist MAIN LRB RRB block','program',5,'p_program','parser.py',37),
  ('declist -> declist dec','declist',2,'p_declist_mult','parser.py',59),
  ('declist -> eps','declist',1,'p_declist','parser.py',85),
  ('dec -> vardec','dec',1,'p_dec','parser.py',92),
  ('dec -> funcdec','dec',1,'p_dec','parser.py',93),
  ('vardec -> idlist COLON type SEMICOLON','vardec',4,'p_vardec','parser.py',100),
  ('funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block','funcdec',8,'p_funcdec','parser.py',116),
  ('funcdec -> FUNCTION ID LRB paramdecs RRB block','funcdec',6,'p_funcdec','parser.py',117),
  ('type -> INTEGER','type',1,'p_type','parser.py',123),
  ('type -> FLOAT','type',1,'p_type','parser.py',124),
  ('type -> BOOLEAN','type',1,'p_type','parser.py',125),
  ('iddec -> lvalue ASSIGN exp','iddec',3,'p_iddec','parser.py',132),
  ('iddec -> lvalue','iddec',1,'p_iddec_single','parser.py',152),
  ('idlist -> idlist COMMA iddec','idlist',3,'p_idlist','parser.py',159),
  ('idlist -> iddec','idlist',1,'p_idlist_single','parser.py',172),
  ('paramdecs -> paramdecslist','paramdecs',1,'p_paramdecs','parser.py',179),
  ('paramdecs -> eps','paramdecs',1,'p_paramdecs','parser.py',180),
  ('paramdecslist -> paramdec','paramdecslist',1,'p_paramdecslist','parser.py',186),
  ('paramdecslist -> paramdecslist COMMA paramdec','paramdecslist',3,'p_paramdecslist','parser.py',187),
  ('paramdec -> ID LSB RSB COLON type','paramdec',5,'p_paramdec','parser.py',194),
  ('paramdec -> ID COLON type','paramdec',3,'p_paramdec_single','parser.py',200),
  ('block -> LCB stmtlist RCB','block',3,'p_block','parser.py',206),
  ('stmtlist -> stmtlist stmt','stmtlist',2,'p_stmtlist','parser.py',220),
  ('stmtlist -> eps','stmtlist',1,'p_stmtlist_eps','parser.py',232),
  ('lvalue -> ID LRB explist RRB','lvalue',4,'p_lvalue_call','parser.py',239),
  ('lvalue -> ID','lvalue',1,'p_lvalue_single','parser.py',245),
  ('lvalue -> ID LSB exp RSB','lvalue',4,'p_lvalue_array','parser.py',253),
  ('case -> WHERE const COLON stmtlist','case',4,'p_case','parser.py',274),
  ('cases -> cases case','cases',2,'p_cases','parser.py',281),
  ('cases -> eps','cases',1,'p_cases_empty','parser.py',289),
  ('stmt -> ostmt','stmt',1,'p_stmt','parser.py',296),
  ('stmt -> cstmt','stmt',1,'p_stmt','parser.py',297),
  ('ostmt -> WHILE LRB exp RRB ostmt','ostmt',5,'p_ostmt_while','parser.py',304),
  ('ostmt -> FOR LRB ID IN ID RRB ostmt','ostmt',7,'p_ostmt_pfor','parser.py',311),
  ('ostmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB ostmt','ostmt',9,'p_ostmt_cfor','parser.py',318),
  ('ostmt -> IF LRB exp RRB cstmt elseiflist ELSE ostmt','ostmt',8,'p_ostmt_ifelse','parser.py',325),
  ('ostmt -> IF LRB exp RRB cstmt','ostmt',5,'p_ostmt_if','parser.py',332),
  ('ostmt -> IF LRB exp RRB ostmt','ostmt',5,'p_ostmt_if','parser.py',333),
  ('cstmt -> WHILE LRB exp RRB cstmt','cstmt',5,'p_cstmt_while','parser.py',340),
  ('cstmt -> FOR LRB ID IN ID RRB cstmt','cstmt',7,'p_cstmt_pfor','parser.py',347),
  ('cstmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB cstmt','cstmt',9,'p_cstmt_cfor','parser.py',354),
  ('cstmt -> IF LRB exp RRB cstmt elseiflist ELSE cstmt','cstmt',8,'p_cstmt_ifelse','parser.py',361),
  ('cstmt -> simple','cstmt',1,'p_cstmt_simple','parser.py',368),
  ('elseiflist -> elseiflist ELSEIF LRB exp RRB cstmt','elseiflist',6,'p_elseiflist','parser.py',375),
  ('elseiflist -> eps','elseiflist',1,'p_elseiflist_eps','parser.py',383),
  ('simple -> block','simple',1,'p_simple','parser.py',390),
  ('simple -> vardec','simple',1,'p_simple','parser.py',391),
  ('simple -> ON LRB exp RRB LCB cases RCB SEMICOLON','simple',8,'p_simple_switch','parser.py',398),
  ('simple -> RETURN exp SEMICOLON','simple',3,'p_simple_return','parser.py',407),
  ('simple -> exp SEMICOLON','simple',2,'p_simple_semicolon','parser.py',414),
  ('simple -> PRINT LRB ID RRB SEMICOLON','simple',5,'p_print','parser.py',421),
  ('relop -> GT','relop',1,'p_relop','parser.py',431),
  ('relop -> GE','relop',1,'p_relop','parser.py',432),
  ('relop -> LT','relop',1,'p_relop','parser.py',433),
  ('relop -> LE','relop',1,'p_relop','parser.py',434),
  ('relop -> EQ','relop',1,'p_relop','parser.py',435),
  ('relop -> NE','relop',1,'p_relop','parser.py',436),
  ('exp -> exp relop exp','exp',3,'p_exp_relop','parser.py',443),
  ('exp -> lvalue','exp',1,'p_exp_lvalue','parser.py',450),
  ('exp -> SUB exp','exp',2,'p_exp_minus','parser.py',457),
  ('exp -> NOT exp','exp',2,'p_exp_not','parser.py',466),
  ('exp -> LRB exp RRB','exp',3,'p_exp_rbracket','parser.py',475),
  ('exp -> lvalue ASSIGN exp','exp',3,'p_exp_lvalue_assign','parser.py',490),
  ('exp -> const','exp',1,'p_exp_const','parser.py',497),
  ('exp -> exp operator1 exp','exp',3,'p_exp_binop_level1','parser.py',504),
  ('exp -> exp operator2 exp','exp',3,'p_exp_binop_level_2','parser.py',511),
  ('exp -> exp operator3 exp','exp',3,'p_exp_binop','parser.py',518),
  ('operator1 -> MUL','operator1',1,'p_operator_level_1','parser.py',525),
  ('operator1 -> DIV','operator1',1,'p_operator_level_1','parser.py',526),
  ('operator1 -> MOD','operator1',1,'p_operator_level_1','parser.py',527),
  ('operator2 -> SUM','operator2',1,'p_operator_level_2','parser.py',535),
  ('operator2 -> SUB','operator2',1,'p_operator_level_2','parser.py',536),
  ('operator3 -> AND','operator3',1,'p_operator_level_3','parser.py',544),
  ('operator3 -> OR','operator3',1,'p_operator_level_3','parser.py',545),
  ('const -> INTEGERNUMBER','const',1,'p_const','parser.py',553),
  ('const -> FLOATNUMBER','const',1,'p_const','parser.py',554),
  ('const -> TRUE','const',1,'p_const','parser.py',555),
  ('const -> FALSE','const',1,'p_const','parser.py',556),
  ('explist -> exp','explist',1,'p_explist','parser.py',569),
  ('explist -> explist COMMA exp','explist',3,'p_explist','parser.py',570),
  ('explist -> eps','explist',1,'p_explist','parser.py',571),
  ('eps -> <empty>','eps',0,'p_eps','parser.py',577),
]
