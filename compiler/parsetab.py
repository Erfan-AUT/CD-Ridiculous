
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftANDORleftNOTleftLTLEGTGEEQNErightASSIGNleftSUMSUBleftMULDIVMODAND ASSIGN BOOLEAN COLON COMMA DIV ELSE ELSEIF EQ ERROR FALSE FLOAT FLOATNUMBER FOR FUNCTION GE GT ID IF IN INTEGER INTEGERNUMBER LCB LE LRB LSB LT MAIN MOD MUL NE NOT ON OR PRINT RCB RETURN RRB RSB SEMICOLON SUB SUM TRUE WHERE WHILEprogram : declist MAIN LRB RRB blockdeclist : declist dec\n    | epsdec : vardec\n    | funcdectype : INTEGER\n    | FLOAT\n    | BOOLEANiddec : lvalue\n    | ID ASSIGN exp\n    idlist : iddec\n    | idlist COMMA iddec\n    vardec : idlist COLON typefuncdec : FUNCTION ID LRB paramdecs RRB COLON type block\n    | FUNCTION ID LRB paramdecs RRB blockparamdecs : paramdecslist\n    | epsparamdecslist : paramdec\n    | paramdecslist COMMA paramdec\n    paramdec : ID COLON type\n    | ID LSB RSB COLON typeblock : LCB stmtlist RCBstmtlist : stmtlist stmt\n    | epslvalue : ID\n    | ID LSB exp RSBcase : WHERE const COLON stmtlistcases : cases case\n    | eps\n    stmt : RETURN exp SEMICOLON\n    | exp SEMICOLON\n    | block\n    | vardec\n    | WHILE LRB exp LRB stmt\n    | ON LRB exp RRB LCB cases RCB SEMICOLON\n    | FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt\n    | FOR LRB ID IN RRB stmt\n    | IF LRB exp RRB stmt elseiflist\n    | IF LRB exp RRB stmt elseiflist ELSE stmt\n    | PRINT LRB ID RRB SEMICOLONelseiflist : elseiflist ELSEIF LRB exp RRB stmt\n    | epsrelopexp : exp relop exp\n    | relopexp relop exprelop : GT\n    | GE\n    | LT\n    | LE\n    | EQ\n    | NEexp : lvalue ASSIGN exp\n    | exp operator exp\n    | relopexp\n    | const\n    | lvalue\n    | ID LRB explist RRB\n    | LRB exp RRB\n    | lvalue LRB RRB\n    | SUB exp\n    | NOT expoperator : AND\n    | OR\n    | SUM\n    | SUB\n    | MUL\n    | DIV\n    | MODconst : INTEGERNUMBER\n    | FLOATNUMBER\n    | TRUE\n    | FALSEexplist : exp\n    | explist COMMA expeps :'
    
_lr_action_items = {'MAIN':([0,2,3,5,6,7,20,21,22,23,83,99,121,],[-74,4,-3,-2,-4,-5,-13,-6,-7,-8,-22,-15,-14,]),'FUNCTION':([0,2,3,5,6,7,20,21,22,23,83,99,121,],[-74,9,-3,-2,-4,-5,-13,-6,-7,-8,-22,-15,-14,]),'ID':([0,2,3,5,6,7,9,15,17,18,20,21,22,23,25,31,32,33,40,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,69,70,74,83,84,85,87,88,99,102,104,105,106,107,108,109,113,121,122,124,126,128,131,132,133,136,137,138,139,144,146,148,149,150,151,152,154,155,156,],[-74,10,-3,-2,-4,-5,16,10,26,26,-13,-6,-7,-8,41,26,26,26,-74,26,26,26,-61,-62,-63,-64,-65,-66,-67,-45,-46,-47,-48,-49,-50,26,26,92,-24,41,-22,-23,26,-32,-33,-15,26,-31,26,26,117,26,119,-30,-14,92,26,92,-34,92,-74,-40,26,-37,-38,-42,92,-35,92,-39,26,-74,-36,92,92,-41,]),'$end':([1,39,83,],[0,-1,-22,]),'LRB':([4,16,17,18,20,21,22,23,26,28,29,30,31,32,33,34,35,36,37,40,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,66,67,68,69,70,77,78,79,80,81,82,83,84,85,87,88,89,90,91,92,93,94,95,101,102,104,105,106,107,108,113,114,117,122,124,126,128,131,132,133,136,137,138,139,144,145,146,148,149,150,151,152,154,155,156,],[13,25,31,31,-13,-6,-7,-8,46,63,-53,-54,31,31,31,-68,-69,-70,-71,-74,31,31,31,-61,-62,-63,-64,-65,-66,-67,-45,-46,-47,-48,-49,-50,31,31,-59,-60,-26,31,-24,-52,-43,-51,-58,-44,-57,-22,-23,31,-32,-33,105,106,107,46,108,109,63,-56,31,-31,31,31,31,31,-30,122,46,31,31,31,-34,31,-74,-40,31,-37,-38,-42,31,150,-35,31,-39,31,-74,-36,31,31,-41,]),'COLON':([8,10,11,12,24,26,27,28,29,30,34,35,36,37,41,66,67,68,73,77,78,79,80,81,82,92,95,97,101,147,],[14,-25,-11,-9,-12,-25,-10,-55,-53,-54,-68,-69,-70,-71,71,-59,-60,-26,98,-52,-43,-51,-58,-44,-57,-25,-9,110,-56,151,]),'COMMA':([8,10,11,12,21,22,23,24,26,27,28,29,30,34,35,36,37,43,45,66,67,68,75,76,77,78,79,80,81,82,92,95,96,100,101,112,120,],[15,-25,-11,-9,-6,-7,-8,-12,-25,-10,-55,-53,-54,-68,-69,-70,-71,74,-18,-59,-60,-26,102,-72,-52,-43,-51,-58,-44,-57,-25,-9,-20,-19,-56,-73,-21,]),'ASSIGN':([10,26,28,68,92,95,117,],[17,-25,62,-26,17,62,-25,]),'LSB':([10,26,41,92,117,],[18,18,72,18,18,]),'RRB':([13,21,22,23,25,26,28,29,30,34,35,36,37,42,43,44,45,63,65,66,67,68,75,76,77,78,79,80,81,82,96,100,101,112,115,118,119,120,125,143,153,],[19,-6,-7,-8,-74,-25,-55,-53,-54,-68,-69,-70,-71,73,-16,-17,-18,80,82,-59,-60,-26,101,-72,-52,-43,-51,-58,-44,-57,-20,-19,-56,-73,123,126,127,-21,131,148,155,]),'INTEGER':([14,71,98,110,],[21,21,21,21,]),'FLOAT':([14,71,98,110,],[22,22,22,22,]),'BOOLEAN':([14,71,98,110,],[23,23,23,23,]),'SUB':([17,18,20,21,22,23,26,27,28,29,30,31,32,33,34,35,36,37,38,40,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,65,66,67,68,69,70,76,77,78,79,80,81,82,83,84,85,86,87,88,92,95,101,102,103,104,105,106,107,108,112,113,114,115,116,117,118,122,124,126,128,130,131,132,133,136,137,138,139,143,144,146,148,149,150,151,152,153,154,155,156,],[32,32,-13,-6,-7,-8,-25,52,-55,-53,-54,32,32,32,-68,-69,-70,-71,52,-74,32,32,32,-61,-62,-63,-64,-65,-66,-67,-45,-46,-47,-48,-49,-50,32,32,52,-59,52,-26,32,-24,52,52,52,52,-58,52,-57,-22,-23,32,52,-32,-33,-25,-55,-56,32,52,-31,32,32,32,32,52,-30,52,52,52,-25,52,32,32,32,-34,52,32,-74,-40,32,-37,-38,-42,52,32,-35,32,-39,32,-74,-36,52,32,32,-41,]),'NOT':([17,18,20,21,22,23,31,32,33,40,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,69,70,83,84,85,87,88,102,104,105,106,107,108,113,122,124,126,128,131,132,133,136,137,138,139,144,146,148,149,150,151,152,154,155,156,],[33,33,-13,-6,-7,-8,33,33,33,-74,33,33,33,-61,-62,-63,-64,-65,-66,-67,-45,-46,-47,-48,-49,-50,33,33,33,-24,-22,-23,33,-32,-33,33,-31,33,33,33,33,-30,33,33,33,-34,33,-74,-40,33,-37,-38,-42,33,-35,33,-39,33,-74,-36,33,33,-41,]),'INTEGERNUMBER':([17,18,20,21,22,23,31,32,33,40,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,69,70,83,84,85,87,88,102,104,105,106,107,108,113,122,124,126,128,131,132,133,136,137,138,139,142,144,146,148,149,150,151,152,154,155,156,],[34,34,-13,-6,-7,-8,34,34,34,-74,34,34,34,-61,-62,-63,-64,-65,-66,-67,-45,-46,-47,-48,-49,-50,34,34,34,-24,-22,-23,34,-32,-33,34,-31,34,34,34,34,-30,34,34,34,-34,34,-74,-40,34,-37,-38,-42,34,34,-35,34,-39,34,-74,-36,34,34,-41,]),'FLOATNUMBER':([17,18,20,21,22,23,31,32,33,40,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,69,70,83,84,85,87,88,102,104,105,106,107,108,113,122,124,126,128,131,132,133,136,137,138,139,142,144,146,148,149,150,151,152,154,155,156,],[35,35,-13,-6,-7,-8,35,35,35,-74,35,35,35,-61,-62,-63,-64,-65,-66,-67,-45,-46,-47,-48,-49,-50,35,35,35,-24,-22,-23,35,-32,-33,35,-31,35,35,35,35,-30,35,35,35,-34,35,-74,-40,35,-37,-38,-42,35,35,-35,35,-39,35,-74,-36,35,35,-41,]),'TRUE':([17,18,20,21,22,23,31,32,33,40,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,69,70,83,84,85,87,88,102,104,105,106,107,108,113,122,124,126,128,131,132,133,136,137,138,139,142,144,146,148,149,150,151,152,154,155,156,],[36,36,-13,-6,-7,-8,36,36,36,-74,36,36,36,-61,-62,-63,-64,-65,-66,-67,-45,-46,-47,-48,-49,-50,36,36,36,-24,-22,-23,36,-32,-33,36,-31,36,36,36,36,-30,36,36,36,-34,36,-74,-40,36,-37,-38,-42,36,36,-35,36,-39,36,-74,-36,36,36,-41,]),'FALSE':([17,18,20,21,22,23,31,32,33,40,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,69,70,83,84,85,87,88,102,104,105,106,107,108,113,122,124,126,128,131,132,133,136,137,138,139,142,144,146,148,149,150,151,152,154,155,156,],[37,37,-13,-6,-7,-8,37,37,37,-74,37,37,37,-61,-62,-63,-64,-65,-66,-67,-45,-46,-47,-48,-49,-50,37,37,37,-24,-22,-23,37,-32,-33,37,-31,37,37,37,37,-30,37,37,37,-34,37,-74,-40,37,-37,-38,-42,37,37,-35,37,-39,37,-74,-36,37,37,-41,]),'LCB':([19,20,21,22,23,40,69,70,73,83,84,87,88,104,111,113,122,123,126,128,131,132,133,137,138,139,144,146,148,149,151,152,154,155,156,],[40,-13,-6,-7,-8,-74,40,-24,40,-22,-23,-32,-33,-31,40,-30,40,129,40,-34,40,-74,-40,-37,-38,-42,40,-35,40,-39,-74,-36,40,40,-41,]),'RCB':([20,21,22,23,40,69,70,83,84,87,88,104,113,128,129,132,133,134,135,137,138,139,141,146,149,151,152,154,156,],[-13,-6,-7,-8,-74,83,-24,-22,-23,-32,-33,-31,-30,-34,-74,-74,-40,140,-29,-37,-38,-42,-28,-35,-39,-74,-36,-27,-41,]),'RETURN':([20,21,22,23,40,69,70,83,84,87,88,104,113,122,126,128,131,132,133,137,138,139,144,146,148,149,151,152,154,155,156,],[-13,-6,-7,-8,-74,85,-24,-22,-23,-32,-33,-31,-30,85,85,-34,85,-74,-40,-37,-38,-42,85,-35,85,-39,-74,-36,85,85,-41,]),'WHILE':([20,21,22,23,40,69,70,83,84,87,88,104,113,122,126,128,131,132,133,137,138,139,144,146,148,149,151,152,154,155,156,],[-13,-6,-7,-8,-74,89,-24,-22,-23,-32,-33,-31,-30,89,89,-34,89,-74,-40,-37,-38,-42,89,-35,89,-39,-74,-36,89,89,-41,]),'ON':([20,21,22,23,40,69,70,83,84,87,88,104,113,122,126,128,131,132,133,137,138,139,144,146,148,149,151,152,154,155,156,],[-13,-6,-7,-8,-74,90,-24,-22,-23,-32,-33,-31,-30,90,90,-34,90,-74,-40,-37,-38,-42,90,-35,90,-39,-74,-36,90,90,-41,]),'FOR':([20,21,22,23,40,69,70,83,84,87,88,104,113,122,126,128,131,132,133,137,138,139,144,146,148,149,151,152,154,155,156,],[-13,-6,-7,-8,-74,91,-24,-22,-23,-32,-33,-31,-30,91,91,-34,91,-74,-40,-37,-38,-42,91,-35,91,-39,-74,-36,91,91,-41,]),'IF':([20,21,22,23,40,69,70,83,84,87,88,104,113,122,126,128,131,132,133,137,138,139,144,146,148,149,151,152,154,155,156,],[-13,-6,-7,-8,-74,93,-24,-22,-23,-32,-33,-31,-30,93,93,-34,93,-74,-40,-37,-38,-42,93,-35,93,-39,-74,-36,93,93,-41,]),'PRINT':([20,21,22,23,40,69,70,83,84,87,88,104,113,122,126,128,131,132,133,137,138,139,144,146,148,149,151,152,154,155,156,],[-13,-6,-7,-8,-74,94,-24,-22,-23,-32,-33,-31,-30,94,94,-34,94,-74,-40,-37,-38,-42,94,-35,94,-39,-74,-36,94,94,-41,]),'ELSE':([20,21,22,23,83,87,88,104,113,128,132,133,137,138,139,146,149,152,156,],[-13,-6,-7,-8,-22,-32,-33,-31,-30,-34,-74,-40,-37,144,-42,-35,-39,-36,-41,]),'ELSEIF':([20,21,22,23,83,87,88,104,113,128,132,133,137,138,139,146,149,152,156,],[-13,-6,-7,-8,-22,-32,-33,-31,-30,-34,-74,-40,-37,145,-42,-35,-39,-36,-41,]),'WHERE':([20,21,22,23,70,83,84,87,88,104,113,128,129,132,133,134,135,137,138,139,141,146,149,151,152,154,156,],[-13,-6,-7,-8,-24,-22,-23,-32,-33,-31,-30,-34,-74,-74,-40,142,-29,-37,-38,-42,-28,-35,-39,-74,-36,-27,-41,]),'AND':([26,27,28,29,30,34,35,36,37,38,65,66,67,68,76,77,78,79,80,81,82,86,92,95,101,103,112,114,115,116,117,118,130,143,153,],[-25,49,-55,-53,-54,-68,-69,-70,-71,49,49,-59,-60,-26,49,49,49,-51,-58,49,-57,49,-25,-55,-56,49,49,49,49,49,-25,49,49,49,49,]),'OR':([26,27,28,29,30,34,35,36,37,38,65,66,67,68,76,77,78,79,80,81,82,86,92,95,101,103,112,114,115,116,117,118,130,143,153,],[-25,50,-55,-53,-54,-68,-69,-70,-71,50,50,-59,-60,-26,50,50,50,-51,-58,50,-57,50,-25,-55,-56,50,50,50,50,50,-25,50,50,50,50,]),'SUM':([26,27,28,29,30,34,35,36,37,38,65,66,67,68,76,77,78,79,80,81,82,86,92,95,101,103,112,114,115,116,117,118,130,143,153,],[-25,51,-55,-53,-54,-68,-69,-70,-71,51,51,-59,51,-26,51,51,51,51,-58,51,-57,51,-25,-55,-56,51,51,51,51,51,-25,51,51,51,51,]),'MUL':([26,27,28,29,30,34,35,36,37,38,65,66,67,68,76,77,78,79,80,81,82,86,92,95,101,103,112,114,115,116,117,118,130,143,153,],[-25,53,-55,-53,-54,-68,-69,-70,-71,53,53,53,53,-26,53,53,53,53,-58,53,-57,53,-25,-55,-56,53,53,53,53,53,-25,53,53,53,53,]),'DIV':([26,27,28,29,30,34,35,36,37,38,65,66,67,68,76,77,78,79,80,81,82,86,92,95,101,103,112,114,115,116,117,118,130,143,153,],[-25,54,-55,-53,-54,-68,-69,-70,-71,54,54,54,54,-26,54,54,54,54,-58,54,-57,54,-25,-55,-56,54,54,54,54,54,-25,54,54,54,54,]),'MOD':([26,27,28,29,30,34,35,36,37,38,65,66,67,68,76,77,78,79,80,81,82,86,92,95,101,103,112,114,115,116,117,118,130,143,153,],[-25,55,-55,-53,-54,-68,-69,-70,-71,55,55,55,55,-26,55,55,55,55,-58,55,-57,55,-25,-55,-56,55,55,55,55,55,-25,55,55,55,55,]),'GT':([26,27,28,29,30,34,35,36,37,38,65,66,67,68,76,77,78,79,80,81,82,86,92,95,101,103,112,114,115,116,117,118,130,143,153,],[-25,56,-55,56,-54,-68,-69,-70,-71,56,56,-59,56,-26,56,56,56,-51,-58,56,-57,56,-25,-55,-56,56,56,56,56,56,-25,56,56,56,56,]),'GE':([26,27,28,29,30,34,35,36,37,38,65,66,67,68,76,77,78,79,80,81,82,86,92,95,101,103,112,114,115,116,117,118,130,143,153,],[-25,57,-55,57,-54,-68,-69,-70,-71,57,57,-59,57,-26,57,57,57,-51,-58,57,-57,57,-25,-55,-56,57,57,57,57,57,-25,57,57,57,57,]),'LT':([26,27,28,29,30,34,35,36,37,38,65,66,67,68,76,77,78,79,80,81,82,86,92,95,101,103,112,114,115,116,117,118,130,143,153,],[-25,58,-55,58,-54,-68,-69,-70,-71,58,58,-59,58,-26,58,58,58,-51,-58,58,-57,58,-25,-55,-56,58,58,58,58,58,-25,58,58,58,58,]),'LE':([26,27,28,29,30,34,35,36,37,38,65,66,67,68,76,77,78,79,80,81,82,86,92,95,101,103,112,114,115,116,117,118,130,143,153,],[-25,59,-55,59,-54,-68,-69,-70,-71,59,59,-59,59,-26,59,59,59,-51,-58,59,-57,59,-25,-55,-56,59,59,59,59,59,-25,59,59,59,59,]),'EQ':([26,27,28,29,30,34,35,36,37,38,65,66,67,68,76,77,78,79,80,81,82,86,92,95,101,103,112,114,115,116,117,118,130,143,153,],[-25,60,-55,60,-54,-68,-69,-70,-71,60,60,-59,60,-26,60,60,60,-51,-58,60,-57,60,-25,-55,-56,60,60,60,60,60,-25,60,60,60,60,]),'NE':([26,27,28,29,30,34,35,36,37,38,65,66,67,68,76,77,78,79,80,81,82,86,92,95,101,103,112,114,115,116,117,118,130,143,153,],[-25,61,-55,61,-54,-68,-69,-70,-71,61,61,-59,61,-26,61,61,61,-51,-58,61,-57,61,-25,-55,-56,61,61,61,61,61,-25,61,61,61,61,]),'RSB':([26,28,29,30,34,35,36,37,38,66,67,68,72,77,78,79,80,81,82,101,],[-25,-55,-53,-54,-68,-69,-70,-71,68,-59,-60,-26,97,-52,-43,-51,-58,-44,-57,-56,]),'SEMICOLON':([26,28,29,30,34,35,36,37,66,67,68,77,78,79,80,81,82,86,92,95,101,103,116,117,127,130,140,],[-25,-55,-53,-54,-68,-69,-70,-71,-59,-60,-26,-52,-43,-51,-58,-44,-57,104,-25,-55,-56,113,124,-25,133,136,146,]),'IN':([117,],[125,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declist':([0,],[2,]),'eps':([0,25,40,129,132,151,],[3,44,70,135,139,70,]),'dec':([2,],[5,]),'vardec':([2,69,122,126,131,144,148,154,155,],[6,88,88,88,88,88,88,88,88,]),'funcdec':([2,],[7,]),'idlist':([2,69,122,126,131,144,148,154,155,],[8,8,8,8,8,8,8,8,8,]),'iddec':([2,15,69,122,126,131,144,148,154,155,],[11,24,11,11,11,11,11,11,11,11,]),'lvalue':([2,15,17,18,31,32,33,46,47,48,62,64,69,85,102,105,106,107,108,122,124,126,131,136,144,148,150,154,155,],[12,12,28,28,28,28,28,28,28,28,28,28,95,28,28,28,28,28,28,95,28,95,95,28,95,95,28,95,95,]),'type':([14,71,98,110,],[20,96,111,120,]),'exp':([17,18,31,32,33,46,47,48,62,64,69,85,102,105,106,107,108,122,124,126,131,136,144,148,150,154,155,],[27,38,65,66,67,76,77,78,79,81,86,103,112,114,115,116,118,86,130,86,86,143,86,86,153,86,86,]),'relopexp':([17,18,31,32,33,46,47,48,62,64,69,85,102,105,106,107,108,122,124,126,131,136,144,148,150,154,155,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'const':([17,18,31,32,33,46,47,48,62,64,69,85,102,105,106,107,108,122,124,126,131,136,142,144,148,150,154,155,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,147,30,30,30,30,30,]),'block':([19,69,73,111,122,126,131,144,148,154,155,],[39,87,99,121,87,87,87,87,87,87,87,]),'paramdecs':([25,],[42,]),'paramdecslist':([25,],[43,]),'paramdec':([25,74,],[45,100,]),'operator':([27,38,65,66,67,76,77,78,79,81,86,103,112,114,115,116,118,130,143,153,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'relop':([27,29,38,65,66,67,76,77,78,79,81,86,103,112,114,115,116,118,130,143,153,],[48,64,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'stmtlist':([40,151,],[69,154,]),'explist':([46,],[75,]),'stmt':([69,122,126,131,144,148,154,155,],[84,128,132,137,149,152,84,156,]),'cases':([129,],[134,]),'elseiflist':([132,],[138,]),'case':([134,],[141,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declist MAIN LRB RRB block','program',5,'p_program','parser.py',15),
  ('declist -> declist dec','declist',2,'p_declist','parser.py',20),
  ('declist -> eps','declist',1,'p_declist','parser.py',21),
  ('dec -> vardec','dec',1,'p_dec','parser.py',27),
  ('dec -> funcdec','dec',1,'p_dec','parser.py',28),
  ('type -> INTEGER','type',1,'p_type','parser.py',33),
  ('type -> FLOAT','type',1,'p_type','parser.py',34),
  ('type -> BOOLEAN','type',1,'p_type','parser.py',35),
  ('iddec -> lvalue','iddec',1,'p_iddec','parser.py',40),
  ('iddec -> ID ASSIGN exp','iddec',3,'p_iddec','parser.py',41),
  ('idlist -> iddec','idlist',1,'p_idlist','parser.py',47),
  ('idlist -> idlist COMMA iddec','idlist',3,'p_idlist','parser.py',48),
  ('vardec -> idlist COLON type','vardec',3,'p_vardec','parser.py',54),
  ('funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block','funcdec',8,'p_funcdec','parser.py',59),
  ('funcdec -> FUNCTION ID LRB paramdecs RRB block','funcdec',6,'p_funcdec','parser.py',60),
  ('paramdecs -> paramdecslist','paramdecs',1,'p_paramdecs','parser.py',65),
  ('paramdecs -> eps','paramdecs',1,'p_paramdecs','parser.py',66),
  ('paramdecslist -> paramdec','paramdecslist',1,'p_paramdecslist','parser.py',71),
  ('paramdecslist -> paramdecslist COMMA paramdec','paramdecslist',3,'p_paramdecslist','parser.py',72),
  ('paramdec -> ID COLON type','paramdec',3,'p_paramdec','parser.py',78),
  ('paramdec -> ID LSB RSB COLON type','paramdec',5,'p_paramdec','parser.py',79),
  ('block -> LCB stmtlist RCB','block',3,'p_block','parser.py',84),
  ('stmtlist -> stmtlist stmt','stmtlist',2,'p_stmtlist','parser.py',89),
  ('stmtlist -> eps','stmtlist',1,'p_stmtlist','parser.py',90),
  ('lvalue -> ID','lvalue',1,'p_lvalue','parser.py',95),
  ('lvalue -> ID LSB exp RSB','lvalue',4,'p_lvalue','parser.py',96),
  ('case -> WHERE const COLON stmtlist','case',4,'p_case','parser.py',101),
  ('cases -> cases case','cases',2,'p_cases','parser.py',106),
  ('cases -> eps','cases',1,'p_cases','parser.py',107),
  ('stmt -> RETURN exp SEMICOLON','stmt',3,'p_stmt','parser.py',113),
  ('stmt -> exp SEMICOLON','stmt',2,'p_stmt','parser.py',114),
  ('stmt -> block','stmt',1,'p_stmt','parser.py',115),
  ('stmt -> vardec','stmt',1,'p_stmt','parser.py',116),
  ('stmt -> WHILE LRB exp LRB stmt','stmt',5,'p_stmt','parser.py',117),
  ('stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON','stmt',8,'p_stmt','parser.py',118),
  ('stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt','stmt',9,'p_stmt','parser.py',119),
  ('stmt -> FOR LRB ID IN RRB stmt','stmt',6,'p_stmt','parser.py',120),
  ('stmt -> IF LRB exp RRB stmt elseiflist','stmt',6,'p_stmt','parser.py',121),
  ('stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt','stmt',8,'p_stmt','parser.py',122),
  ('stmt -> PRINT LRB ID RRB SEMICOLON','stmt',5,'p_stmt','parser.py',123),
  ('elseiflist -> elseiflist ELSEIF LRB exp RRB stmt','elseiflist',6,'p_elseiflist','parser.py',128),
  ('elseiflist -> eps','elseiflist',1,'p_elseiflist','parser.py',129),
  ('relopexp -> exp relop exp','relopexp',3,'p_relopexp','parser.py',134),
  ('relopexp -> relopexp relop exp','relopexp',3,'p_relopexp','parser.py',135),
  ('relop -> GT','relop',1,'p_relop','parser.py',140),
  ('relop -> GE','relop',1,'p_relop','parser.py',141),
  ('relop -> LT','relop',1,'p_relop','parser.py',142),
  ('relop -> LE','relop',1,'p_relop','parser.py',143),
  ('relop -> EQ','relop',1,'p_relop','parser.py',144),
  ('relop -> NE','relop',1,'p_relop','parser.py',145),
  ('exp -> lvalue ASSIGN exp','exp',3,'p_exp','parser.py',150),
  ('exp -> exp operator exp','exp',3,'p_exp','parser.py',151),
  ('exp -> relopexp','exp',1,'p_exp','parser.py',152),
  ('exp -> const','exp',1,'p_exp','parser.py',153),
  ('exp -> lvalue','exp',1,'p_exp','parser.py',154),
  ('exp -> ID LRB explist RRB','exp',4,'p_exp','parser.py',155),
  ('exp -> LRB exp RRB','exp',3,'p_exp','parser.py',156),
  ('exp -> lvalue LRB RRB','exp',3,'p_exp','parser.py',157),
  ('exp -> SUB exp','exp',2,'p_exp','parser.py',158),
  ('exp -> NOT exp','exp',2,'p_exp','parser.py',159),
  ('operator -> AND','operator',1,'p_operator','parser.py',164),
  ('operator -> OR','operator',1,'p_operator','parser.py',165),
  ('operator -> SUM','operator',1,'p_operator','parser.py',166),
  ('operator -> SUB','operator',1,'p_operator','parser.py',167),
  ('operator -> MUL','operator',1,'p_operator','parser.py',168),
  ('operator -> DIV','operator',1,'p_operator','parser.py',169),
  ('operator -> MOD','operator',1,'p_operator','parser.py',170),
  ('const -> INTEGERNUMBER','const',1,'p_const','parser.py',175),
  ('const -> FLOATNUMBER','const',1,'p_const','parser.py',176),
  ('const -> TRUE','const',1,'p_const','parser.py',177),
  ('const -> FALSE','const',1,'p_const','parser.py',178),
  ('explist -> exp','explist',1,'p_explist','parser.py',183),
  ('explist -> explist COMMA exp','explist',3,'p_explist','parser.py',184),
  ('eps -> <empty>','eps',0,'p_eps','parser.py',189),
]
